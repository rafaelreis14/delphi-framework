unit Biz.CreditoCliente;

interface

uses
    Classes, System.SysUtils, Dialogs, Lib.Base, Lib.Parametro, Lib.Enumeradores,
    Lib.Persistable, Lib.MaxLenght, Lib.Lista, Lib.ResultFilter,
    Framework.Interfaces.CRUD;

type
    TCreditoCliente = class(TBase, ICRUD<TCreditoCliente>)
    private
        FSaldoPendenteCompensar: double;
        FParcelaOrc: string;
        FPrefixoOrc: string;
        FNumeroNCC: string;
        FFilial: string;
        FRecnoDaSZ9: double;
        FValor: double;
        FSequencialOrc: string;
        FDocumentoOrigem: string;
        FUsuarioCancelamento: string;
        FClienteOrc: string;
        FTipoNCC: string;
        FDataCancelamento: string;
        FStatus: string;
        FParcelaNCC: string;
        FSequencialNCC: string;
        FPrefixoNCC: string;
        FRecno: integer;
        FNumeroOrcamento: string;
        FFilialNCC: string;
        FDelete: string;
        FMotivoCancelamento: string;
        FUsuario: string;
        FData: string;
        FClienteNCC: string;
        FTipoOrc: string;
        FNomeCliente: string;
        FEmissaoNCC: String;
        FSaldoNCC: Double;
        FValorNCC: Double;
        FValorDisponivel: Double;
        FValorReservado: Double;
        FFormaPagamento: string;
        FSequenciamento: integer;
        procedure SetClienteNCC(const Value: string);
        procedure SetClienteOrc(const Value: string);
        procedure SetData(const Value: string);
        procedure SetDataCancelamento(const Value: string);
        procedure SetDelete(const Value: string);
        procedure SetDocumentoOrigem(const Value: string);
        procedure SetFilial(const Value: string);
        procedure SetFilialNCC(const Value: string);
        procedure SetMotivoCancelamento(const Value: string);
        procedure SetNumeroNCC(const Value: string);
        procedure SetNumeroOrcamento(const Value: string);
        procedure SetParcelaNCC(const Value: string);
        procedure SetParcelaOrc(const Value: string);
        procedure SetPrefixoNCC(const Value: string);
        procedure SetPrefixoOrc(const Value: string);
        procedure SetRecno(const Value: integer);
        procedure SetRecnoDaSZ9(const Value: double);
        procedure SetSaldoPendenteCompensar(const Value: double);
        procedure SetSequencialNCC(const Value: string);
        procedure SetSequencialOrc(const Value: string);
        procedure SetStatus(const Value: string);
        procedure SetTipoNCC(const Value: string);
        procedure SetTipoOrc(const Value: string);
        procedure SetUsuario(const Value: string);
        procedure SetUsuarioCancelamento(const Value: string);
        procedure SetValor(const Value: double);
        procedure SetNomeCliente(const Value: string);
        procedure SetEmissaoNCC(const Value: String);
        procedure SetSaldoNCC(const Value: Double);
        procedure SetValorDisponivel(const Value: Double);
        procedure SetValorNCC(const Value: Double);
        procedure SetValorReservado(const Value: Double);
        procedure SetFormaPagamento(const Value: string);
        procedure SetSequenciamento(const Value: integer);
    public
        /// <summary>
        /// Metodo que faz a inserção da CreditoCliente
        /// </summary>
        function Inserir: integer;
        /// <summary>
        /// Metodo que faz a alteração da CreditoCliente
        /// </summary>
        function Alterar: integer;

        /// <summary>
        /// Métido que faz a Deleção da CreditoCliente
        /// </summary>
        /// <param name="ID">
        /// Chave  primária da tabela
        /// </param>
        function Deletar: integer;

        /// <summary>
        /// Método que chama a tela de filtro
        /// </summary>
        /// <param name="tipoOperacao">
        /// Tipo da operação, se é somente filtro, ou seleção de registro
        /// </param>
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="ID">
        /// Chave primária da tabela
        /// </param>
        function Obter(ID: string): TCreditoCliente; overload;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Obter(parametros: TParametro): TCreditoCliente; overload;

        /// <summary>
        /// Método que retonar uma lista com varios objetos de acordo com parametro passado
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Consultar(parametros: TParametro): TLista<TCreditoCliente>;

        /// <summary>
        /// Método que preenche a instância do Objeto
        /// </summary>
        /// <param name="CreditoCliente">
        /// objeto de parametro para preenchimento da instância
        /// </param>
        procedure PreencherObjeto(CreditoCliente: TCreditoCliente);

        [TPersistable(fgPersistable, 'Z40_FILIAL')]
        [TMaxLenght(2)]
        property Filial: string read FFilial write SetFilial;

        [TPersistable(fgPersistable, 'Z40_PRFNCC')]
        [TMaxLenght(3)]
        property PrefixoNCC: string read FPrefixoNCC write SetPrefixoNCC;

        [TPersistable(fgPersistable, 'Z40_NUMNCC')]
        [TMaxLenght(9)]
        property NumeroNCC: string read FNumeroNCC write SetNumeroNCC;

        [TPersistable(fgPersistable, 'Z40_PARNCC')]
        [TMaxLenght(3)]
        property ParcelaNCC: string read FParcelaNCC write SetParcelaNCC;

        [TPersistable(fgPersistable, 'Z40_TIPNCC')]
        [TMaxLenght(3)]
        property TipoNCC: string read FTipoNCC write SetTipoNCC;

        [TPersistable(fgPersistable, 'Z40_CLINCC')]
        [TMaxLenght(6)]
        property ClienteNCC: string read FClienteNCC write SetClienteNCC;

        [TPersistable(fgPersistable, 'Z40_LOJNCC')]
        [TMaxLenght(2)]
        property SequencialNCC: string read FSequencialNCC write SetSequencialNCC;

        [TPersistable(fgPersistable, 'Z40_FILNCC')]
        [TMaxLenght(2)]
        property FilialNCC: string read FFilialNCC write SetFilialNCC;

        [TPersistable(fgPersistable, 'Z40_NUMORC')]
        [TMaxLenght(6)]
        property NumeroOrcamento: string read FNumeroOrcamento write SetNumeroOrcamento;

        [TPersistable(fgPersistable, 'Z40_VALOR')]
        property Valor: double read FValor write SetValor;

        [TPersistable(fgPersistable, 'Z40_STATUS')]
        [TMaxLenght(1)]
        property Status: string read FStatus write SetStatus;

        [TPersistable(fgPersistable, 'Z40_DATA')]
        [TMaxLenght(8)]
        property Data: string read FData write SetData;

        [TPersistable(fgPersistable, 'Z40_USERID')]
        [TMaxLenght(50)]
        property Usuario: string read FUsuario write SetUsuario;

        [TPersistable(fgPersistable, 'Z40_DTCANC')]
        [TMaxLenght(8)]
        property DataCancelamento: string read FDataCancelamento write SetDataCancelamento;

        [TPersistable(fgPersistable, 'Z40_USECAN')]
        [TMaxLenght(50)]
        property UsuarioCancelamento: string read FUsuarioCancelamento write SetUsuarioCancelamento;

        [TPersistable(fgPersistable, 'Z40_MOTCAN')]
        [TMaxLenght(100)]
        property MotivoCancelamento: string read FMotivoCancelamento write SetMotivoCancelamento;

        [TPersistable(fgPersistable, 'D_E_L_E_T_')]
        [TMaxLenght(1)]
        property Delete: string read FDelete write SetDelete;

        [TPersistable(fgPersistable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        [TPersistable(fgPersistable, 'Z40_SLDCMP')]
        property SaldoPendenteCompensar: double read FSaldoPendenteCompensar write SetSaldoPendenteCompensar;

        [TPersistable(fgPersistable, 'Z40_PRFORC')]
        [TMaxLenght(3)]
        property PrefixoOrc: string read FPrefixoOrc write SetPrefixoOrc;

        [TPersistable(fgPersistable, 'Z40_PARORC')]
        [TMaxLenght(3)]
        property ParcelaOrc: string read FParcelaOrc write SetParcelaOrc;

        [TPersistable(fgPersistable, 'Z40_CLIORC')]
        [TMaxLenght(6)]
        property ClienteOrc: string read FClienteOrc write SetClienteOrc;

        [TPersistable(fgPersistable, 'Z40_LOJORC')]
        [TMaxLenght(2)]
        property SequencialOrc: string read FSequencialOrc write SetSequencialOrc;

        [TPersistable(fgPersistable, 'Z40_TIPORC')]
        [TMaxLenght(3)]
        property TipoOrc: string read FTipoOrc write SetTipoOrc;

        [TPersistable(fgPersistable, 'Z40_DOCORC')]
        [TMaxLenght(9)]
        property DocumentoOrigem: string read FDocumentoOrigem write SetDocumentoOrigem;

        [TPersistable(fgPersistable, 'Z40_REC_Z9')]
        property RecnoDaSZ9: double read FRecnoDaSZ9 write SetRecnoDaSZ9;

        // Propriedades para mostrar informações na tela.
        property NomeCliente: string read FNomeCliente write SetNomeCliente;
        property SaldoNCC: Double read FSaldoNCC write SetSaldoNCC;
        property ValorReservado: Double read FValorReservado write SetValorReservado;
        property ValorDisponivel: Double read FValorDisponivel write SetValorDisponivel;
        property ValorNCC: Double read FValorNCC write SetValorNCC;
        property EmissaoNCC: String read FEmissaoNCC write SetEmissaoNCC;

        // Propriedades para lincamento entre grids
        property FormaPagamento: string read FFormaPagamento write SetFormaPagamento;
        property Sequenciamento: integer read FSequenciamento write SetSequenciamento;

    end;

implementation

{ TCreditoCliente }

uses Lib.Filter, Lib.Biblioteca;

{$REGION 'Métodos CRUD'}

function TCreditoCliente.Inserir: integer;
begin
    // BaseLib.ExecutaTarefa('InserirCreditoCliente', 'TCreditoCliente', ObjectToParameters(acInsercao));
    // ###Validar retorno da função
    // result := 0;
end;

function TCreditoCliente.Alterar: integer;
begin
    // BaseLib.ExecutaTarefa('AlterarCreditoCliente', 'TCreditoCliente' , ObjectToParameters(acAlteracao));
    // ###Validar retorno da função
    // result := 0;
end;

function TCreditoCliente.Consultar(parametros: TParametro): TLista<TCreditoCliente>;
begin
//    Result := BaseLib.XmlToObject<TCreditoCliente>(BaseLib.ExecutaTarefa('ConsultarCreditoCliente', 'TCreditoCliente', parametros)).Tolist;
end;

function TCreditoCliente.Deletar: integer;
begin
end;

function TCreditoCliente.Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TCreditoCliente>;
    // parametro : TParametro;
    // lista:TLista<TCreditoCliente>
begin
    try
        filtro := TFilter<TCreditoCliente>.Create;
        filtro.ScreenName := 'Filtro de CreditoCliente';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.Task := 'ConsultarCreditoCliente';
        // ###Criar os Índices do filtro

{$REGION 'Campo Filtro'}
        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Filial';
        campoFiltro.Name := 'Filial';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'PrefixoNCC';
        campoFiltro.Name := 'PrefixoNCC';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'NumeroNCC';
        campoFiltro.Name := 'NumeroNCC';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'ParcelaNCC';
        campoFiltro.Name := 'ParcelaNCC';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'TipoNCC';
        campoFiltro.Name := 'TipoNCC';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'ClienteNCC';
        campoFiltro.Name := 'ClienteNCC';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'SequencialNCC';
        campoFiltro.Name := 'SequencialNCC';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'FilialNCC';
        campoFiltro.Name := 'FilialNCC';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'NumeroOrcamento';
        campoFiltro.Name := 'NumeroOrcamento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Valor';
        campoFiltro.Name := 'Valor';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Status';
        campoFiltro.Name := 'Status';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Data';
        campoFiltro.Name := 'Data';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Usuario';
        campoFiltro.Name := 'Usuario';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'DataCancelamento';
        campoFiltro.Name := 'DataCancelamento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'UsuarioCancelamento';
        campoFiltro.Name := 'UsuarioCancelamento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'MotivoCancelamento';
        campoFiltro.Name := 'MotivoCancelamento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Delete';
        campoFiltro.Name := 'Delete';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Recno';
        campoFiltro.Name := 'Recno';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'SaldoPendenteCompensar';
        campoFiltro.Name := 'SaldoPendenteCompensar';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'PrefixoOrc';
        campoFiltro.Name := 'PrefixoOrc';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'ParcelaOrc';
        campoFiltro.Name := 'ParcelaOrc';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'ClienteOrc';
        campoFiltro.Name := 'ClienteOrc';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'SequencialOrc';
        campoFiltro.Name := 'SequencialOrc';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'TipoOrc';
        campoFiltro.Name := 'TipoOrc';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'DocumentoOrigem';
        campoFiltro.Name := 'DocumentoOrigem';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'RecnoDaSZ9';
        campoFiltro.Name := 'RecnoDaSZ9';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

{$ENDREGION}
        Result := filtro.Execute(filtro);
    finally
        // FreeAndNil(parametro);
        // FreeAndNil(lista.Destroy);
    end;
end;

function TCreditoCliente.Obter(parametros: TParametro): TCreditoCliente;
var
    lista: TLista<TCreditoCliente>;
begin
    try
//        lista := BaseLib.XmlToObject<TCreditoCliente>(BaseLib.ExecutaTarefa('ConsultarCreditoCliente', 'TCreditoCliente', parametros));

        if lista.Count = 1 then
        begin
            PreencherObjeto(lista[0]);
            Result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            Result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

function TCreditoCliente.Obter(ID: string): TCreditoCliente;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        Result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;

{$ENDREGION}
{$REGION 'Regras de Negócio'}

procedure TCreditoCliente.PreencherObjeto(CreditoCliente: TCreditoCliente);
begin
    CreditoCliente.CopiarPara(Self);
    FPreenchido := true;
end;

procedure TCreditoCliente.SetClienteNCC(const Value: string);
begin
    FClienteNCC := Value;
end;

procedure TCreditoCliente.SetClienteOrc(const Value: string);
begin
    FClienteOrc := Value;
end;

procedure TCreditoCliente.SetData(const Value: string);
begin
    FData := Value;
end;

procedure TCreditoCliente.SetDataCancelamento(const Value: string);
begin
    FDataCancelamento := Value;
end;

procedure TCreditoCliente.SetDelete(const Value: string);
begin
    FDelete := Value;
end;

procedure TCreditoCliente.SetDocumentoOrigem(const Value: string);
begin
    FDocumentoOrigem := Value;
end;

procedure TCreditoCliente.SetEmissaoNCC(const Value: String);
begin
  FEmissaoNCC := Value;
end;

procedure TCreditoCliente.SetFilial(const Value: string);
begin
    FFilial := Value;
end;

procedure TCreditoCliente.SetFilialNCC(const Value: string);
begin
    FFilialNCC := Value;
end;

procedure TCreditoCliente.SetFormaPagamento(const Value: string);
begin
  FFormaPagamento := Value;
end;

procedure TCreditoCliente.SetMotivoCancelamento(const Value: string);
begin
    FMotivoCancelamento := Value;
end;

procedure TCreditoCliente.SetNomeCliente(const Value: string);
begin
  FNomeCliente := Value;
end;

procedure TCreditoCliente.SetNumeroNCC(const Value: string);
begin
    FNumeroNCC := Value;
end;

procedure TCreditoCliente.SetNumeroOrcamento(const Value: string);
begin
    FNumeroOrcamento := Value;
end;

procedure TCreditoCliente.SetParcelaNCC(const Value: string);
begin
    FParcelaNCC := Value;
end;

procedure TCreditoCliente.SetParcelaOrc(const Value: string);
begin
    FParcelaOrc := Value;
end;

procedure TCreditoCliente.SetPrefixoNCC(const Value: string);
begin
    FPrefixoNCC := Value;
end;

procedure TCreditoCliente.SetPrefixoOrc(const Value: string);
begin
    FPrefixoOrc := Value;
end;

procedure TCreditoCliente.SetRecno(const Value: integer);
begin
    FRecno := Value;
end;

procedure TCreditoCliente.SetRecnoDaSZ9(const Value: double);
begin
    FRecnoDaSZ9 := Value;
end;

procedure TCreditoCliente.SetSaldoNCC(const Value: Double);
begin
  FSaldoNCC := Value;
end;

procedure TCreditoCliente.SetSaldoPendenteCompensar(const Value: double);
begin
    FSaldoPendenteCompensar := Value;
end;

procedure TCreditoCliente.SetSequencialNCC(const Value: string);
begin
    FSequencialNCC := Value;
end;

procedure TCreditoCliente.SetSequencialOrc(const Value: string);
begin
    FSequencialOrc := Value;
end;

procedure TCreditoCliente.SetSequenciamento(const Value: integer);
begin
  FSequenciamento := Value;
end;

procedure TCreditoCliente.SetStatus(const Value: string);
begin
    FStatus := Value;
end;

procedure TCreditoCliente.SetTipoNCC(const Value: string);
begin
    FTipoNCC := Value;
end;

procedure TCreditoCliente.SetTipoOrc(const Value: string);
begin
    FTipoOrc := Value;
end;

procedure TCreditoCliente.SetUsuario(const Value: string);
begin
    FUsuario := Value;
end;

procedure TCreditoCliente.SetUsuarioCancelamento(const Value: string);
begin
    FUsuarioCancelamento := Value;
end;

procedure TCreditoCliente.SetValor(const Value: double);
begin
    FValor := Value;
end;

procedure TCreditoCliente.SetValorDisponivel(const Value: Double);
begin
  FValorDisponivel := Value;
end;

procedure TCreditoCliente.SetValorNCC(const Value: Double);
begin
  FValorNCC := Value;
end;

procedure TCreditoCliente.SetValorReservado(const Value: Double);
begin
  FValorReservado := Value;
end;

{$ENDREGION}
{$REGION 'Métodos de Propriedades'}
{$ENDREGION}

end.
