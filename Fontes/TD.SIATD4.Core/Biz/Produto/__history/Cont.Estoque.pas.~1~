unit ClsEstoque;

interface

uses
    Classes, System.SysUtils, Dialogs, ClsBase, ClsParametro, ClsEnumeradores,
    ClsPersistable, ClsMaxLenght, ClsLista, ClsResultFilter;

type
    TEstoque = class(TBase)
  private
    FLocal: string;
    FFilial: string;
    FCodigoProduto: string;
    FRecno: integer;
    FSaldo: double;
    FDelete: string;
    procedure SetCodigoProduto(const Value: string);
    procedure SetDelete(const Value: string);
    procedure SetFilial(const Value: string);
    procedure SetLocal(const Value: string);
    procedure SetRecno(const Value: integer);
    procedure SetSaldo(const Value: double);
    public
        ///	<summary>
        ///	  Metodo que faz a inserção da Estoque
        ///	</summary>
        function Inserir: integer; override;
        ///	<summary>
        ///	  Metodo que faz a alteração da Estoque
        ///	</summary>
        function Alterar: integer; override;

        ///	<summary>
        ///	  Métido que faz a Deleção da Estoque
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave  primária da tabela
        ///	</param>
        function Deletar(ID:string): integer; override;

        ///	<summary>
        ///	  Método que chama a tela de filtro
        ///	</summary>
        ///	<param name="tipoOperacao">
        ///	  Tipo da operação, se é somente filtro, ou seleção de registro
        ///	</param>
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter; override;


        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave primária da tabela
        ///	</param>
        function Obter(ID: string): TObject; overload; override;

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Obter(parametros:TParametro): TObject; overload;


        ///	<summary>
        ///	  Método que retonar uma lista com varios objetos de acordo com parametro passado
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Consultar(parametros:TParametro): TList; override;


        ///	<summary>
        ///	  Método que preenche a instância do Objeto
        ///	</summary>
        ///	<param name="Estoque">
        ///	  objeto de parametro para preenchimento da instância
        ///	</param>
        procedure PreencherObjeto(Estoque: TEstoque);

        [TPersistable(fgPersistable, 'B2_FILIAL')]
        [TMaxLenght(2)]
        property Filial: string read FFilial write SetFilial;

        [TPersistable(fgPersistable, 'B2_COD')]
        [TMaxLenght(15)]
        property CodigoProduto: string read FCodigoProduto write SetCodigoProduto;

        [TPersistable(fgPersistable, 'B2_LOCAL')]
        [TMaxLenght(2)]
        property Local: string read FLocal write SetLocal;

        [TPersistable(fgPersistable, 'B2_QATU')]
        property Saldo: double read FSaldo write SetSaldo;

        [TPersistable(fgPersistable, 'D_E_L_E_T_')]
        [TMaxLenght(1)]
        property Delete: string read FDelete write SetDelete;

        [TPersistable(fgPersistable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

    end;

implementation


{ TEstoque }

uses ClsFilter, ClsFieldFilter, UntPrincipal, ClsLib;

{$REGION 'Métodos CRUD'}

function TEstoque.Inserir: integer;
begin
     //BaseLib.ExecutaTarefa('InserirEstoque', 'TEstoque', ObjectToParameters(acInsercao));
    //###Validar retorno da função
    //result := 0;
end;

function TEstoque.Alterar: integer;
begin
    //BaseLib.ExecutaTarefa('AlterarEstoque', 'TEstoque' , ObjectToParameters(acAlteracao));
    //###Validar retorno da função
    //result := 0;
end;

function TEstoque.Consultar(parametros: TParametro): Tlist;
begin
   Result := BaseLib.XmlToObject<TEstoque>(BaseLib.ExecutaTarefa('ConsultarEstoque', 'TEstoque', parametros)).Tolist;
end;

function TEstoque.Deletar(ID: string): integer;
var
    parametro: TParametro;
begin
//    try
//        parametro := TParametro.Create;
//        parametro.Add('', 'R_E_C_N_O_', ID);
//
//        BaseLib.ExecutaTarefa('DeletarEstoque', 'TEstoque', parametro);
//
//        //###Validar retorno da função
//        result := 0;
//    finally
//        parametro.Free;
//    end;
end;

function TEstoque.Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;
var
    campoFiltro:TFieldFilter;
    filtro : TFilter<TEstoque>;
    //parametro : TParametro;
    //lista:TLista<TEstoque>
begin
    try
        filtro := TFilter<TEstoque>.Create;
        filtro.ScreenName := 'Filtro de Estoque';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.Task := 'ConsultarEstoque';
        //###Criar os Índices do filtro

        {$REGION 'Campo Filtro'}

        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Filial'; 
        campoFiltro.Name := 'Filial'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 
        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'CodigoProduto'; 
        campoFiltro.Name := 'CodigoProduto'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 
        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Local'; 
        campoFiltro.Name := 'Local'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 
        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Saldo'; 
        campoFiltro.Name := 'Saldo'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 
        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Delete'; 
        campoFiltro.Name := 'Delete'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 
        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Recno'; 
        campoFiltro.Name := 'Recno'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 

        {$ENDREGION}

        result := filtro.Execute(filtro);
    finally
        // FreeAndNil(parametro);
        // FreeAndNil(lista.Destroy);
    end;
end;

function TEstoque.Obter(parametros: TParametro): TObject;
var
  lista: TLista<TEstoque>;
begin
    try
        lista := BaseLib.XmlToObject<TEstoque>(BaseLib.ExecutaTarefa('ConsultarEstoque', 'TEstoque', parametros));

        if lista.Count = 1 then
        begin
           PreencherObjeto(lista[0]);
           Result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            Result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

function TEstoque.Obter(ID: string): TObject;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;


{$ENDREGION}

{$REGION 'Regras de Negócio'}

procedure TEstoque.PreencherObjeto(Estoque: TEstoque);
begin
    Estoque.CopiarPara(Self);
    FPreenchido := true;
end;


procedure TEstoque.SetCodigoProduto(const Value: string);
begin
  FCodigoProduto := Value;
end;

procedure TEstoque.SetDelete(const Value: string);
begin
  FDelete := Value;
end;

procedure TEstoque.SetFilial(const Value: string);
begin
  FFilial := Value;
end;

procedure TEstoque.SetLocal(const Value: string);
begin
  FLocal := Value;
end;

procedure TEstoque.SetRecno(const Value: integer);
begin
  FRecno := Value;
end;

procedure TEstoque.SetSaldo(const Value: double);
begin
  FSaldo := Value;
end;

{$ENDREGION}

{$REGION 'Métodos de Propriedades'}


{$ENDREGION}

end.

