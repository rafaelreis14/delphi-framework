unit ClsProduto;

interface

uses Classes, System.SysUtils, ClsParametro, ClsCRUD, ClsEnumeradores, ClsBase,
    ClsFilial, ClsFieldFilter, ClsFilter, ClsPersistable, ClsLib,
  ClsResultFilter, ClsCursoSerguro;

type
    TTipoProduto = (tpNenhum  = 0, tpNormal = 1, tpSelfColor = 2, tpHidrometro = 3, tpCurso = 4, tpSeguro = 5);

    TProduto = class(TBase)
    private
        FDataFimPromocao: string;
        FDataInicioPromocao: string;
        FDescricao: string;
        FCodigo: string;
        FEstoqueProduto: Double;
        FPrecoTabelaProduto: Double;
        FTotalProduto: Double;
        FQuantidadeVendida: Double;
        FQtdMultiplaVenda: Double;
        FUnidadeMedidaTransp: string;
        FUnidadeMedidaEmbalagem: string;
        FCodigoBarraTransp: string;
        FCodigoBarraEmbalagem: string;
        FCodigoBarra2: string;
        FQtdPorEmbalagem: double;
        FCodigoBarra3: string;
        FCodigoBarra1: string;
        FQtdCaixaPorTransp: double;
        FPrecoPromocao: Double;
        FProdutoAtivo_: string;
        FProdutoHidrometro_: string;
        FProdutoSelfColor_: string;
        FPeso: double;
        FCustoGerencial: double;
        FPercentualImpostoDilma: double;
        FPodeEntregarDepositoLoja_: string;
        FTipoProduto_: integer;
        FCodigoCursoSeguro: string;
        FCursoSeguro: TCursoSerguro;
        procedure SetCodigo(const Value: string);
        procedure SetDataFimPromocao(const Value: string);
        procedure SetDataInicioPromocao(const Value: string);
        procedure SetDescricao(const Value: string);
        procedure SetEstoqueProduto(const Value: Double);
        procedure SetPrecoTabelaProduto(const Value: Double);
        procedure SetTotalProduto(const Value: Double);
        function GetTotalProduto: Double;
        procedure SetQuantidadeVendida(const Value: Double);
        procedure SetQtdMultiplaVenda(const Value: Double);
        procedure SetCodigoBarra1(const Value: string);
        procedure SetCodigoBarra2(const Value: string);
        procedure SetCodigoBarra3(const Value: string);
        procedure SetCodigoBarraEmbalagem(const Value: string);
        procedure SetCodigoBarraTransp(const Value: string);
        procedure SetQtdCaixaPorTransp(const Value: double);
        procedure SetQtdPorEmbalagem(const Value: double);
        procedure SetUnidadeMedidaEmbalagem(const Value: string);
        procedure SetUnidadeMedidaTransp(const Value: string);
        procedure SetPrecoPromocao(const Value: Double);
        function GetPrecoAtualProduto: Double;
        function GetProdutoEmPromocao: boolean;
        function GetProdutoAtivo: boolean;
        procedure SetProdutoAtivo_(const Value: string);
        function GetProdutoHidrometro: boolean;
        function GetProdutoSelfColor: boolean;
        procedure SetProdutoHidrometro_(const Value: string);
        procedure SetProdutoSelfColor_(const Value: string);
        procedure SetPeso(const Value: double);
        procedure SetCustoGerencial(const Value: double);
        procedure SetPercentualImpostoDilma(const Value: double);
        function GetPodeEntregarDepositoLoja: boolean;
        procedure SetPodeEntregarDepositoLoja_(const Value: string);
        procedure SetTipoProduto_(const Value: integer);
        procedure SetCodigoCursoSeguro(const Value: string);
        procedure SetCursoSeguro(const Value: TCursoSerguro);
        function GetTipoProduto: TTipoProduto;
    public
        ///	<summary>
        ///	  Metodo que faz a inserção da ClasseBase
        ///	</summary>
        function Inserir: integer; override;

        ///	<summary>
        ///	  Metodo que faz a alteração da ClasseBase
        ///	</summary>
        function Alterar: integer; override;

        ///	<summary>
        ///	  Métido que faz a Deleção da ClasseBase
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave  primária da tabela
        ///	</param>
        function Deletar(ID: string): integer; override;

        ///	<summary>
        ///	  Método que chama a tela de filtro
        ///	</summary>
        ///	<param name="tipoOperacao">
        ///	  Tipo da operação, se é somente filtro, ou seleção de registro
        ///	</param>
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter; overload; override;
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean; descricaoProduto: string): TResultFilter; overload;

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave primária da tabela
        ///	</param>
        function Obter(ID: string): TObject; overload; override;

         ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
//        function Obter(parametros: TParametro): TObject; overload;

        ///	<summary>
        ///	  Método que preenche a instância do Objeto
        ///	</summary>
        ///	<param name="ClasseBase">
        ///	  objeto de parametro para preenchimento da instância
        ///	</param>
        procedure PreencherObjeto(produto: TProduto);


        procedure PreencherProdutoBasico(produto: TProduto);
        procedure PreencherProdutoPreco(produto: TProduto);
        procedure PreencherProdutoEstoqueCusto(produto: Tproduto);

        ///	<summary>
        ///	  Retonar  quantidade multipla de venda dependendo do codigo de
        ///	  identificação
        ///	</summary>
        ///	<param name="codigoIdentificacao">
        ///	  codigo produto, codigo de barra, codigo palet, codigo caixa
        ///	</param>
        function ObterQuantidadeMultipla(codigoIdentificacao: string): double;


        ///	<summary>
        ///	  Faz uma checagem em todos os código de referencia e retorna se é
        ///	  do produto ou não
        ///	</summary>
        function ChecarCodigoProduto(codigoIdentificacao: string): boolean;

        ///	<summary>
        ///	  Verifica se o valor digitado é compativel com o multiplo do
        ///	  produto 
        ///	</summary>
        ///	<param name="qtdDigitada">
        ///	  quantidade passada pelo usuário
        ///	</param>
        ///	<param name="mensagem">
        ///	  se deseja exibir a mensagem
        ///	</param>
        function ValidarQuantidadeMultipla(qtdDigitada: double; mensagem: boolean = true): boolean;

        ///	<summary>
        ///	  Valida se a descrição tem caracteres inválidos
        ///	</summary>
        function ValidarCaracteresInvalidosDescricao: boolean;


        procedure CopiarPara(objeto: TObject); override;

        [TPersistable(fgPersistable, 'B1_COD')]
        property Codigo: string read FCodigo write SetCodigo;

        [TPersistable(fgPersistable, 'B1_DESC')]
        property Descricao: string read FDescricao write SetDescricao;

        [TPersistable(fgReadOnly, 'B0_DTAINIC')]
        property DataInicioPromocao: string read FDataInicioPromocao write SetDataInicioPromocao;

        [TPersistable(fgReadOnly, 'B0_DTAFIM')]
        property DataFimPromocao: string read FDataFimPromocao write SetDataFimPromocao;

        property ProdutoEmPromocao: boolean read GetProdutoEmPromocao;

        [TPersistable(fgReadOnly, 'B0_PRV1')]
        property PrecoTabelaProduto: Double read FPrecoTabelaProduto write SetPrecoTabelaProduto;

        [TPersistable(fgReadOnly, 'B0_PRV2')]
        property PrecoPromocao: Double read FPrecoPromocao write SetPrecoPromocao;

        property PrecoAtualProduto: Double read GetPrecoAtualProduto;

        [TPersistable(fgReadOnly, 'ESTOQUE')]
        property EstoqueProduto: Double read FEstoqueProduto write SetEstoqueProduto;

        [TPersistable(fgPersistable, 'B1_QTMULTV')]
        property QtdMultiplaVenda: Double read FQtdMultiplaVenda write SetQtdMultiplaVenda;

        [TPersistable(fgPersistable, 'B1_CODBAR')]
        property CodigoBarra1: string read FCodigoBarra1 write SetCodigoBarra1;

        [TPersistable(fgPersistable, 'B1_CODBARR')]
        property CodigoBarra2: string read FCodigoBarra2 write SetCodigoBarra2;

        [TPersistable(fgPersistable, 'B1_CODBAR1')]
        property CodigoBarra3: string read FCodigoBarra3 write SetCodigoBarra3;

        [TPersistable(fgPersistable, 'B1_UMTRANS')]
        property UnidadeMedidaTransp: string read FUnidadeMedidaTransp write SetUnidadeMedidaTransp;

        [TPersistable(fgPersistable, 'B1_QTTRANS')]
        property QtdCaixaPorTransp: double read FQtdCaixaPorTransp write SetQtdCaixaPorTransp;

        [TPersistable(fgPersistable, 'B1_CBTRANS')]
        property CodigoBarraTransp: string read FCodigoBarraTransp write SetCodigoBarraTransp;

        [TPersistable(fgPersistable, 'B1_SEGUM')]
        property UnidadeMedidaEmbalagem: string read FUnidadeMedidaEmbalagem write SetUnidadeMedidaEmbalagem;

        [TPersistable(fgPersistable, 'B1_CONV')]
        property QtdPorEmbalagem: double read FQtdPorEmbalagem write SetQtdPorEmbalagem;

        [TPersistable(fgPersistable, 'B1_CBEMB')]
        property CodigoBarraEmbalagem: string read FCodigoBarraEmbalagem write SetCodigoBarraEmbalagem;

        [TPersistable(fgPersistable, 'B1_ATVDA')]
        property ProdutoAtivo_: string read FProdutoAtivo_ write SetProdutoAtivo_;
        property ProdutoAtivo: boolean read GetProdutoAtivo;

        [TPersistable(fgPersistable, 'B1_TDHIDRO')]
        property ProdutoHidrometro_: string read FProdutoHidrometro_ write SetProdutoHidrometro_;
        property ProdutoHidrometro: boolean read GetProdutoHidrometro;

        [TPersistable(fgPersistable, 'B1_TDSELF1')]
        property ProdutoSelfColor_: string read FProdutoSelfColor_ write SetProdutoSelfColor_;
        property ProdutoSelfColor: boolean read GetProdutoSelfColor;

        [TPersistable(fgPersistable, 'B1_PESO')]
        property Peso: double read FPeso write SetPeso;

        [TPersistable(fgReadOnly, 'B2_CGER')]
        property CustoGerencial: double read FCustoGerencial write SetCustoGerencial;

        [TPersistable(fgPersistable, 'B1_IMPNCM')]
        property PercentualImpostoDilma: double read FPercentualImpostoDilma write SetPercentualImpostoDilma;

        [TPersistable(fgPersistable, 'B1_TDDL')]
        property PodeEntregarDepositoLoja_: string read FPodeEntregarDepositoLoja_ write SetPodeEntregarDepositoLoja_;
        property PodeEntregarDepositoLoja: boolean read GetPodeEntregarDepositoLoja;

        [TPersistable(fgPersistable, 'B1_TDTIPO')]
        property TipoProduto_: integer read FTipoProduto_ write SetTipoProduto_;
        property TipoProduto: TTipoProduto read GetTipoProduto;

        [TPersistable(fgPersistable, 'B1_TDCOD')]
        property CodigoCursoSeguro: string read FCodigoCursoSeguro write SetCodigoCursoSeguro;
        property CursoSeguro: TCursoSerguro read FCursoSeguro write SetCursoSeguro;

        constructor Create;
        destructor destroy; override;
end;

implementation

    uses ClsLista, UntPrincipal, Vcl.Dialogs;

{ TProduto }

function TProduto.Alterar: integer;
begin

end;

function TProduto.ChecarCodigoProduto(codigoIdentificacao: string): boolean;
begin
    if (codigoIdentificacao = self.Codigo) or
       (codigoIdentificacao = self.CodigoBarra1) or
       (codigoIdentificacao = self.CodigoBarra2) or
       (codigoIdentificacao = self.CodigoBarra3) or
       (codigoIdentificacao = Self.CodigoBarraEmbalagem) or
       (codigoIdentificacao = self.CodigoBarraTransp) then
        result := true
    else
        result := false;
end;

procedure TProduto.CopiarPara(objeto: TObject);
begin
  inherited;
  if Self.CursoSeguro.Preenchido then
      Self.CursoSeguro.CopiarPara(TProduto(objeto).CursoSeguro);
end;

constructor TProduto.Create;
begin
    FCursoSeguro := TCursoSerguro.Create;
end;

function TProduto.Deletar(ID: string): integer;
begin

end;

destructor TProduto.destroy;
begin
    if FCursoSeguro <> nil then
        FreeAndNil(FCursoSeguro);
end;

function TProduto.GetPodeEntregarDepositoLoja: boolean;
begin
    if PodeEntregarDepositoLoja_ = 'S' then
      result := true
   else
      result := false;
end;

function TProduto.GetPrecoAtualProduto: Double;
begin
    if (ProdutoEmPromocao) and
       (PrecoPromocao < PrecoTabelaProduto) then
       result := PrecoPromocao
    else
       result := PrecoTabelaProduto;
end;

function TProduto.GetProdutoAtivo: boolean;
begin
   if FProdutoAtivo_ <> 'N' then
      result := true
   else
      result := false;
end;

function TProduto.GetProdutoEmPromocao: boolean;
begin
    if (DataFimPromocao >= tlib.ObterDataAtual) and
       (DataInicioPromocao <= tlib.ObterDataAtual) then
        result := true
    else
        result := false;

end;

function TProduto.GetProdutoHidrometro: boolean;
begin
   if ProdutoHidrometro_ = 'S' then
      result := true
   else
      result := false;
end;

function TProduto.GetProdutoSelfColor: boolean;
begin
    if ProdutoSelfColor_ = 'S' then
      result := true
   else
      result := false;

end;

function TProduto.GetTipoProduto: TTipoProduto;
begin
    result := TTipoProduto(ftipoProduto_)
end;

function TProduto.GetTotalProduto: Double;
begin
    FTotalProduto := Tlib.IfTernario(FQuantidadeVendida = 0, 1, FQuantidadeVendida) * PrecoAtualProduto;
end;

function TProduto.Inserir: integer;
begin

end;

function TProduto.Listar(tipoOperacao: TOparationTypes; multselect: Boolean;
  descricaoProduto: string): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TProduto>;
    parametro: TParametro;
begin
    inherited;
    try
        parametro := nil;
        filtro := TFilter<TProduto>.Create;
        filtro.ScreenName := 'Filtro de Produtos';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'Descricao=DESC', 'Nome');
        filtro.AddIndex(2, 'Codigo=CODBAR', 'Código de Barra');
        filtro.AddIndex(3, 'Codigo=CODIGO', 'Código');
        filtro.Task := 'ConsultarProdutoVenda';

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Codigo';
        campoFiltro.Name := 'Codigo';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 55;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Descrição';
        campoFiltro.Name := 'Descricao';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 340;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Preço';
        campoFiltro.Name := 'PrecoAtualProduto';
        campoFiltro.MaskTypes := mtDouble;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 80;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Estoque';
        campoFiltro.Name := 'EstoqueProduto';
        campoFiltro.MaskTypes := mtDouble;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 80;
        filtro.AddField(campoFiltro);

        if descricaoProduto <> EmptyStr then
        begin
            parametro := TParametro.Create;
            parametro.Add('','DESC',descricaoProduto);
            parametro.Add('','Descricao',descricaoProduto);
            filtro.Parametro := parametro;
            filtro.FilterType := ftAlredyFilteredWithParametersChangingValues;
        end;

        result := filtro.Execute;
    finally
        if parametro <> nil then
            freeandnil(parametro);
    end;
end;

function TProduto.Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;
begin
    result := Listar(tipoOperacao, multselect, emptyStr);
end;

function TProduto.Obter(ID: string): TObject;
var
    parametro: TParametro;
    lista: TList;
    list: TLista<TProduto>;
    xml: widestring;
    resultFilter: TResultFilter;
begin
    try
        parametro := nil;
        lista := nil;
        resultFilter := nil;
        list := nil;

        if StrToInt64Def(id,-1) <>  -1 then
        begin
            parametro := TParametro.Create;
            parametro.Add('', 'DESC', 'NULL');
            if Length(id) = 6 then
                parametro.Add('', 'CODIGO', ID)
            else
            begin
                parametro.Add('', 'CODIGO', 'NULL');
                parametro.Add('', 'CODBAR', ID);
            end;
            xml := BaseLib.ExecutaTarefa('ConsultarProdutoVenda', '', parametro, '', Self.ClienteSocket);
            list := BaseLib.XmlToObject<TProduto>(xml);
            lista := list.toList;

//            xml := BaseLib.ExecutaTarefa('ConsultarProduto', '', parametro, '', Self.ClienteSocket);
//            list := BaseLib.XmlToObject<TProduto>(xml);

            if list.Count = 1 then
            begin
                PreencherObjeto(lista[0]);
//                PreencherProdutoBasico(list[0]);
                Result := self;
            end else
            begin
                TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
                result := nil;
                exit;
            end;

//            if parametro.ObterValorParamentro('CODIGO') = 'NULL' then
//                parametro.ObterItemParamentroPorNome('CODIGO').Valor := Self.Codigo;
//
//            xml := BaseLib.ExecutaTarefa('ConsultarPrecoProduto', '', parametro, '', Self.ClienteSocket);
//            list := BaseLib.XmlToObject<TProduto>(xml);
//            PreencherProdutoPreco(list[0]);
//
//            xml := BaseLib.ExecutaTarefa('ConsultarEstoqueCusto', '', parametro, '', Self.ClienteSocket);
//            list := BaseLib.XmlToObject<TProduto>(xml);
//            PreencherProdutoEstoqueCusto(list[0]);
//
//            FPreenchido := true;
        end
        else
        begin
            if Length(trim(StringReplace(ID, '%', '', [rfReplaceAll]))) <= 3 then
                raise Exception.Create('Descrição do produto precisa conter mais que 3 (três) caracteres');

            resultFilter := Self.Listar(otSelect, False, ID);
            lista := resultFilter.list;

            if lista.Count = 1 then
            begin
                PreencherObjeto(lista[0]);
                Result := self;
            end else
            begin
                TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
                result := nil;

            end;
        end;

    finally
        if parametro <> nil then
            FreeAndNil(parametro);

        if resultFilter <> nil then
            FreeAndnil(resultFilter);

        if list <> nil then
            FreeAndNil(list);

    end;
end;

function TProduto.ObterQuantidadeMultipla(codigoIdentificacao: string): double;
begin
    if (codigoIdentificacao = self.Codigo) or
       (codigoIdentificacao = self.CodigoBarra1) or
       (codigoIdentificacao = self.CodigoBarra2) or
       (codigoIdentificacao = self.CodigoBarra3) then
        result := Self.QtdMultiplaVenda
    else
    if codigoIdentificacao = CodigoBarraEmbalagem then
        result := QtdPorEmbalagem
    else
    if codigoIdentificacao = self.CodigoBarraTransp then
        result := QtdCaixaPorTransp * QtdPorEmbalagem
    else
        result := 0;
end;

function TProduto.ValidarCaracteresInvalidosDescricao: boolean;
begin
    result := Tlib.ValidarCaracteresInvalidos(Self.Descricao);
end;

function TProduto.ValidarQuantidadeMultipla(qtdDigitada: double; mensagem: boolean): boolean;
var
    resto: string;
    quant: string;
    sugest1: string;
    sugest2: string;
begin
    result := true;
    resto :=  FormatFloat('########0.00', qtdDigitada/QtdMultiplaVenda);
    quant := Tlib.ObterPorParametro(Resto, '1', ',');
    quant := FormatFloat('###,###,##0.00', (StrToFloat(Tlib.GravaNumeros(quant, ',')) * QtdMultiplaVenda));
    resto := FormatFloat('###,###,##0.00', qtdDigitada);
    sugest1 := quant;
    sugest2 := FormatFloat('###,###,##0.00', (StrToFloat(Tlib.GravaNumeros(quant, ',')) + QtdMultiplaVenda));
    if quant <> resto then
    begin
       if mensagem then
           Tlib.MensagemAdvertencia('A Quantidade do Produto..:  ' + Self.Descricao + #13 +
                                    'Esta fora da Embalagem.... Altere a quantidade deste Produto.'#13 +
                                'Para:      ' + sugest1 + '     ou       ' + sugest2, 'Aviso');
       result := false;
    end;
end;



procedure TProduto.PreencherObjeto(produto: TProduto);
begin
    produto.CopiarPara(Self);
    FPreenchido := true;
end;

procedure TProduto.PreencherProdutoBasico(produto: TProduto);
begin
    Self.Codigo:= produto.Codigo;
    Self.Descricao:= produto.Descricao;
    Self.QtdMultiplaVenda:= produto.QtdMultiplaVenda;
    Self.CodigoBarra1:= produto.CodigoBarra1;
    Self.CodigoBarra2:= produto.CodigoBarra2;
    Self.CodigoBarra3:= produto.CodigoBarra3;
    Self.UnidadeMedidaTransp:= produto.UnidadeMedidaTransp;
    Self.QtdCaixaPorTransp:=produto.QtdCaixaPorTransp;
    Self.CodigoBarraTransp:= produto.CodigoBarraTransp;
    Self.UnidadeMedidaEmbalagem:= produto.UnidadeMedidaEmbalagem;
    Self.QtdPorEmbalagem:= produto.QtdPorEmbalagem;
    Self.CodigoBarraEmbalagem:= produto.CodigoBarraEmbalagem;
    Self.ProdutoAtivo_:= produto.ProdutoAtivo_;
    Self.ProdutoHidrometro_:= produto.ProdutoHidrometro_;
    Self.ProdutoSelfColor_:= produto.ProdutoSelfColor_;
    Self.Peso:= produto.Peso;
    Self.PercentualImpostoDilma:= produto.PercentualImpostoDilma;
    Self.PodeEntregarDepositoLoja_:= produto.PodeEntregarDepositoLoja_;
    Self.TipoProduto_:= produto.TipoProduto_;
    Self.CodigoCursoSeguro:= produto.CodigoCursoSeguro;
end;

procedure TProduto.PreencherProdutoEstoqueCusto(produto: Tproduto);
begin
    Self.EstoqueProduto := produto.EstoqueProduto;
    Self.CustoGerencial := produto.CustoGerencial;
end;

procedure TProduto.PreencherProdutoPreco(produto: TProduto);
begin
    Self.DataInicioPromocao := produto.DataInicioPromocao;
    Self.DataFimPromocao := produto.DataFimPromocao;
    Self.PrecoTabelaProduto := produto.PrecoTabelaProduto;
    Self.PrecoPromocao := produto.PrecoPromocao;
end;



procedure TProduto.SetCodigo(const Value: string);
begin
  FCodigo := Value;
end;

procedure TProduto.SetCodigoBarra1(const Value: string);
begin
  FCodigoBarra1 := Value;
end;

procedure TProduto.SetCodigoBarra2(const Value: string);
begin
  FCodigoBarra2 := Value;
end;

procedure TProduto.SetCodigoBarra3(const Value: string);
begin
  FCodigoBarra3 := Value;
end;

procedure TProduto.SetCodigoBarraEmbalagem(const Value: string);
begin
  FCodigoBarraEmbalagem := Value;
end;

procedure TProduto.SetCodigoBarraTransp(const Value: string);
begin
  FCodigoBarraTransp := Value;
end;

procedure TProduto.SetCodigoCursoSeguro(const Value: string);
begin
  FCodigoCursoSeguro := Value;
end;

procedure TProduto.SetCursoSeguro(const Value: TCursoSerguro);
begin
  FCursoSeguro := Value;
end;

procedure TProduto.SetCustoGerencial(const Value: double);
begin
  FCustoGerencial := Value;
end;

procedure TProduto.SetDataFimPromocao(const Value: string);
begin
  FDataFimPromocao := Value;
end;

procedure TProduto.SetDataInicioPromocao(const Value: string);
begin
  FDataInicioPromocao := Value;
end;

procedure TProduto.SetDescricao(const Value: string);
begin
  FDescricao := Value;
end;

procedure TProduto.SetEstoqueProduto(const Value: Double);
begin
  FEstoqueProduto := Value;
end;


procedure TProduto.SetPercentualImpostoDilma(const Value: double);
begin
  FPercentualImpostoDilma := Value;
end;

procedure TProduto.SetPeso(const Value: double);
begin
  FPeso := Value;
end;

procedure TProduto.SetPodeEntregarDepositoLoja_(const Value: string);
begin
  FPodeEntregarDepositoLoja_ := Value;
end;

procedure TProduto.SetPrecoPromocao(const Value: Double);
begin
  FPrecoPromocao := Value;
end;

procedure TProduto.SetPrecoTabelaProduto(const Value: Double);
begin
  FPrecoTabelaProduto := Value;
end;

procedure TProduto.SetProdutoAtivo_(const Value: string);
begin
  FProdutoAtivo_ := Value;
end;

procedure TProduto.SetProdutoHidrometro_(const Value: string);
begin
  FProdutoHidrometro_ := Value;
end;

procedure TProduto.SetProdutoSelfColor_(const Value: string);
begin
  FProdutoSelfColor_ := Value;
end;

procedure TProduto.SetQtdCaixaPorTransp(const Value: double);
begin
  FQtdCaixaPorTransp := Value;
end;

procedure TProduto.SetQtdMultiplaVenda(const Value: Double);
begin
  FQtdMultiplaVenda := Value;
end;

procedure TProduto.SetQtdPorEmbalagem(const Value: double);
begin
  FQtdPorEmbalagem := Value;
end;

procedure TProduto.SetQuantidadeVendida(const Value: Double);
begin
  FQuantidadeVendida := Value;
end;


procedure TProduto.SetTipoProduto_(const Value: integer);
begin
  FTipoProduto_ := Value;
end;

procedure TProduto.SetTotalProduto(const Value: Double);
begin
    FTotalProduto := Value;
end;

procedure TProduto.SetUnidadeMedidaEmbalagem(const Value: string);
begin
  FUnidadeMedidaEmbalagem := Value;
end;

procedure TProduto.SetUnidadeMedidaTransp(const Value: string);
begin
  FUnidadeMedidaTransp := Value;
end;

end.
