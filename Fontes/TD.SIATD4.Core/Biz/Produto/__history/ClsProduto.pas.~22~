unit ClsProduto;

interface

uses Classes, System.SysUtils, ClsParametro, ClsCRUD, ClsEnumeradores, ClsBase,
    ClsFilial, ClsFieldFilter, ClsFilter, ClsPersistable, ClsLib,
    ClsResultFilter, ClsCursoSerguro, ClsLista, ClsEstoque, ClsTipoEntrega,
  Vcl.Forms;

type
    TTipoProduto = (tpNenhum = 0, tpNormal = 1, tpSelfColor = 2, tpHidrometro = 3, tpCurso = 4, tpSeguro = 5);
    TTipoAbastecimento = (taNenhum = 0, taAbastecimentoCD = 1, taCrossDock = 2, taCrossDockLibVendasCD = 3);

    TProduto = class(TBase)
    private
        FDataFimPromocao: string;
        FDataInicioPromocao: string;
        FDescricao: string;
        FCodigo: string;
        FEstoqueProduto: Double;
        FPrecoTabelaProduto: Double;
        FTotalProduto: Double;
        FQuantidadeVendida: Double;
        FQtdMultiplaVenda: Double;
        FUnidadeMedidaTransp: string;
        FUnidadeMedidaEmbalagem: string;
        FCodigoBarraTransp: string;
        FCodigoBarraEmbalagem: string;
        FCodigoBarra2: string;
        FQtdPorEmbalagem: Double;
        FCodigoBarra3: string;
        FCodigoBarra1: string;
        FQtdCaixaPorTransp: Double;
        FPrecoPromocao: Double;
        FProdutoAtivo_: string;
        FProdutoHidrometro_: string;
        FProdutoSelfColor_: string;
        FPeso: Double;
        FCustoGerencial: Double;
        FPercentualImpostoDilma: Double;
        FPodeEntregarDepositoLoja_: string;
        FTipoProduto_: integer;
        FCodigoCursoSeguro: string;
        FCursoSeguro: TCursoSerguro;
        FTipoAbastecimento_: integer;
        FProdutoEcommerce_: string;
        FProdutoSobEncomenda_: string;
        FProdutoLiberadoConferenciaFiscal_: string;
        FProdutoForaLinha_: string;
        FProdutoEmCampanha_: string;
        FEstoqueFiliais: TLista<TEstoque>;
    FFamilia: string;
    FFabricante: string;
    FSubGrupo: string;
    FTipologia: string;
    FGrupo: string;
        procedure SetCodigo(const Value: string);
        procedure SetDataFimPromocao(const Value: string);
        procedure SetDataInicioPromocao(const Value: string);
        procedure SetDescricao(const Value: string);
        procedure SetEstoqueProduto(const Value: Double);
        procedure SetPrecoTabelaProduto(const Value: Double);
        procedure SetTotalProduto(const Value: Double);
        function GetTotalProduto: Double;
        procedure SetQuantidadeVendida(const Value: Double);
        procedure SetQtdMultiplaVenda(const Value: Double);
        procedure SetCodigoBarra1(const Value: string);
        procedure SetCodigoBarra2(const Value: string);
        procedure SetCodigoBarra3(const Value: string);
        procedure SetCodigoBarraEmbalagem(const Value: string);
        procedure SetCodigoBarraTransp(const Value: string);
        procedure SetQtdCaixaPorTransp(const Value: Double);
        procedure SetQtdPorEmbalagem(const Value: Double);
        procedure SetUnidadeMedidaEmbalagem(const Value: string);
        procedure SetUnidadeMedidaTransp(const Value: string);
        procedure SetPrecoPromocao(const Value: Double);
        function GetPrecoAtualProduto: Double;
        function GetProdutoEmPromocao: boolean;
        function GetProdutoAtivo: boolean;
        procedure SetProdutoAtivo_(const Value: string);
        function GetProdutoHidrometro: boolean;
        function GetProdutoSelfColor: boolean;
        procedure SetProdutoHidrometro_(const Value: string);
        procedure SetProdutoSelfColor_(const Value: string);
        procedure SetPeso(const Value: Double);
        procedure SetCustoGerencial(const Value: Double);
        procedure SetPercentualImpostoDilma(const Value: Double);
        function GetPodeEntregarDepositoLoja: boolean;
        procedure SetPodeEntregarDepositoLoja_(const Value: string);
        procedure SetTipoProduto_(const Value: integer);
        procedure SetCodigoCursoSeguro(const Value: string);
        procedure SetCursoSeguro(const Value: TCursoSerguro);
        function GetTipoProduto: TTipoProduto;
        function GetTipoAbastecimento: TTipoAbastecimento;
        function GetProdutoEcommerce: boolean;
        procedure SetProdutoEcommerce_(const Value: string);
        procedure SetTipoAbastecimento_(const Value: integer);
        function GetProdutoSobEncomenda: boolean;
        procedure SetProdutoSobEncomenda_(const Value: string);
        function GetProdutoLiberadoConferenciaFiscal: boolean;
        procedure SetProdutoLiberadoConferenciaFiscal_(const Value: string);
        function GetProdutoForaLinha: boolean;
        procedure SetProdutoForaLinha_(const Value: string);
        function GetProdutoEmCampanha: boolean;
        procedure SetProdutoEmCampanha_(const Value: string);

        function ObterAlternativos(tipoAlternativo: TTipoAlternativo; descricao: string): TLista<TProduto>;
        function ObterQuantidadeAlternativo(tipoAlternativo: TTipoAlternativo): integer;
        procedure SetEstoqueFiliais(const Value: TLista<TEstoque>);
        procedure SetFabricante(const Value: string);
        procedure SetFamilia(const Value: string);
        procedure SetGrupo(const Value: string);
        procedure SetSubGrupo(const Value: string);
        procedure SetTipologia(const Value: string);

    public
        /// <summary>
        /// Metodo que faz a inserção da ClasseBase
        /// </summary>
        function Inserir: integer; override;

        /// <summary>
        /// Metodo que faz a alteração da ClasseBase
        /// </summary>
        function Alterar: integer; override;

        /// <summary>
        /// Métido que faz a Deleção da ClasseBase
        /// </summary>
        /// <param name="ID">
        /// Chave  primária da tabela
        /// </param>
        function Deletar(ID: string): integer; override;

        /// <summary>
        /// Método que chama a tela de filtro
        /// </summary>
        /// <param name="tipoOperacao">
        /// Tipo da operação, se é somente filtro, ou seleção de registro
        /// </param>
        function Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter; overload; override;
        function Listar(tipoOperacao: TOparationTypes; multselect: boolean; descricaoProduto: string): TResultFilter; overload;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="ID">
        /// Chave primária da tabela
        /// </param>
        function Obter(ID: string): TObject; overload; override;
        function ObterCrossSelling: TLista<TProduto>;
        function ObterUpSelling: TLista<TProduto>;
        function ObterSimilares: TLista<TProduto>;
        function ObterQuantidadeCrossSelling: integer;
        function ObterQuantidadeUpSelling: integer;
        function ObterQuantidadeSimilar: integer;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        // function Obter(parametros: TParametro): TObject; overload;

        /// <summary>
        /// Método que preenche a instância do Objeto
        /// </summary>
        /// <param name="ClasseBase">
        /// objeto de parametro para preenchimento da instância
        /// </param>
        procedure PreencherObjeto(produto: TProduto);

        procedure PreencherProdutoBasico(produto: TProduto);
        procedure PreencherProdutoPreco(produto: TProduto);
        procedure PreencherProdutoEstoqueCusto(produto: TProduto);

        /// <summary>
        /// Retonar  quantidade multipla de venda dependendo do codigo de
        /// identificação
        /// </summary>
        /// <param name="codigoIdentificacao">
        /// codigo produto, codigo de barra, codigo palet, codigo caixa
        /// </param>
        function ObterQuantidadeMultipla(codigoIdentificacao: string): Double;

        /// <summary>
        /// Faz uma checagem em todos os código de referencia e retorna se é
        /// do produto ou não
        /// </summary>
        function ChecarCodigoProduto(codigoIdentificacao: string): boolean;

        /// <summary>
        /// Verifica se o valor digitado é compativel com o multiplo do
        /// produto
        /// </summary>
        /// <param name="qtdDigitada">
        /// quantidade passada pelo usuário
        /// </param>
        /// <param name="mensagem">
        /// se deseja exibir a mensagem
        /// </param>
        function ValidarQuantidadeMultipla(qtdDigitada: Double; mensagem: boolean = true): boolean;

        /// <summary>
        /// Valida se a descrição tem caracteres inválidos
        /// </summary>
        function ValidarCaracteresInvalidosDescricao: boolean;

        procedure ObterEstoqueFiliais(tiposDeEntrega: TLista<TTipoEntrega>);
        procedure MostrarEstoqueFiliais;

        procedure AtualizarEstoqueCusto(filial:string);

        procedure CopiarPara(objeto: TObject); override;

        [TPersistable(fgPersistable, 'B1_COD')]
        property Codigo: string read FCodigo write SetCodigo;

        [TPersistable(fgPersistable, 'B1_DESC')]
        property descricao: string read FDescricao write SetDescricao;

        [TPersistable(fgReadOnly, 'B0_DTAINIC')]
        property DataInicioPromocao: string read FDataInicioPromocao write SetDataInicioPromocao;

        [TPersistable(fgReadOnly, 'B0_DTAFIM')]
        property DataFimPromocao: string read FDataFimPromocao write SetDataFimPromocao;

        property ProdutoEmPromocao: boolean read GetProdutoEmPromocao;

        [TPersistable(fgReadOnly, 'B0_PRV1')]
        property PrecoTabelaProduto: Double read FPrecoTabelaProduto write SetPrecoTabelaProduto;

        [TPersistable(fgReadOnly, 'B0_PRV2')]
        property PrecoPromocao: Double read FPrecoPromocao write SetPrecoPromocao;

        property PrecoAtualProduto: Double read GetPrecoAtualProduto;

        [TPersistable(fgReadOnly, 'ESTOQUE')]
        property EstoqueProduto: Double read FEstoqueProduto write SetEstoqueProduto;

        [TPersistable(fgPersistable, 'B1_QTMULTV')]
        property QtdMultiplaVenda: Double read FQtdMultiplaVenda write SetQtdMultiplaVenda;

        [TPersistable(fgPersistable, 'B1_CODBAR')]
        property CodigoBarra1: string read FCodigoBarra1 write SetCodigoBarra1;

        [TPersistable(fgPersistable, 'B1_CODBARR')]
        property CodigoBarra2: string read FCodigoBarra2 write SetCodigoBarra2;

        [TPersistable(fgPersistable, 'B1_CODBAR1')]
        property CodigoBarra3: string read FCodigoBarra3 write SetCodigoBarra3;

        [TPersistable(fgPersistable, 'B1_UMTRANS')]
        property UnidadeMedidaTransp: string read FUnidadeMedidaTransp write SetUnidadeMedidaTransp;

        [TPersistable(fgPersistable, 'B1_QTTRANS')]
        property QtdCaixaPorTransp: Double read FQtdCaixaPorTransp write SetQtdCaixaPorTransp;

        [TPersistable(fgPersistable, 'B1_CBTRANS')]
        property CodigoBarraTransp: string read FCodigoBarraTransp write SetCodigoBarraTransp;

        [TPersistable(fgPersistable, 'B1_SEGUM')]
        property UnidadeMedidaEmbalagem: string read FUnidadeMedidaEmbalagem write SetUnidadeMedidaEmbalagem;

        [TPersistable(fgPersistable, 'B1_CONV')]
        property QtdPorEmbalagem: Double read FQtdPorEmbalagem write SetQtdPorEmbalagem;

        [TPersistable(fgPersistable, 'B1_CBEMB')]
        property CodigoBarraEmbalagem: string read FCodigoBarraEmbalagem write SetCodigoBarraEmbalagem;

        [TPersistable(fgPersistable, 'B1_ATVDA')]
        property ProdutoAtivo_: string read FProdutoAtivo_ write SetProdutoAtivo_;
        property ProdutoAtivo: boolean read GetProdutoAtivo;

        [TPersistable(fgPersistable, 'B1_TDHIDRO')]
        property ProdutoHidrometro_: string read FProdutoHidrometro_ write SetProdutoHidrometro_;
        property ProdutoHidrometro: boolean read GetProdutoHidrometro;

        [TPersistable(fgPersistable, 'B1_TDSELF1')]
        property ProdutoSelfColor_: string read FProdutoSelfColor_ write SetProdutoSelfColor_;
        property ProdutoSelfColor: boolean read GetProdutoSelfColor;

        [TPersistable(fgPersistable, 'B1_PESO')]
        property Peso: Double read FPeso write SetPeso;

        [TPersistable(fgReadOnly, 'B2_CGER')]
        property CustoGerencial: Double read FCustoGerencial write SetCustoGerencial;

        [TPersistable(fgPersistable, 'B1_IMPNCM')]
        property PercentualImpostoDilma: Double read FPercentualImpostoDilma write SetPercentualImpostoDilma;

        [TPersistable(fgPersistable, 'B1_TDDL')]
        property PodeEntregarDepositoLoja_: string read FPodeEntregarDepositoLoja_ write SetPodeEntregarDepositoLoja_;
        property PodeEntregarDepositoLoja: boolean read GetPodeEntregarDepositoLoja;

        [TPersistable(fgPersistable, 'B1_TDLE')]
        property ProdutoSobEncomenda_: string read FProdutoSobEncomenda_ write SetProdutoSobEncomenda_;
        property ProdutoSobEncomenda: boolean read GetProdutoSobEncomenda;

        [TPersistable(fgPersistable, 'B1_TDTIPO')]
        property TipoProduto_: integer read FTipoProduto_ write SetTipoProduto_;
        property TipoProduto: TTipoProduto read GetTipoProduto;

        [TPersistable(fgPersistable, 'B1_TDCOD')]
        property CodigoCursoSeguro: string read FCodigoCursoSeguro write SetCodigoCursoSeguro;
        property CursoSeguro: TCursoSerguro read FCursoSeguro write SetCursoSeguro;

        [TPersistable(fgPersistable, 'B1_ABASTEC')]
        property TipoAbastecimento_: integer read FTipoAbastecimento_ write SetTipoAbastecimento_;
        property TipoAbastecimento: TTipoAbastecimento read GetTipoAbastecimento;

        [TPersistable(fgPersistable, 'B1_PRODETD')]
        property ProdutoEcommerce_: string read FProdutoEcommerce_ write SetProdutoEcommerce_;
        property ProdutoEcommerce: boolean read GetProdutoEcommerce;

        [TPersistable(fgPersistable, 'B1_TDLIBPE')]
        property ProdutoLiberadoConferenciaFiscal_: string read FProdutoLiberadoConferenciaFiscal_ write SetProdutoLiberadoConferenciaFiscal_;
        property ProdutoLiberadoConferenciaFiscal: boolean read GetProdutoLiberadoConferenciaFiscal;

        [TPersistable(fgPersistable, 'B1_TDLIN')]
        property ProdutoForaLinha_: string read FProdutoForaLinha_ write SetProdutoForaLinha_;
        property ProdutoForaLinha: boolean read GetProdutoForaLinha;

        [TPersistable(fgPersistable, 'B1_STATUS')]
        property ProdutoEmCampanha_: string read FProdutoEmCampanha_ write SetProdutoEmCampanha_;
        property ProdutoEmCampanha: boolean read GetProdutoEmCampanha;

        [TPersistable(fgPersistable, 'B1_FAMIL')]
        property Familia: string read FFamilia write SetFamilia;

        [TPersistable(fgPersistable, 'B1_GRPO')]
        property  Grupo: string read FGrupo write SetGrupo;

        [TPersistable(fgPersistable, 'B1_SGRUPO')]
        property SubGrupo: string read FSubGrupo write SetSubGrupo;

        [TPersistable(fgPersistable, 'B1_TIPOLOG')]
        property Tipologia: string read FTipologia write SetTipologia;

        [TPersistable(fgPersistable, 'B1_FABRIC')]
        property Fabricante: string read FFabricante write SetFabricante;

        property EstoqueFiliais: TLista<TEstoque> read FEstoqueFiliais write SetEstoqueFiliais;

        constructor Create;
        destructor destroy; override;
    end;

implementation

uses UntPrincipal, Vcl.Dialogs, ClsErro;

{ TProduto }

function TProduto.Alterar: integer;
begin

end;

procedure TProduto.AtualizarEstoqueCusto(filial: string);
var
    list: Tlista<TProduto>;
    parametro: TParametro;
begin
    try
        list := nil;
        parametro := nil;

        parametro := tparametro.Create;
        parametro.Add('', 'FILIAL', filial);
        parametro.Add('', 'CODIGO', Self.Codigo);

        list := BaseLib.XmlToObject<TProduto>(BaseLib.ExecutaTarefa('ConsultarEstoqueCusto', '', parametro, ''));
        PreencherProdutoEstoqueCusto(list[0]);
    finally
        if parametro <> nil then
            FreeAndNil(parametro);

        if list <> nil then
            FreeAndNil(list);
    end;

end;

function TProduto.ChecarCodigoProduto(codigoIdentificacao: string): boolean;
begin
    if (codigoIdentificacao = self.Codigo) or (codigoIdentificacao = self.CodigoBarra1) or (codigoIdentificacao = self.CodigoBarra2) or
        (codigoIdentificacao = self.CodigoBarra3) or (codigoIdentificacao = self.CodigoBarraEmbalagem) or
        (codigoIdentificacao = self.CodigoBarraTransp) then
        result := true
    else
        result := false;
end;

procedure TProduto.CopiarPara(objeto: TObject);
begin
    inherited;
    if self.CursoSeguro.Preenchido then
        self.CursoSeguro.CopiarPara(TProduto(objeto).CursoSeguro);
end;

constructor TProduto.Create;
begin
    FCursoSeguro := TCursoSerguro.Create;
    FEstoqueFiliais := TLista<TEstoque>.Create;
end;

function TProduto.Deletar(ID: string): integer;
begin

end;

destructor TProduto.destroy;
begin
    if FCursoSeguro <> nil then
        FreeAndNil(FCursoSeguro);
    if FEstoqueFiliais <> nil then
        FreeAndNil(FEstoqueFiliais);
end;

function TProduto.GetPodeEntregarDepositoLoja: boolean;
begin
    if PodeEntregarDepositoLoja_ = 'S' then
        result := true
    else
        result := false;
end;

function TProduto.GetPrecoAtualProduto: Double;
begin
    if (ProdutoEmPromocao) and (PrecoPromocao < PrecoTabelaProduto) then
        result := PrecoPromocao
    else
        result := PrecoTabelaProduto;
end;

function TProduto.GetProdutoAtivo: boolean;
begin
    if FProdutoAtivo_ <> 'N' then
        result := true
    else
        result := false;
end;

function TProduto.GetProdutoEcommerce: boolean;
begin
    if ProdutoEcommerce_ = 'S' then
        result := true
    else
        result := false;
end;

function TProduto.GetProdutoEmCampanha: boolean;
begin
    if ((Pos('P/', FProdutoEmCampanha_) > 0) and (Tlib.UsuarioLogado.Filial.Uf = 'MT')) or
        ((Pos('R/', FProdutoEmCampanha_) > 0) and (Tlib.UsuarioLogado.Filial.Uf = 'PR')) then
        result := true
    else
        result := false;
end;

function TProduto.GetProdutoEmPromocao: boolean;
begin
    if (DataFimPromocao >= Tlib.ObterDataAtual) and (DataInicioPromocao <= Tlib.ObterDataAtual) then
        result := true
    else
        result := false;

end;

function TProduto.GetProdutoForaLinha: boolean;
begin
    if ProdutoForaLinha_ = 'S' then
        result := true
    else
        result := false;
end;

function TProduto.GetProdutoHidrometro: boolean;
begin
    if ProdutoHidrometro_ = 'S' then
        result := true
    else
        result := false;
end;

function TProduto.GetProdutoLiberadoConferenciaFiscal: boolean;
begin
    if ProdutoLiberadoConferenciaFiscal_ = 'S' then
        result := true
    else
        result := false;
end;

function TProduto.GetProdutoSelfColor: boolean;
begin
    if ProdutoSelfColor_ = 'S' then
        result := true
    else
        result := false;

end;

function TProduto.GetProdutoSobEncomenda: boolean;
begin
    if ProdutoSobEncomenda_ = 'S' then
        result := true
    else
        result := false;
end;

function TProduto.GetTipoAbastecimento: TTipoAbastecimento;
begin
    result := TTipoAbastecimento(TipoAbastecimento_);
end;

function TProduto.GetTipoProduto: TTipoProduto;
begin
    result := TTipoProduto(FTipoProduto_)
end;

function TProduto.GetTotalProduto: Double;
begin
    FTotalProduto := Tlib.IfTernario(FQuantidadeVendida = 0, 1, FQuantidadeVendida) * PrecoAtualProduto;
end;

function TProduto.Inserir: integer;
begin

end;


function TProduto.Listar(tipoOperacao: TOparationTypes; multselect: boolean; descricaoProduto: string ): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TProduto>;
    parametro: TParametro;
begin
    inherited;
    try
        parametro := nil;
        filtro := TFilter<TProduto>.Create;
        filtro.ScreenName := 'Filtro de Produtos';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'Descricao=DESC', 'Nome');
        filtro.AddIndex(2, 'Codigo=CODBAR', 'Código de Barra');
        filtro.AddIndex(3, 'Codigo=CODIGO', 'Código');
        filtro.Task := 'ConsultarProdutoVenda';

        if Self.FormularioCadastro <> nil then
          filtro.InputForm := FormularioCadastro;

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Codigo';
        campoFiltro.Name := 'Codigo';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 55;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Descrição';
        campoFiltro.Name := 'Descricao';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 340;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Preço';
        campoFiltro.Name := 'PrecoAtualProduto';
        campoFiltro.MaskTypes := mtDouble;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 80;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Estoque';
        campoFiltro.Name := 'EstoqueProduto';
        campoFiltro.MaskTypes := mtDouble;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 80;
        filtro.AddField(campoFiltro);

        if descricaoProduto <> EmptyStr then
        begin
            parametro := TParametro.Create;
            // parametro.Add('','DESC',descricaoProduto);
            parametro.Add('', 'Descricao', descricaoProduto);
            filtro.parametro := parametro;
            filtro.FilterType := ftAlredyFilteredWithParametersChangingValues;
        end;

        result := filtro.Execute;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;
end;

procedure TProduto.MostrarEstoqueFiliais;
var
    estoque: TEstoque;
    mensagem, valor: String;
begin
    if EstoqueFiliais.Count <= 0 then
        raise Erro.Create('Não existe a lista de estoque');

    mensagem := '';
    for estoque in EstoqueFiliais do
    begin
        valor := FormatCurr('###,###,##0.00', estoque.Saldo);
        mensagem := mensagem + estoque.Filial + ' - ' + valor + #13;
    end;

    if mensagem = '' then
        raise Erro.Create('Nenhuma filial encontrada!');

    Tlib.MensagemInformacao(mensagem, 'Estoque Filiais');
end;

function TProduto.Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter;
begin
    result := Listar(tipoOperacao, multselect, EmptyStr);
end;

function TProduto.Obter(ID: string): TObject;
var
    parametro: TParametro;
    lista: TList;
    list: TLista<TProduto>;
    xml: widestring;
    resultFilter: TResultFilter;
begin
    try
        parametro := nil;
        lista := nil;
        resultFilter := nil;
        list := nil;

        if StrToInt64Def(ID, -1) <> -1 then
        begin
            parametro := TParametro.Create;
            parametro.Add('', 'DESC', 'NULL');
            parametro.Add('', 'CODIGOALTERNATIVO', 'NULL');
            if Length(ID) = 6 then
                parametro.Add('', 'CODIGO', ID)
            else
            begin
                parametro.Add('', 'CODIGO', 'NULL');
                parametro.Add('', 'CODBAR', ID);
            end;
            xml := BaseLib.ExecutaTarefa('ConsultarProdutoVenda', '', parametro, '', self.ClienteSocket);
            list := BaseLib.XmlToObject<TProduto>(xml);
            lista := list.toList;

            // xml := BaseLib.ExecutaTarefa('ConsultarProduto', '', parametro, '', Self.ClienteSocket);
            // list := BaseLib.XmlToObject<TProduto>(xml);

            if list.Count = 1 then
            begin
                PreencherObjeto(lista[0]);
                // PreencherProdutoBasico(list[0]);
                result := self;
            end
            else
            begin
                Tlib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
                result := nil;
                exit;
            end;

            // if parametro.ObterValorParamentro('CODIGO') = 'NULL' then
            // parametro.ObterItemParamentroPorNome('CODIGO').Valor := Self.Codigo;
            //
            // xml := BaseLib.ExecutaTarefa('ConsultarPrecoProduto', '', parametro, '', Self.ClienteSocket);
            // list := BaseLib.XmlToObject<TProduto>(xml);
            // PreencherProdutoPreco(list[0]);
            //
            //
            // FPreenchido := true;
        end
        else
        begin
            if Length(trim(StringReplace(ID, '%', '', [rfReplaceAll]))) <= 3 then
                raise Exception.Create('Descrição do produto precisa conter mais que 3 (três) caracteres');

            resultFilter := self.Listar(otSelect, false, ID);
            lista := resultFilter.list;

            if lista.Count = 1 then
            begin
                PreencherObjeto(lista[0]);
                result := self;
            end
            else
            begin
                Tlib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
                result := nil;

            end;
        end;

    finally
        if parametro <> nil then
            FreeAndNil(parametro);

        if resultFilter <> nil then
            FreeAndNil(resultFilter);

        if list <> nil then
            FreeAndNil(list);

    end;
end;

function TProduto.ObterAlternativos(tipoAlternativo: TTipoAlternativo; descricao: string): TLista<TProduto>;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TProduto>;
    parametro: TParametro;
begin
    inherited;
    try
        parametro := nil;
        filtro := TFilter<TProduto>.Create;
        filtro.ScreenName := descricao + ' - ' +Self.Descricao;
        filtro.OperationType := otSelect;
        filtro.MultiSelect :=  Tlib.IfTernario(tipoAlternativo = CrossSelling, true, false);
        filtro.Task := 'ConsultarProdutoVenda';
        filtro.FilterType := ftAlredyFilteredWithParameters;

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Codigo';
        campoFiltro.Name := 'Codigo';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 55;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Descrição';
        campoFiltro.Name := 'Descricao';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 340;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Preço';
        campoFiltro.Name := 'PrecoAtualProduto';
        campoFiltro.MaskTypes := mtDouble;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 80;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Estoque';
        campoFiltro.Name := 'EstoqueProduto';
        campoFiltro.MaskTypes := mtDouble;
        campoFiltro.FieldType := fdNormal;
        campoFiltro.GridSize := 80;
        filtro.AddField(campoFiltro);

        parametro := TParametro.Create;
        parametro.Add('', 'CODIGOALTERNATIVO', self.Codigo);
        parametro.Add('', 'TIPOALTERNATIVO', InttoStr(integer(tipoAlternativo)));
        filtro.parametro := parametro;

        result := TLista<TProduto>(filtro.Execute.list);
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;
end;

function TProduto.ObterCrossSelling: TLista<TProduto>;
begin
    result := nil;

    if ObterQuantidadeCrossSelling > 0 then
        result := ObterAlternativos(CrossSelling, 'Filtro Cross Selling ');
end;

procedure TProduto.ObterEstoqueFiliais(tiposDeEntrega: TLista<TTipoEntrega>);
var
    parametro: TParametro;
    filiais: String;
    entrega: TTipoEntrega;
begin
    Try
        filiais := QuotedStr(Tlib.UsuarioLogado.Filial.Filial) + ',' + QuotedStr(Tlib.UsuarioLogado.Filial.CD);

        for entrega in tiposDeEntrega do
        begin
            if StrToIntDef(entrega.TipoEntrega, -1) > 0 then
                filiais := filiais + ',' + QuotedStr(entrega.TipoEntrega);
        end;

        parametro := TParametro.Create;
        parametro.Add('', 'B2_FILIAL', filiais);
        parametro.Add('', 'B2_COD', self.Codigo);

        EstoqueFiliais := BaseLib.XmlToObject<TEstoque>(BaseLib.ExecutaTarefa('ConsultarEstoque', 'TProduto', parametro));
    Finally
        FreeAndNil(parametro);
    End;
end;

function TProduto.ObterQuantidadeAlternativo(tipoAlternativo: TTipoAlternativo): integer;
var
    parametro: TParametro;
    teste: string;

begin
    try
        try
            parametro := TParametro.Create;
            parametro.Add('', 'TIPOALTERNATIVO', InttoStr(integer(tipoAlternativo)));
            parametro.Add('', 'PRODUTOPAI', self.Codigo);

            result := StrToIntDef(BaseLib.XmlToString(BaseLib.ExecutaTarefa('ObterQuantidadeAlternativo', 'TProduto', parametro)), -1);
        except
            on e: Exception do
            begin
                raise Erro.Create('Erro ao ObterQuantidadeAlternativo'#13 + e.Message);
            end;
        end;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;
end;

function TProduto.ObterQuantidadeCrossSelling: integer;
begin
    result := ObterQuantidadeAlternativo(CrossSelling);
end;

function TProduto.ObterQuantidadeMultipla(codigoIdentificacao: string): Double;
begin
    if (codigoIdentificacao = self.Codigo) or (codigoIdentificacao = self.CodigoBarra1) or (codigoIdentificacao = self.CodigoBarra2) or
        (codigoIdentificacao = self.CodigoBarra3) then
        result := self.QtdMultiplaVenda
    else if codigoIdentificacao = CodigoBarraEmbalagem then
        result := QtdPorEmbalagem
    else if codigoIdentificacao = self.CodigoBarraTransp then
        result := QtdCaixaPorTransp * QtdPorEmbalagem
    else
        result := 0;
end;

function TProduto.ObterQuantidadeSimilar: integer;
begin
    result := ObterQuantidadeAlternativo(Similar);
end;

function TProduto.ObterQuantidadeUpSelling: integer;
begin
    result := ObterQuantidadeAlternativo(UpSelling);
end;

function TProduto.ObterSimilares: TLista<TProduto>;
begin
    result := nil;

    if ObterQuantidadeSimilar > 0 then
        result := ObterAlternativos(Similar, 'Filtro Similares');
end;

function TProduto.ObterUpSelling: TLista<TProduto>;
begin
    result := nil;

    if ObterQuantidadeUpSelling > 0 then
        result := ObterAlternativos(UpSelling, 'Filtro Up Selling');
end;

function TProduto.ValidarCaracteresInvalidosDescricao: boolean;
begin
    result := Tlib.ValidarCaracteresInvalidos(self.descricao);
end;

function TProduto.ValidarQuantidadeMultipla(qtdDigitada: Double; mensagem: boolean): boolean;
var
    resto: string;
    quant: string;
    sugest1: string;
    sugest2: string;
begin
    result := true;
    resto := FormatFloat('########0.00', qtdDigitada / QtdMultiplaVenda);
    quant := Tlib.ObterPorParametro(resto, '1', ',');
    quant := FormatFloat('###,###,##0.00', (StrToFloat(Tlib.GravaNumeros(quant, ',')) * QtdMultiplaVenda));
    resto := FormatFloat('###,###,##0.00', qtdDigitada);
    sugest1 := quant;
    sugest2 := FormatFloat('###,###,##0.00', (StrToFloat(Tlib.GravaNumeros(quant, ',')) + QtdMultiplaVenda));
    if quant <> resto then
    begin
        if mensagem then
            Tlib.MensagemAdvertencia('A Quantidade do Produto..:  ' + self.descricao + #13 +
                'Esta fora da Embalagem.... Altere a quantidade deste Produto.'#13 + 'Para:      ' + sugest1 + '     ou       ' + sugest2, 'Aviso');
        result := false;
    end;
end;

procedure TProduto.PreencherObjeto(produto: TProduto);
begin
    produto.CopiarPara(self);
    FPreenchido := true;
end;

procedure TProduto.PreencherProdutoBasico(produto: TProduto);
begin
    self.Codigo := produto.Codigo;
    self.descricao := produto.descricao;
    self.QtdMultiplaVenda := produto.QtdMultiplaVenda;
    self.CodigoBarra1 := produto.CodigoBarra1;
    self.CodigoBarra2 := produto.CodigoBarra2;
    self.CodigoBarra3 := produto.CodigoBarra3;
    self.UnidadeMedidaTransp := produto.UnidadeMedidaTransp;
    self.QtdCaixaPorTransp := produto.QtdCaixaPorTransp;
    self.CodigoBarraTransp := produto.CodigoBarraTransp;
    self.UnidadeMedidaEmbalagem := produto.UnidadeMedidaEmbalagem;
    self.QtdPorEmbalagem := produto.QtdPorEmbalagem;
    self.CodigoBarraEmbalagem := produto.CodigoBarraEmbalagem;
    self.ProdutoAtivo_ := produto.ProdutoAtivo_;
    self.ProdutoHidrometro_ := produto.ProdutoHidrometro_;
    self.ProdutoSelfColor_ := produto.ProdutoSelfColor_;
    self.Peso := produto.Peso;
    self.PercentualImpostoDilma := produto.PercentualImpostoDilma;
    self.PodeEntregarDepositoLoja_ := produto.PodeEntregarDepositoLoja_;
    self.TipoProduto_ := produto.TipoProduto_;
    self.CodigoCursoSeguro := produto.CodigoCursoSeguro;
end;

procedure TProduto.PreencherProdutoEstoqueCusto(produto: TProduto);
begin
    self.EstoqueProduto := produto.EstoqueProduto;
    self.CustoGerencial := produto.CustoGerencial;
end;

procedure TProduto.PreencherProdutoPreco(produto: TProduto);
begin
    self.DataInicioPromocao := produto.DataInicioPromocao;
    self.DataFimPromocao := produto.DataFimPromocao;
    self.PrecoTabelaProduto := produto.PrecoTabelaProduto;
    self.PrecoPromocao := produto.PrecoPromocao;
end;

procedure TProduto.SetCodigo(const Value: string);
begin
    FCodigo := Value;
end;

procedure TProduto.SetCodigoBarra1(const Value: string);
begin
    FCodigoBarra1 := Value;
end;

procedure TProduto.SetCodigoBarra2(const Value: string);
begin
    FCodigoBarra2 := Value;
end;

procedure TProduto.SetCodigoBarra3(const Value: string);
begin
    FCodigoBarra3 := Value;
end;

procedure TProduto.SetCodigoBarraEmbalagem(const Value: string);
begin
    FCodigoBarraEmbalagem := Value;
end;

procedure TProduto.SetCodigoBarraTransp(const Value: string);
begin
    FCodigoBarraTransp := Value;
end;

procedure TProduto.SetCodigoCursoSeguro(const Value: string);
begin
    FCodigoCursoSeguro := Value;
end;

procedure TProduto.SetCursoSeguro(const Value: TCursoSerguro);
begin
    FCursoSeguro := Value;
end;

procedure TProduto.SetCustoGerencial(const Value: Double);
begin
    FCustoGerencial := Value;
end;

procedure TProduto.SetDataFimPromocao(const Value: string);
begin
    FDataFimPromocao := Value;
end;

procedure TProduto.SetDataInicioPromocao(const Value: string);
begin
    FDataInicioPromocao := Value;
end;

procedure TProduto.SetDescricao(const Value: string);
begin
    FDescricao := Value;
end;

procedure TProduto.SetEstoqueFiliais(const Value: TLista<TEstoque>);
begin
    FEstoqueFiliais := Value;
end;

procedure TProduto.SetEstoqueProduto(const Value: Double);
begin
    FEstoqueProduto := Value;
end;

procedure TProduto.SetFabricante(const Value: string);
begin
  FFabricante := Value;
end;

procedure TProduto.SetFamilia(const Value: string);
begin
  FFamilia := Value;
end;

procedure TProduto.SetGrupo(const Value: string);
begin
  FGrupo := Value;
end;

procedure TProduto.SetPercentualImpostoDilma(const Value: Double);
begin
    FPercentualImpostoDilma := Value;
end;

procedure TProduto.SetPeso(const Value: Double);
begin
    FPeso := Value;
end;

procedure TProduto.SetPodeEntregarDepositoLoja_(const Value: string);
begin
    FPodeEntregarDepositoLoja_ := Value;
end;

procedure TProduto.SetPrecoPromocao(const Value: Double);
begin
    FPrecoPromocao := Value;
end;

procedure TProduto.SetPrecoTabelaProduto(const Value: Double);
begin
    FPrecoTabelaProduto := Value;
end;

procedure TProduto.SetProdutoAtivo_(const Value: string);
begin
    FProdutoAtivo_ := Value;
end;

procedure TProduto.SetProdutoEcommerce_(const Value: string);
begin
    FProdutoEcommerce_ := Value;
end;

procedure TProduto.SetProdutoEmCampanha_(const Value: string);
begin
    FProdutoEmCampanha_ := Value;
end;

procedure TProduto.SetProdutoForaLinha_(const Value: string);
begin
    FProdutoForaLinha_ := Value;
end;

procedure TProduto.SetProdutoHidrometro_(const Value: string);
begin
    FProdutoHidrometro_ := Value;
end;

procedure TProduto.SetProdutoLiberadoConferenciaFiscal_(const Value: string);
begin
    FProdutoLiberadoConferenciaFiscal_ := Value;
end;

procedure TProduto.SetProdutoSelfColor_(const Value: string);
begin
    FProdutoSelfColor_ := Value;
end;

procedure TProduto.SetProdutoSobEncomenda_(const Value: string);
begin
    FProdutoSobEncomenda_ := Value;
end;

procedure TProduto.SetQtdCaixaPorTransp(const Value: Double);
begin
    FQtdCaixaPorTransp := Value;
end;

procedure TProduto.SetQtdMultiplaVenda(const Value: Double);
begin
    FQtdMultiplaVenda := Value;
end;

procedure TProduto.SetQtdPorEmbalagem(const Value: Double);
begin
    FQtdPorEmbalagem := Value;
end;

procedure TProduto.SetQuantidadeVendida(const Value: Double);
begin
    FQuantidadeVendida := Value;
end;

procedure TProduto.SetSubGrupo(const Value: string);
begin
  FSubGrupo := Value;
end;

procedure TProduto.SetTipoAbastecimento_(const Value: integer);
begin
    FTipoAbastecimento_ := Value;
end;

procedure TProduto.SetTipologia(const Value: string);
begin
  FTipologia := Value;
end;

procedure TProduto.SetTipoProduto_(const Value: integer);
begin
    FTipoProduto_ := Value;
end;

procedure TProduto.SetTotalProduto(const Value: Double);
begin
    FTotalProduto := Value;
end;

procedure TProduto.SetUnidadeMedidaEmbalagem(const Value: string);
begin
    FUnidadeMedidaEmbalagem := Value;
end;

procedure TProduto.SetUnidadeMedidaTransp(const Value: string);
begin
    FUnidadeMedidaTransp := Value;
end;

end.
