unit ClsGrupo;

interface

uses
    Classes, System.SysUtils, Dialogs, ClsBase, ClsParametro, ClsEnumeradores,
    ClsPersistable, ClsLista, ClsResultFilter, ClsModulo, ClsRotina,
     ClsPermissao;

type
    TGrupo = class(TBase)
  private
    FDescricao: string;
    FDelet: string;
    FRecno: integer;
    FGrupo: string;
    FListaPermissaoGrupo: string;
    FModuloPermissao: string;
    procedure SetDelet(const Value: string);
    procedure SetDescricao(const Value: string);
    procedure SetGrupo(const Value: string);
    procedure SetRecno(const Value: integer);

    procedure SetListaPermissaoGrupo(const Value: string);
    procedure SetModuloPermissao(const Value: string);
    function ObterRotinaPermissao: TLista<TPermissao>;
    public
        ///	<summary>
        ///	  Metodo que faz a inserção da Grupo
        ///	</summary>
        function Inserir: integer; override;

        ///	<summary>
        ///	  Métodos que retorna uma lista  de objetos de uma consulta
        ///	  pré-definida pelos parâmentros passados.
        ///	</summary>
        function Consultar(parametros: TParametro): Tlist;

        ///	<summary>
        ///	  Metodo que faz a alteração da Grupo
        ///	</summary>
        function Alterar: integer; override;

        ///	<summary>
        ///	  Métido que faz a Deleção da Grupo
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave  primária da tabela
        ///	</param>
        function Deletar(ID:string): integer; override;

        ///	<summary>
        ///	  Método que chama a tela de filtro
        ///	</summary>
        ///	<param name="tipoOperacao">
        ///	  Tipo da operação, se é somente filtro, ou seleção de registro
        ///	</param>
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter; override;

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave primária da tabela
        ///	</param>
        function Obter(ID: string): TObject; overload; override;

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Obter(parametros:TParametro): TObject; overload;

        ///	<summary>
        ///	  Obtem a lista com todos os grupos cadastrados no sistema
        ///	</summary>
        function ObterTodosGrupos: TLista<TGrupo>;

        ///	<summary>
        ///	  Método que preenche a instância do Objeto
        ///	</summary>
        ///	<param name="Grupo">
        ///	  objeto de parametro para preenchimento da instância
        ///	</param>
        procedure PreencherObjeto(Grupo: TGrupo);

        procedure ProcessaPermissoesGrupo;

        function ObterPermissoesPorGrupoERotina(rotina: string): TLista<TPermissao>;



        ///	<summary>
        ///	  Propriedade com a lista de Permissoes do Grupo para persistir na
        ///	  tabela SIATD_S09_01
        ///	</summary>
        [TPersistable(fgPersistable, 'PERMISSOES_GRUPO')]
        property ListaPermissaoGrupo : string read FListaPermissaoGrupo write SetListaPermissaoGrupo;

        ///	<summary>
        ///	  Propriedade com O Modulo referente a quais Permissoes do Grupo
        ///	</summary>
        [TPersistable(fgPersistable, 'MODULO_PERMISSAO')]
        property ModuloPermissao : string read FModuloPermissao write SetModuloPermissao;


        [TPersistable(fgPersistable, 'S02_GRUPO')]
        property Grupo: string read FGrupo write SetGrupo;

        [TPersistable(fgPersistable, 'S02_DESC')]
        property Descricao: string read FDescricao write SetDescricao;

        [TPersistable(fgPersistable, 'D_E_L_E_T_')]
        property Delet: string read FDelet write SetDelet;

        [TPersistable(fgPersistable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        constructor Create;
        destructor Destroy; override;

    end;

implementation


{ TGrupo }

uses ClsFilter, ClsFieldFilter, ClsLib, ClsBaseLib;

{$REGION 'Métodos CRUD'}

function TGrupo.Inserir: integer;
begin
     BaseLib.ExecutaTarefa('InserirGrupo', 'TGrupo', ObjetoParaParametros(acInsercao));
    //###Validar retorno da função
    //result := 0;
end;

function TGrupo.Consultar(parametros: TParametro): Tlist;
begin
   Result := BaseLib.XmlToObject<TGrupo>(
    BaseLib.ExecutaTarefa('ConsultarGrupo', 'TGrupo', parametros)).Tolist;
end;

function TGrupo.Alterar: integer;
begin


    BaseLib.ExecutaTarefa('AlterarGrupo', 'TGrupo' , ObjetoParaParametros(acAlteracao));
    //###Validar retorno da função
    //result := 0;
end;

function TGrupo.Deletar(ID: string): integer;
var
    parametro: TParametro;
begin
    try
        parametro := TParametro.Create;
        parametro.Add('', 'R_E_C_N_O_', ID);

        BaseLib.ExecutaTarefa('DeletarGrupo', 'TGrupo', parametro);

        //###Validar retorno da função
        result := 0;
    finally
        parametro.Free;
    end;
end;

destructor TGrupo.Destroy;
begin

  inherited;
end;

function TGrupo.Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;
var
    campoFiltro:TFieldFilter;
    filtro : TFilter<TGrupo>;
    //parametro : TParametro;
    lista:TLista<TGrupo>;
    Grupo : TGrupo;
begin
    try
        Lista := BaseLib.XmlToObject<TGrupo>(BaseLib.ExecutaTarefa('ConsultarGrupo', 'TGrupo', nil));

        filtro := TFilter<TGrupo>.Create;
        filtro.ScreenName := 'Filtro de Grupo';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'Grupo=S02_GRUPO', 'Grupo');
        filtro.Task := 'ConsultarGrupo';

        //###Criar os Índices do filtro

        {$REGION 'Campo Filtro'}

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Grupo';
        campoFiltro.Name := 'Grupo';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.IDFieldName := 'Grupo';
        campoFiltro.DescriptionFieldName := 'Grupo';
        campoFiltro.FieldType := fdDataListCombo;
        campoFiltro.DataSource := Lista.ToList;
        filtro.AddField(campoFiltro);

        {$ENDREGION}

        result := filtro.Execute(filtro);
    finally
        // FreeAndNil(parametro);
        // FreeAndNil(lista.Destroy);
    end;
end;

function TGrupo.Obter(parametros: TParametro): TObject;
var
  lista: TLista<TGrupo>;
begin
    try
        lista := BaseLib.XmlToObject<TGrupo>(BaseLib.ExecutaTarefa('ConsultarGrupo', 'TGrupo', parametros));

        if lista.Count = 1 then
        begin
           PreencherObjeto(lista[0]);
           Result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            Result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

function TGrupo.ObterPermissoesPorGrupoERotina(rotina: string): TLista<TPermissao>;
var
  parametro: TParametro;
begin
    try
        parametro := TParametro.Create();
        parametro.Add('', 'S20_S19_S05_ROTINA', Rotina);
        parametro.Add('', 'S20_S02_GRUPO', Self.Grupo);
        result := BaseLib.XmlToObject<TPermissao>(BaseLib.ExecutaTarefa('ObterPermissoesPorGrupoERotina','TGrupo',parametro));
    finally
        freeAndNil(parametro);
    end;
end;



function TGrupo.Obter(ID: string): TObject;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;

procedure TGrupo.ProcessaPermissoesGrupo;
begin
     BaseLib.ExecutaTarefa('ProcessaPermissoes',
     'TGrupo',ObjetoParaParametros(acInsercao));
end;

constructor TGrupo.Create;
begin

end;

{$ENDREGION}

{$REGION 'Regras de Negócio'}

procedure TGrupo.PreencherObjeto(Grupo: TGrupo);
begin
    Grupo.CopiarPara(Self);
    FPreenchido := true;
end;

function TGrupo.ObterRotinaPermissao(): TLista<TPermissao>;
begin
    result := BaseLib.XmlToObject<TPermissao>(BaseLib.ExecutaTarefa
    ('ConsultarPermissao',
    'ObterRotinaPermissao',nil));
end;


function TGrupo.ObterTodosGrupos: TLista<TGrupo>;
begin
    Result := BaseLib.XmlToObject<TGrupo>(BaseLib.ExecutaTarefa('ConsultarGrupo', 'TGrupo', nil));
end;


procedure TGrupo.SetDelet(const Value: string);
begin
  FDelet := Value;
end;

procedure TGrupo.SetDescricao(const Value: string);
begin
  FDescricao := Value;
end;

procedure TGrupo.SetGrupo(const Value: string);
begin
  FGrupo := Value;
end;

procedure TGrupo.SetListaPermissaoGrupo(const Value: string);
begin
  FListaPermissaoGrupo := Value;
end;

procedure TGrupo.SetModuloPermissao(const Value: string);
begin
  FModuloPermissao := Value;
end;

procedure TGrupo.SetRecno(const Value: integer);
begin
  FRecno := Value;
end;

{$ENDREGION}

{$REGION 'Métodos de Propriedades'}


{$ENDREGION}

end.

