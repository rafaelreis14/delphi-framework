{*Created by @ReisCodeGenerator*}
unit Biz.Empresa;

interface

uses
    Classes, System.SysUtils, Dialogs, Lib.Base, Lib.Parametro, Lib.Enumeradores,
    Lib.Persistable, Lib.ResultFilter, Lib.Lista, Dal.ControleDados, Dal.CondicaoConsulta, 
	Framework.Interfaces.CRUD, Dal.FabricaSQL;

type
    [TReferenceTable('SIATD_S12')]
	TEmpresa = class(TBase, ICRUD<TEmpresa>)
	private
	
		class var dao: TControleDados<TLista<TEmpresa>,TListaDAO<TEmpresa>>;
    public
        ///	<summary>
        ///	  Metodo que faz a inserção da Empresa
        ///	</summary>
        function Inserir: boolean; 
        ///	<summary>
        ///	  Metodo que faz a alteração da Empresa
        ///	</summary>
        function Alterar: boolean;

        ///	<summary>
        ///	  Métido que faz a Deleção da Empresa
        ///	</summary>
        function Excluir: boolean;

        ///	<summary>
        ///	  Método que chama a tela de filtro
        ///	</summary>
        ///	<param name="tipoOperacao">
        ///	  Tipo da operação, se é somente filtro, ou seleção de registro
        ///	</param>
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter; 


        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave primária da tabela
        ///	</param>
        function Obter(ID: string): TEmpresa; overload; 

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Obter(parametros:TParametro): TEmpresa; overload;


        ///	<summary>
        ///	  Método que retonar uma lista com varios objetos de acordo com parametro passado
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Consultar(parametros:TParametro): TLista<TEmpresa>; 


        ///	<summary>
        ///	  Método que preenche a instância do Objeto
        ///	</summary>
        ///	<param name="Empresa">
        ///	  objeto de parametro para preenchimento da instância
        ///	</param>
        procedure PreencherObjeto(Empresa: TEmpresa);

        [TPersistable(fgPersistable, 'S12_EMPRESA')]
        [TMaxLenght(2)]
        property Empresa: string;

        [TPersistable(fgPersistable, 'S12_NOME')]
        [TMaxLenght(60)]
        property Nome: string;

        [TPersistable(fgPersistable, 'R_E_C_N_O_')]
        property Recno: integer;

    end;

implementation


{ TEmpresa }

uses Lib.Filter, Lib.Biblioteca, Biz.UsuarioLogado;

{$REGION 'Métodos CRUD'}

function TEmpresa.Inserir: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    parametro: TParametro;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            sql := fabrica.GerarSqlInsercao;
            parametro := Self.ObjetoParaParametros(Insercao);
            result := dao.Inserir(sql, parametro);
        except
          on e: exception do
              raise Exception.Create('Erro ao inserir Empresa'+'#13'+ e.Message);
        end;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;
end;

function TEmpresa.Alterar: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    parametro: TParametro;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            sql := fabrica.GerarSqlAlteracao;
            parametro := Self.ObjetoParaParametros(Alteracao);
            result := dao.Alterar(sql, parametro);
        except
          on e: exception do
              raise Exception.Create('Erro ao alterar Empresa'+'#13'+ e.Message);
        end;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;
end;


function TEmpresa.Excluir: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    parametro: TParametro;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            sql := fabrica.GerarSqlExclusao;
            parametro := Self.ObjetoParaParametros(Exclusao);
            result := dao.Excluir(sql, parametro);
        except
          on e: exception do
              raise Exception.Create('Erro ao excluir Empresa'+'#13'+ e.Message);
        end;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;

end;

function TEmpresa.Consultar(parametros: TParametro): Tlista<TEmpresa>;
var
    query: string;
    condicao: TCondicaoConsulta;
begin
    try
        condicao := TCondicaoConsulta.Create(parametros);
        condicao.Adiciona('S12_EMPRESA',ccIgual, lgAnd); 
        condicao.Adiciona('S12_NOME',ccIgual, lgAND); 
        condicao.Adiciona('R_E_C_N_O_',ccIgual, lgAND); 

        query := 'SELECT '+Self.ObterCamposSeparadosPorVirgula(Consulta,[]) + ' FROM ' + Self.TabelaReferencia + condicao.ToString;

        Result := dao.Consultar(query,parametros);
    finally
        condicao.Free;
    end;
end;

function TEmpresa.Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;
var
    campoFiltro:TFieldFilter;
    filtro : TFilter<TEmpresa>;
    //parametro : TParametro;
    //lista:TLista<TEmpresa>
begin
    try
        filtro := TFilter<TEmpresa>.Create;
        filtro.ScreenName := 'Filtro de Empresa';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'Empresa=S12_EMPRESA', 'Empresa'); 
        filtro.AddIndex(2, 'Nome=S12_NOME', 'Nome'); 
        filtro.AddIndex(3, 'Recno=R_E_C_N_O_', 'Recno'); 
        //###Criar os Índices do filtro
		// filtro.AddIndex(99, 'Empresa=S01_EMP, Filial=S01_FILIAL, Descricao=S01_DESC', 'Empresa + Filial + Descrição');

        {$REGION 'Campo Filtro'}

        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Empresa'; 
        campoFiltro.Name := 'Empresa'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 
        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Nome'; 
        campoFiltro.Name := 'Nome'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 
        campoFiltro := TFieldFilter.Create; 
        campoFiltro.Description := 'Recno'; 
        campoFiltro.Name := 'Recno'; 
        campoFiltro.MaskTypes := mtNone; 
        campoFiltro.GridSize := 100; 
        campoFiltro.FieldType := fdNormal; 
        filtro.AddField(campoFiltro); 
 

        {$ENDREGION}

        result := filtro.Execute;
    finally
        // FreeAndNil(parametro);
        // FreeAndNil(lista);
    end;
end;

function TEmpresa.Obter(parametros: TParametro): TEmpresa;
var
  lista: TLista<TEmpresa>;
begin
    try
        lista := Self.Consultar(parametros);

        if lista.Count = 1 then
        begin
           PreencherObjeto(lista[0]);
           Result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            Result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

function TEmpresa.Obter(ID: string): TEmpresa;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;


{$ENDREGION}

{$REGION 'Regras de Negócio'}

procedure TEmpresa.PreencherObjeto(Empresa: TEmpresa);
begin
    Empresa.CopiarPara(Self);
    FPreenchido := true;
end;


{$ENDREGION}

{$REGION 'Métodos de Propriedades'}


{$ENDREGION}

end.

