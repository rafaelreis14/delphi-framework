{ *Created by @ReisCodeGenerator* }
unit Biz.Acesso;

interface

uses
    Classes, System.SysUtils, Dialogs, Lib.Base, Lib.Parametro, Lib.Enumeradores,
    Lib.Persistable, Lib.ResultFilter, Lib.Lista, Dal.ControleDados, Dal.CondicaoConsulta,
    Framework.Interfaces.CRUD, Dal.FabricaSQL, Biz.PermissaoAcesso;

type

    [TReferenceTable('SIATD_S20_01')]
    TAcesso = class(TBase, ICRUD<TAcesso>)
    private
        FRotina: string;
        FDelet: string;
        FRecno: integer;
        FModulo: string;
        FGrupo: string;
        FPermissoesAcesso: TLista<TPermissaoAcesso>;
    FCarregou: boolean;
    FTipoRotina: string;
        procedure SetDelet(const Value: string);
        procedure SetGrupo(const Value: string);
        procedure SetModulo(const Value: string);
        procedure SetRecno(const Value: integer);
        procedure SetRotina(const Value: string);
        class var dao: TControleDados<TLista<TAcesso>, TListaDAO<TAcesso>>;
        procedure SetPermissoesAcesso(const Value: TLista<TPermissaoAcesso>);
    procedure SetCarregou(const Value: boolean);
    procedure SetTipoRotina(const Value: string);
    public
        /// <summary>
        /// Metodo que faz a inserção da Acesso
        /// </summary>
        function Inserir: boolean;
        /// <summary>
        /// Metodo que faz a alteração da Acesso
        /// </summary>
        function Alterar: boolean;

        /// <summary>
        /// Métido que faz a Deleção da Acesso
        /// </summary>
        function Excluir: boolean;

        procedure ExcluirPorGrupoEModulo(grupo: string; modulo:string; tipoRotina:string);

        /// <summary>
        /// Método que chama a tela de filtro
        /// </summary>
        /// <param name="tipoOperacao">
        /// Tipo da operação, se é somente filtro, ou seleção de registro
        /// </param>
        function Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="ID">
        /// Chave primária da tabela
        /// </param>
        function Obter(ID: string): TAcesso; overload;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Obter(parametros: TParametro): TAcesso; overload;

        /// <summary>
        /// Método que retonar uma lista com varios objetos de acordo com parametro passado
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Consultar(parametros: TParametro): TLista<TAcesso>;


        procedure CarregarPermissoesAcesso(tipoRotina: string);

        /// <summary>
        /// Método que preenche a instância do Objeto
        /// </summary>
        /// <param name="Acesso">
        /// objeto de parametro para preenchimento da instância
        /// </param>
        procedure PreencherObjeto(Acesso: TAcesso);

        [TPersistable(fgPersistable, 'S20_S02_GRUPO')]
        [TMaxLenght(20)]
        property Grupo: string read FGrupo write SetGrupo;

        [TPersistable(fgPersistable, 'S20_S09_S08_MODULO')]
        [TMaxLenght(30)]
        property Modulo: string read FModulo write SetModulo;

        [TPersistable(fgPersistable, 'S20_S09_S05_ROTINA')]
        [TMaxLenght(30)]
        property Rotina: string read FRotina write SetRotina;

        [TPersistable(fgPersistable, 'S20_TIPOROTINA')]
        [TMaxLenght(30)]
        property TipoRotina: string read FTipoRotina write SetTipoRotina;


        [TPersistable(fgUpdateable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        [TPersistable(fgPersistable, 'D_E_L_E_T_')]
        [TMaxLenght(1)]
        property Delet: string read FDelet write SetDelet;



        property Carregou: boolean read FCarregou write SetCarregou;


        property PermissoesAcesso: TLista<TPermissaoAcesso> read FPermissoesAcesso write SetPermissoesAcesso;
        procedure AdicionarPermissoesAcesso(permissaoAcesso: TPermissaoAcesso);
        procedure DeletarPermissaoAcesso(permissaoAcesso: TPermissaoAcesso);
        function ObterPermissaoAcesso(permissao: string): TPermissaoAcesso;


        constructor Create;
        destructor Destroy; override;

    end;

implementation

{ TAcesso }

uses Lib.Filter, Lib.Biblioteca, Biz.UsuarioLogado;

{$REGION 'Métodos CRUD'}

function TAcesso.Inserir: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    Parametro: TParametro;
    permissao: TPermissaoAcesso;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            dao.IniciarTransacao();
            sql := fabrica.GerarSqlInsercao;
            Parametro := Self.ObjetoParaParametros(Insercao);
            result := dao.Inserir(sql, Parametro);

            if Self.PermissoesAcesso.Count > 0 then
            begin
                for permissao in Self.PermissoesAcesso do
                    permissao.Inserir
            end;
            dao.ConfirmarTransacao();
        except
            on e: exception do
            begin
                dao.ReverterTransacao();
                raise exception.Create('Erro ao inserir Acesso' + #13 + e.Message);

            end;

        end;
    finally
        if Parametro <> nil then
            FreeAndNil(Parametro);
    end;
end;

procedure TAcesso.AdicionarPermissoesAcesso(permissaoAcesso: TPermissaoAcesso);
begin
    Self.FPermissoesAcesso.Add(permissaoAcesso);
end;

function TAcesso.Alterar: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    Parametro: TParametro;
    permissao: TPermissaoAcesso;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            dao.IniciarTransacao();
            sql := fabrica.GerarSqlAlteracao;
            Parametro := Self.ObjetoParaParametros(Alteracao);
            result := dao.Alterar(sql, Parametro);

            if Self.PermissoesAcesso.Count > 0 then
            begin
                for permissao in Self.PermissoesAcesso do
                    permissao.Inserir
            end;
            dao.ConfirmarTransacao();

        except
            on e: exception do
            begin
                dao.ReverterTransacao();
                raise exception.Create('Erro ao alterar Acesso' + #13 + e.Message);
            end;
        end;
    finally
        if Parametro <> nil then
            FreeAndNil(Parametro);
    end;
end;

function TAcesso.Excluir: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    Parametro: TParametro;
    permissao: TPermissaoAcesso;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            dao.IniciarTransacao();
            sql := fabrica.GerarSqlExclusao;
            Parametro := Self.ObjetoParaParametros(Exclusao);
            result := dao.Excluir(sql, Parametro);

            if Self.PermissoesAcesso.Count > 0 then
            begin
                for permissao in Self.PermissoesAcesso do
                    permissao.Excluir;
            end;
            dao.ConfirmarTransacao();
        except
            on e: exception do
            begin
                dao.ReverterTransacao();
                raise exception.Create('Erro ao excluir Acesso' + #13 + e.Message);
            end;
        end;
    finally
        if Parametro <> nil then
            FreeAndNil(Parametro);
    end;

end;

procedure TAcesso.ExcluirPorGrupoEModulo(grupo: string; modulo: string; tipoRotina:string);
var
    parametro: Tparametro;
    query: string;
begin
    try
        parametro := TParametro.Create;
        parametro.Add('', 'S20_S02_GRUPO', grupo);
        parametro.Add('', 'S20_S09_S08_MODULO', modulo);
        parametro.Add('', 'S20_TIPOROTINA',tipoRotina);
        query := 'DELETE SIATD_S20_01 WHERE S20_S02_GRUPO = :S20_S02_GRUPO and S20_S09_S08_MODULO = :S20_S09_S08_MODULO AND S20_TIPOROTINA = :S20_TIPOROTINA';
        dao.Excluir(query,parametro);
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;

end;

procedure TAcesso.CarregarPermissoesAcesso(tipoRotina: string);
var
    parametro: Tparametro;
    permissaoAcesso: TPermissaoAcesso;
begin
    try
        parametro := TParametro.Create;
        permissaoAcesso := TPermissaoAcesso.Create;

        parametro.Add('', 'S24_S20_S02_GRUPO', Self.Grupo);
        parametro.Add('', 'S24_S20_S09_S08_MODULO', Self.Modulo);
        parametro.Add('', 'S24_S20_S09_S05_ROTINA', Self.Rotina);
        FPermissoesAcesso := permissaoAcesso.Consultar(parametro);
    finally
        if parametro <> nil then
            FreeAndNil(parametro);

        if permissaoAcesso <> nil then
            FreeAndNil(permissaoAcesso);
    end;
end;

function TAcesso.Consultar(parametros: TParametro): TLista<TAcesso>;
var
    query: string;
    condicao: TCondicaoConsulta;
begin
    try
        condicao := TCondicaoConsulta.Create(parametros);
        condicao.Adiciona('S20_S02_GRUPO', ccIgual, lgAnd);
        condicao.Adiciona('S20_S09_S08_MODULO', ccIgual, lgAnd);
        condicao.Adiciona('S20_S09_S05_ROTINA', ccIgual, lgAnd);
        condicao.Adiciona('S20_TIPOROTINA', ccIgual, lgAnd);
        condicao.Adiciona('R_E_C_N_O_', ccIgual, lgAnd);
        condicao.Adiciona('D_E_L_E_T_', ccIgual, lgAnd);

        query := 'SELECT ' + Self.ObterCamposSeparadosPorVirgula(Consulta, []) + ' FROM ' + Self.TabelaReferencia + ' WHERE D_E_L_E_T_ = '''' ' +
          condicao.ToString(true);

        result := dao.Consultar(query, parametros);
    finally
        condicao.Free;
    end;
end;

constructor TAcesso.Create;
begin
    FPermissoesAcesso := TLista<TPermissaoAcesso>.create;
end;

procedure TAcesso.DeletarPermissaoAcesso(permissaoAcesso: TPermissaoAcesso);
begin
   Self.FPermissoesAcesso.Delete(permissaoAcesso);
end;

destructor TAcesso.Destroy;
begin
    FreeAndNil(FPermissoesAcesso);
    inherited;
end;

function TAcesso.Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TAcesso>;
    // parametro : TParametro;
    // lista:TLista<TAcesso>
begin
    try
        filtro := TFilter<TAcesso>.Create;
        filtro.ScreenName := 'Filtro de Acesso';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'Grupo=S20_S02_GRUPO', 'Grupo');
        filtro.AddIndex(2, 'Modulo=S20_S09_S08_MODULO', 'Modulo');
        filtro.AddIndex(3, 'Rotina=S20_S09_S05_ROTINA', 'Rotina');
        filtro.AddIndex(3, 'TipoRotina=S20_TIPOROTINA', 'TipoRotina');
      // ###Criar os Índices do filtro
        // filtro.AddIndex(99, 'Empresa=S01_EMP, Filial=S01_FILIAL, Descricao=S01_DESC', 'Empresa + Filial + Descrição');

{$REGION 'Campo Filtro'}
        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Grupo';
        campoFiltro.Name := 'Grupo';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Modulo';
        campoFiltro.Name := 'Modulo';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Rotina';
        campoFiltro.Name := 'Rotina';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);
{$ENDREGION}
        result := filtro.Execute;
    finally
        // FreeAndNil(parametro);
        // FreeAndNil(lista);
    end;
end;

function TAcesso.Obter(parametros: TParametro): TAcesso;
var
    Lista: TLista<TAcesso>;
begin
    try
        Lista := Self.Consultar(parametros);

        if Lista.Count = 1 then
        begin
            PreencherObjeto(Lista[0]);
            result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            result := nil;
        end;
    finally
        Lista.Destroy;
    end;
end;






function TAcesso.ObterPermissaoAcesso(permissao: string): TPermissaoAcesso;
var
    item: TPermissaoAcesso;
begin
    result := nil;
    for item in PermissoesAcesso do
    begin
        if item.Permissao
         = permissao then
        begin
            result := item;
            exit;
        end;
    end;


end;

function TAcesso.Obter(ID: string): TAcesso;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;

{$ENDREGION}
{$REGION 'Regras de Negócio'}

procedure TAcesso.PreencherObjeto(Acesso: TAcesso);
begin
    Acesso.CopiarPara(Self);
    FPreenchido := true;
end;

procedure TAcesso.SetCarregou(const Value: boolean);
begin
  FCarregou := Value;
end;

procedure TAcesso.SetDelet(const Value: string);
begin
    FDelet := Value;
end;

procedure TAcesso.SetGrupo(const Value: string);
begin
    FGrupo := Value;
end;

procedure TAcesso.SetModulo(const Value: string);
begin
    FModulo := Value;
end;

procedure TAcesso.SetPermissoesAcesso(const Value: TLista<TPermissaoAcesso>);
begin
  FPermissoesAcesso := Value;
end;

procedure TAcesso.SetRecno(const Value: integer);
begin
    FRecno := Value;
end;

procedure TAcesso.SetRotina(const Value: string);
begin
    FRotina := Value;
end;

procedure TAcesso.SetTipoRotina(const Value: string);
begin
  FTipoRotina := Value;
end;

{$ENDREGION}
{$REGION 'Métodos de Propriedades'}
{$ENDREGION}

end.
