{ *Created by @ReisCodeGenerator* }
unit Biz.Rotina;

interface

uses
    Classes, System.SysUtils, Dialogs, Lib.ClasseBase, Lib.Parametro, Lib.Enumeradores,
    Lib.Persistable, Lib.ResultFilter, Lib.Lista, Dal.ControleDados, Dal.CondicaoConsulta,
    Framework.Interfaces.CRUD, Dal.FabricaSQL, Biz.PermissaoRotina, Biz.Acesso;

type
    TModuloRotina = class;

    [TReferenceTable('SIATD_S05_01')]
    TRotina = class(TClasseBase, ICRUD<TRotina>)
    private

        FTipoRotina: string;
        FRotina: string;
        FDescricao: string;
        FDelet: string;
        FCategoria: string;
        FRecno: integer;
        FAcaoMenu: string;
        FOrdem: integer;
        FPermissoesRotina: Tlista<TPermissaoRotina>;
        FModulosRotina: TLista<TModuloRotina>;
        FModulosRotinaSelecionados: string;
        procedure SetAcaoMenu(const Value: string);
        procedure SetCategoria(const Value: string);
        procedure SetDelet(const Value: string);
        procedure SetDescricao(const Value: string);
        procedure SetOrdem(const Value: integer);
        procedure SetRecno(const Value: integer);
        procedure SetRotina(const Value: string);
        procedure SetTipoRotina(const Value: string);
        procedure SetPermissoesRotina(const Value: Tlista<TPermissaoRotina>);
        procedure SetModulosRotina(const Value: TLista<TModuloRotina>);
        procedure SetModulosRotinaSelecionados(const Value: string);
    public

        class var dao: TControleDados<TLista<TRotina>, TListaDAO<TRotina>>;

        /// <summary>
        /// Metodo que faz a inserção da Rotina
        /// </summary>
        function Inserir: boolean;
        /// <summary>
        /// Metodo que faz a alteração da Rotina
        /// </summary>
        function Alterar: boolean;

        /// <summary>
        /// Métido que faz a Deleção da Rotina
        /// </summary>
        function Excluir: boolean;

        /// <summary>
        /// Método que chama a tela de filtro
        /// </summary>
        /// <param name="tipoOperacao">
        /// Tipo da operação, se é somente filtro, ou seleção de registro
        /// </param>
        function Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="ID">
        /// Chave primária da tabela
        /// </param>
        function Obter(ID: string): TRotina; overload;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Obter(parametros: TParametro): TRotina; overload;

        /// <summary>
        /// Método que retonar uma lista com varios objetos de acordo com parametro passado
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Consultar(parametros: TParametro): TLista<TRotina>;

        /// <summary>
        /// Método que preenche a instância do Objeto
        /// </summary>
        /// <param name="Rotina">
        /// objeto de parametro para preenchimento da instância
        /// </param>
        procedure PreencherObjeto(Rotina: TRotina);


        //rotinas
        function ObterRotinasDeAcesso(grupos, modulo: string): TLista<TRotina>;
        function ObterTodasRotinas: TLista<TRotina>;

        //permissoes rotina
        procedure CarregarPermissoesRotina;
        procedure AdicionarPermissaoRotina(permissaoRotina: TPermissaoRotina);
        procedure DeletarPermissaoRotina(permissaoRotina: TPermissaoRotina);

        //
        procedure CarregarModulosRotina;

        function ObterModuloRotina(modulo: string): TModuloRotina;

        property ModulosRotina: TLista<TModuloRotina> read FModulosRotina write SetModulosRotina;      
        
        property ModulosRotinaSelecionados: string read FModulosRotinaSelecionados write SetModulosRotinaSelecionados;
        property PermissoesRotina: Tlista<TPermissaoRotina> read FPermissoesRotina write SetPermissoesRotina;  

        [TPersistable(fgPersistable, 'S05_ROTINA')]
        [TMaxLenght(30)]
        property Rotina: string read FRotina write SetRotina;

        [TPersistable(fgPersistable, 'S05_CATEGORIA')]
        [TMaxLenght(60)]
        property Categoria: string read FCategoria write SetCategoria;

        [TPersistable(fgPersistable, 'S05_ACT_MENU')]
        [TMaxLenght(30)]
        property AcaoMenu: string read FAcaoMenu write SetAcaoMenu;

        [TPersistable(fgPersistable, 'S05_DESC')]
        [TMaxLenght(60)]
        property Descricao: string read FDescricao write SetDescricao;

        [TPersistable(fgPersistable, 'S05_ORDEM')]
        property Ordem: integer read FOrdem write SetOrdem;

        [TPersistable(fgPersistable, 'D_E_L_E_T_')]
        [TMaxLenght(1)]
        property Delet: string read FDelet write SetDelet;

        [TPersistable(fgUpdateable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

  
        constructor Create;
        destructor Destroy; override;

    end;    


    [TReferenceTable('SIATD_S09_01')]
    TModuloRotina = class(TClasseBase, ICRUD<TModuloRotina>)
    private
        FRotina: string;
        FDelet: string;
        FRecno: integer;
        FModulo: string;
        FPermissoesRotina: TLista<TPermissaoRotina>;
        FAcessosRotina: TLista<TAcesso>;
        FRotina_: TRotina;
        procedure SetDelet(const Value: string);
        procedure SetModulo(const Value: string);
        procedure SetRecno(const Value: integer);
        procedure SetRotina(const Value: string);
        procedure SetPermissoesRotina(const Value: TLista<TPermissaoRotina>);
        procedure SetAcessosRotina(const Value: TLista<TAcesso>);
        procedure SetRotina_(const Value: TRotina);
    public

        class var dao: TControleDados<TLista<TModuloRotina>, TListaDAO<TModuloRotina>>;

        /// <summary>
        /// Metodo que faz a inserção da ModuloRotina
        /// </summary>
        function Inserir: boolean;
        /// <summary>
        /// Metodo que faz a alteração da ModuloRotina
        /// </summary>
        function Alterar: boolean;

        /// <summary>
        /// Métido que faz a Deleção da ModuloRotina
        /// </summary>
        function Excluir: boolean;

        function ExcluirPorRotina(rotina: string):boolean;

        /// <summary>
        /// Método que chama a tela de filtro
        /// </summary>
        /// <param name="tipoOperacao">
        /// Tipo da operação, se é somente filtro, ou seleção de registro
        /// </param>
        function Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="ID">
        /// Chave primária da tabela
        /// </param>
        function Obter(ID: string): TModuloRotina; overload;

        /// <summary>
        /// Método que retorna um objeto preenchido
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Obter(parametros: TParametro): TModuloRotina; overload;

        /// <summary>
        /// Método que retonar uma lista com varios objetos de acordo com parametro passado
        /// </summary>
        /// <param name="parametros">
        /// Parametros para a consulta do objeto a ser preenchido
        /// </param>
        function Consultar(parametros: TParametro): TLista<TModuloRotina>;

        /// <summary>
        /// Método que preenche a instância do Objeto
        /// </summary>
        /// <param name="ModuloRotina">
        /// objeto de parametro para preenchimento da instância
        /// </param>
        procedure PreencherObjeto(ModuloRotina: TModuloRotina);


        procedure CarregarPermissoesRotina;

        [TPersistable(fgPersistable, 'S09_S05_ROTINA')]
        [TMaxLenght(30)]
        property Rotina: string read FRotina write SetRotina;

        property Rotina_: TRotina read FRotina_ write SetRotina_;

        [TPersistable(fgPersistable, 'S09_S08_MODULO')]
        [TMaxLenght(20)]
        property Modulo: string read FModulo write SetModulo;

        [TPersistable(fgPersistable, 'D_E_L_E_T_')]
        [TMaxLenght(1)]
        property Delet: string read FDelet write SetDelet;

        [TPersistable(fgUpdateable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        property PermissoesRotina:TLista<TPermissaoRotina> read FPermissoesRotina write SetPermissoesRotina;



        constructor Create;
        destructor Destroy; override;
    end;

implementation

{ TRotina }

uses Lib.Filter, Lib.Biblioteca, Biz.UsuarioLogado;

{$REGION 'Métodos CRUD'}

function TRotina.Inserir: boolean;
begin
    try
        try
            dao.IniciarTransacao();
            //result :=
            dao.Inserir(Self);
            TPermissaoRotina.dao.SalvarMudancas(Self.PermissoesRotina);
            TModuloRotina.dao.SalvarMudancas(Self.ModulosRotina);
            dao.ConfirmarTransacao();
        except
            on e: exception do
            begin
                dao.ReverterTransacao();
                raise exception.Create('Erro ao inserir Rotina' + #13 + e.Message);
            end;
        end;
    finally
    end;
end;

procedure TRotina.AdicionarPermissaoRotina(permissaoRotina: TPermissaoRotina);
var
    item: TPermissaoRotina;
begin
    for item in FPermissoesRotina do
    begin
        if (item.Permissao = permissaoRotina.Permissao) and (item.TipoManutencao <> Exclusao) then
            raise Exception.Create('já existe esta permissão.');

    end;
    FPermissoesRotina.Add(permissaoRotina);
end;

function TRotina.Alterar: boolean;
begin
    try
        try
            dao.IniciarTransacao();
            result := dao.Alterar(Self);
            TPermissaoRotina.dao.SalvarMudancas(Self.PermissoesRotina);
            TModuloRotina.dao.SalvarMudancas(Self.ModulosRotina);
            dao.ConfirmarTransacao();
        except
            on e: exception do
            begin
                dao.ReverterTransacao();
                raise exception.Create('Erro ao alterar Rotina' + #13 + e.Message);
            end;
        end;
    finally
    end;
end;

function TRotina.Excluir: boolean;
var
    item: TPermissaoRotina;
    moduloRotina: TModuloRotina;
begin
    try
        try
            result := dao.Excluir(Self);

            Self.CarregarPermissoesRotina;
            for item in Self.PermissoesRotina do
                item.Excluir;

            Self.CarregarModulosRotina;
            for moduloRotina in Self.ModulosRotina do
                moduloRotina.Excluir;

            dao.ConfirmarTransacao();
        except
            on e: exception do
            begin
                dao.ReverterTransacao();
                raise exception.Create('Erro ao excluir Rotina' + #13 + e.Message);
            end;
        end;
    finally
    end;

end;

function TRotina.Consultar(parametros: TParametro): TLista<TRotina>;
var
    query: string;
    condicao: TCondicaoConsulta;
begin
    try
        condicao := TCondicaoConsulta.Create(parametros);
        condicao.Adiciona('S05_ROTINA', ccLike, lgAnd);
        condicao.Adiciona('S05_CATEGORIA', ccIgual, lgAnd);
        condicao.Adiciona('S05_ACT_MENU', ccIgual, lgAnd);
        condicao.Adiciona('S05_DESC', ccLike, lgAnd);
        condicao.Adiciona('S05_ORDEM', ccIgual, lgAnd);
        condicao.Adiciona('D_E_L_E_T_', ccIgual, lgAnd);
        condicao.Adiciona('R_E_C_N_O_', ccIgual, lgAnd);

        query := 'SELECT ' + Self.ObterCamposSeparadosPorVirgula(Consulta, []) + ' FROM ' + Self.TabelaReferencia + ' WHERE D_E_L_E_T_ = '''' ' + condicao.ToString(true);

        result := dao.Consultar(query, parametros);
    finally
        condicao.Free;
    end;
end;

constructor TRotina.Create;
begin
    Inherited;
    FPermissoesRotina := TLista<TPermissaoRotina>.Create;
end;

procedure TRotina.DeletarPermissaoRotina(permissaoRotina: TPermissaoRotina);
begin
    Self.PermissoesRotina.Delete(permissaoRotina);
end;

destructor TRotina.Destroy;
begin
    if FPermissoesRotina <> nil then
        FreeAndNil(FPermissoesRotina);
  inherited;
end;

function TRotina.Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TRotina>;
    // parametro : TParametro;
    // lista:TLista<TRotina>
begin
    try
        filtro := TFilter<TRotina>.Create;
        filtro.ScreenName := 'Filtro de Rotina';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'Rotina=S05_ROTINA', 'Rotina');
        filtro.AddIndex(2, 'Categoria=S05_CATEGORIA', 'Categoria');
        filtro.AddIndex(3, 'AcaoMenu=S05_ACT_MENU', 'AcaoMenu');
        filtro.AddIndex(4, 'Descricao=S05_DESC', 'Descricao');
        filtro.AddIndex(6, 'Ordem=S05_ORDEM', 'Ordem');
        // ###Criar os Índices do filtro
        // filtro.AddIndex(99, 'Empresa=S01_EMP, Filial=S01_FILIAL, Descricao=S01_DESC', 'Empresa + Filial + Descrição');

{$REGION 'Campo Filtro'}
        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Rotina';
        campoFiltro.Name := 'Rotina';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Categoria';
        campoFiltro.Name := 'Categoria';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'AcaoMenu';
        campoFiltro.Name := 'AcaoMenu';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Descricao';
        campoFiltro.Name := 'Descricao';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'TipoRotina';
        campoFiltro.Name := 'TipoRotina';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Ordem';
        campoFiltro.Name := 'Ordem';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);
{$ENDREGION}
        result := filtro.Execute;
    finally
        // FreeAndNil(parametro);
        // FreeAndNil(lista);
    end;
end;

function TRotina.Obter(parametros: TParametro): TRotina;
var
    Lista: TLista<TRotina>;
begin
    try
        Lista := Self.Consultar(parametros);

        if Lista.Count = 1 then
        begin
            PreencherObjeto(Lista[0]);
            result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            result := nil;
        end;
    finally
        Lista.Destroy;
    end;
end;

function TRotina.ObterModuloRotina(modulo: string): TModuloRotina;
var
    mr: TModuloRotina;
begin
    result := nil;
    for mr in Self.ModulosRotina do
    begin
        if (mr.Modulo = modulo) and (mr.TipoManutencao <> Exclusao) then
        begin
            result := mr;
            exit;
        end;
    end;
end;

function TRotina.Obter(ID: string): TRotina;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'S05_ROTINA', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;



function TRotina.ObterRotinasDeAcesso(grupos, modulo: string): TLista<TRotina>;
var
    Parametro: TParametro;
    query, tipoRotina: string;
begin
    try
        Parametro := TParametro.Create();
        tipoRotina := Tlib.IfTernario(Tlib.mobile, 'MOBILE', 'DESKTOP');
        Parametro.Add('', 'S20_S09_S08_MODULO', Modulo);
        query := 'SELECT DISTINCT S05.S05_ROTINA, S05.S05_CATEGORIA, S05.S05_ACT_MENU, ' +
          ' S05.S05_DESC, S05.S05_ORDEM, S05.D_E_L_E_T_, S05.R_E_C_N_O_ ' +
          ' FROM '+Self.TabelaReferencia+' AS S05 INNER JOIN ' +
          TAcesso.TabelaReferencia+' AS S20 ON S05.S05_ROTINA = S20.S20_S09_S05_ROTINA ' +
          ' WHERE S05.D_E_L_E_T_ = '''' AND S20.D_E_L_E_T_ = '''' AND S20.S20_S02_GRUPO in (' + grupos +
          ') AND S20.S20_S09_S08_MODULO = :S20_S09_S08_MODULO ORDER BY S05_ORDEM';

        result := dao.Consultar(query, Parametro);
    finally
        if Parametro <> nil then
            FreeAndNil(Parametro);

    end;
end;


procedure TRotina.CarregarModulosRotina;
var
    parametro: TParametro;
    moduloRotina: TModuloRotina;
begin
    try
      moduloRotina := TModuloRotina.Create;
      parametro := TParametro.Create();
      parametro.Add('', 'S09_S05_ROTINA', Rotina);
      FModulosRotina := moduloRotina.Consultar(parametro);
    finally
        freeAndNil(parametro);
        FreeAndNil(moduloRotina);
    end;
end;

procedure TRotina.CarregarPermissoesRotina;
var
    parametro: TParametro;
    permissaoRotina: TPermissaoRotina;
begin
    try
      permissaoRotina := TPermissaoRotina.Create;
      parametro := TParametro.Create();
      parametro.Add('', 'S19_S05_ROTINA', Rotina);
      FPermissoesRotina := permissaoRotina.Consultar(parametro);
    finally
        freeAndNil(parametro);
        FreeAndNil(permissaoRotina);
    end;
end;

function TRotina.ObterTodasRotinas: TLista<TRotina>;
begin

end;




{$ENDREGION}
{$REGION 'Regras de Negócio'}


procedure TRotina.PreencherObjeto(Rotina: TRotina);
begin
    Rotina.CopiarPara(Self);
    FPreenchido := true;
end;

procedure TRotina.SetAcaoMenu(const Value: string);
begin
    FAcaoMenu := Value;
end;

procedure TRotina.SetCategoria(const Value: string);
begin
    FCategoria := Value;
end;

procedure TRotina.SetDelet(const Value: string);
begin
    FDelet := Value;
end;

procedure TRotina.SetDescricao(const Value: string);
begin
    FDescricao := Value;
end;

procedure TRotina.SetModulosRotina(const Value: TLista<TModuloRotina>);
begin
  FModulosRotina := Value;
end;

procedure TRotina.SetModulosRotinaSelecionados(const Value: string);
begin
  FModulosRotinaSelecionados := Value;
end;

procedure TRotina.SetOrdem(const Value: integer);
begin
    FOrdem := Value;
end;

procedure TRotina.SetPermissoesRotina(const Value: Tlista<TPermissaoRotina>);
begin
  FPermissoesRotina := Value;
end;

procedure TRotina.SetRecno(const Value: integer);
begin
    FRecno := Value;
end;

procedure TRotina.SetRotina(const Value: string);
begin
    FRotina := Value;
end;

procedure TRotina.SetTipoRotina(const Value: string);
begin
    FTipoRotina := Value;
end;

{$ENDREGION}
{$REGION 'Métodos de Propriedades'}
{$ENDREGION}



{ TModuloRotina }


{$REGION 'Métodos CRUD'}

function TModuloRotina.Inserir: boolean;
begin
    try
        try
            //result :=
            dao.Inserir(Self);
        except
            on e: exception do
                raise exception.Create('Erro ao inserir ModuloRotina' + #13 + e.Message);
        end;
    finally
    end;
end;

function TModuloRotina.Alterar: boolean;
begin
    try
        try
            result := dao.Alterar(Self);
        except
            on e: exception do
                raise exception.Create('Erro ao alterar ModuloRotina' + #13 + e.Message);
        end;
    finally
    end;
end;

function TModuloRotina.Excluir: boolean;
begin
    try
        try
            result := dao.Excluir(Self);
        except
            on e: exception do
                raise exception.Create('Erro ao excluir ModuloRotina' + #13 + e.Message);
        end;
    finally
    end;

end;

function TModuloRotina.ExcluirPorRotina(rotina: string): boolean;
var
    Parametro: TParametro;
    query: string;
begin
    Parametro := TParametro.Create;
    try
        try
            Parametro.Add('', 'S09_S05_ROTINA', rotina);

            query := 'DELETE FROM '+TModuloRotina.TabelaReferencia+' WHERE S09_S05_ROTINA = :S09_S05_ROTINA';

            dao.Excluir(query, Parametro);
        except
            on e: exception do
                raise exception.Create('Erro ao excluir Modulo da Rotina ' + #13 + e.Message);
        end;
    finally
        FreeAndNil(Parametro);
    end;
end;


procedure TModuloRotina.CarregarPermissoesRotina;
var
    parametro: TParametro;
    permissaoRotina: TPermissaoRotina;
begin
    try
        parametro := TParametro.Create;
        permissaoRotina := TPermissaoRotina.Create;
        parametro.Add('','S19_S05_ROTINA', Self.Rotina);
        FPermissoesRotina := permissaoRotina.Consultar(parametro);
    finally
        if parametro <> nil then
            FreeAndNil(parametro);

        if permissaoRotina <> nil then
            FreeAndNil(permissaoRotina);
    end;

end;

function TModuloRotina.Consultar(parametros: TParametro): TLista<TModuloRotina>;
var
    query: string;
    condicao: TCondicaoConsulta;
begin
    try
        condicao := TCondicaoConsulta.Create(parametros);
        condicao.Adiciona('S09_S05_ROTINA', ccIgual, lgAnd);
        condicao.Adiciona('S09_S08_MODULO', ccIgual, lgAnd);
        condicao.Adiciona('D_E_L_E_T_', ccIgual, lgAnd);
        condicao.Adiciona('R_E_C_N_O_', ccIgual, lgAnd);

        query := 'SELECT ' + Self.ObterCamposSeparadosPorVirgula(Consulta, []) + ' FROM ' + Self.TabelaReferencia + ' WHERE D_E_L_E_T_ = '''' ' +
          condicao.ToString(true);

        result := dao.Consultar(query, parametros);
    finally
        condicao.Free;
    end;
end;

constructor TModuloRotina.Create;
begin
    FPermissoesRotina := TLista<TPermissaoRotina>.Create;
    FRotina_ := TRotina.create;
end;

destructor TModuloRotina.Destroy;
begin
    if FPermissoesRotina <> nil then
        FreeAndNil(FPermissoesRotina);

    FreeAndNil(FRotina_);

    inherited;
end;

function TModuloRotina.Listar(tipoOperacao: TOparationTypes; multselect: boolean): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TModuloRotina>;
    // parametro : TParametro;
    // lista:TLista<TModuloRotina>
begin
    try
        filtro := TFilter<TModuloRotina>.Create;
        filtro.ScreenName := 'Filtro de ModuloRotina';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'Rotina=S09_S05_ROTINA', 'Rotina');
        filtro.AddIndex(2, 'Modulo=S09_S08_MODULO', 'Modulo');
        // ###Criar os Índices do filtro
        // filtro.AddIndex(99, 'Empresa=S01_EMP, Filial=S01_FILIAL, Descricao=S01_DESC', 'Empresa + Filial + Descrição');

{$REGION 'Campo Filtro'}
        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Rotina';
        campoFiltro.Name := 'Rotina';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Modulo';
        campoFiltro.Name := 'Modulo';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);
{$ENDREGION}
        result := filtro.Execute;
    finally
        // FreeAndNil(parametro);
        // FreeAndNil(lista);
    end;
end;

function TModuloRotina.Obter(parametros: TParametro): TModuloRotina;
var
    Lista: TLista<TModuloRotina>;
begin
    try
        Lista := Self.Consultar(parametros);

        if Lista.Count = 1 then
        begin
            PreencherObjeto(Lista[0]);
            result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            result := nil;
        end;
    finally
        Lista.Destroy;
    end;
end;

function TModuloRotina.Obter(ID: string): TModuloRotina;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;

{$ENDREGION}
{$REGION 'Regras de Negócio'}

procedure TModuloRotina.PreencherObjeto(ModuloRotina: TModuloRotina);
begin
    ModuloRotina.CopiarPara(Self);
    FPreenchido := true;
end;


procedure TModuloRotina.SetAcessosRotina(const Value: TLista<TAcesso>);
begin
  FAcessosRotina := Value;
end;

procedure TModuloRotina.SetDelet(const Value: string);
begin
    FDelet := Value;
end;

procedure TModuloRotina.SetModulo(const Value: string);
begin
    FModulo := Value;
end;

procedure TModuloRotina.SetPermissoesRotina(const Value: TLista<TPermissaoRotina>);
begin
  FPermissoesRotina := Value;
end;

procedure TModuloRotina.SetRecno(const Value: integer);
begin
    FRecno := Value;
end;

procedure TModuloRotina.SetRotina(const Value: string);
begin
    FRotina := Value;
end;

procedure TModuloRotina.SetRotina_(const Value: TRotina);
begin
  FRotina_ := Value;
end;

{$ENDREGION}
{$REGION 'Métodos de Propriedades'}
{$ENDREGION}





end.
