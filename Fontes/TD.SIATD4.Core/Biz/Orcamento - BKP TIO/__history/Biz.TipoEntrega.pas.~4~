unit Biz.TipoEntrega;

interface

uses
    Classes, System.SysUtils, Dialogs, Lib.Base, Lib.Parametro, Lib.Enumeradores,
    Lib.Persistable, Lib.Lista, Lib.ResultFilter, Lib.Interfaces.CRUD,  Lib.Interfaces.CRUDGenerico;

type
    TTipoEntrega = class(TBase, ICRUD<TTipoEntrega>, ICRUDGenerico)
    private
        FTipoOrcamento: string;
        FTipoEntrega: string;
        FReserva: string;
        FLocalEntrega: string;
        FDescricao: string;
        FCodigo: integer;
        FCodigoFilial: string;
        FMarcar: string;
        FLocalNota: string;
        procedure SetCodigo(const Value: integer);
        procedure SetCodigoFilial(const Value: string);
        procedure SetDescricao(const Value: string);
        procedure SetLocalEntrega(const Value: string);
        procedure SetMarcar(const Value: string);
        procedure SetReserva(const Value: string);
        procedure SetTipoEntrega(const Value: string);
        procedure SetTipoOrcamento(const Value: string);
        procedure SetLocalNota(const Value: string);
    public
        ///	<summary>
        ///	  Metodo que faz a inserção da TipoEntrega
        ///	</summary>
        function Inserir: integer;
        ///	<summary>
        ///	  Metodo que faz a alteração da TipoEntrega
        ///	</summary>
        function Alterar: integer;

        ///	<summary>
        ///	  Métido que faz a Deleção da TipoEntrega
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave  primária da tabela
        ///	</param>
        function Deletar: integer;

        ///	<summary>
        ///	  Método que chama a tela de filtro
        ///	</summary>
        ///	<param name="tipoOperacao">
        ///	  Tipo da operação, se é somente filtro, ou seleção de registro
        ///	</param>
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;


        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave primária da tabela
        ///	</param>
        function Obter(ID: string): TTipoEntrega; overload;

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Obter(parametros:TParametro): TTipoEntrega; overload;


        function Consultar(parametros: TParametro): TLista<TTipoEntrega>;



        ///	<summary>
        ///	  Método que preenche a instância do Objeto
        ///	</summary>
        ///	<param name="TipoEntrega">
        ///	  objeto de parametro para preenchimento da instância
        ///	</param>
        procedure PreencherObjeto(TipoEntrega: TTipoEntrega);

        [TPersistable(fgPersistable, 'Z07_FILIAL')]
        property CodigoFilial: string read FCodigoFilial write SetCodigoFilial;

        [TPersistable(fgPersistable, 'Z07_ENTREGA')]
        property TipoEntrega: string read FTipoEntrega write SetTipoEntrega;

        [TPersistable(fgPersistable, 'Z07_ORCLIB')]
        property TipoOrcamento: string read FTipoOrcamento write SetTipoOrcamento;

        [TPersistable(fgPersistable, 'Z07_DESCRI')]
        property Descricao: string read FDescricao write SetDescricao;

        [TPersistable(fgPersistable, 'Z07_RESERVA')]
        property Reserva: string read FReserva write SetReserva;

        [TPersistable(fgPersistable, 'Z07_MARCAR')]
        property Marcar: string read FMarcar write SetMarcar;

        [TPersistable(fgPersistable, 'Z07_LOCAL')]
        property LocalEntrega: string read FLocalEntrega write SetLocalEntrega;

        [TPersistable(fgPersistable, 'Z07_RECNO')]
        property  Codigo: integer read FCodigo write SetCodigo;

        [TPersistable(fgPersistable, 'Z07_NFCD')]
        property LocalNota: string read FLocalNota write SetLocalNota;


    end;

implementation


{ TTipoEntrega }

uses Lib.Filter, Lib.Biblioteca;

{$REGION 'Métodos CRUD'}

function TTipoEntrega.Inserir: integer;
begin
     //BaseLib.ExecutaTarefa('InserirTipoEntrega', 'TTipoEntrega', ObjetoParaParametros(acInsercao));
    //###Validar retorno da função
    result := 0;
end;

function TTipoEntrega.Alterar: integer;
begin
  //  BaseLib.ExecutaTarefa('AlterarTipoEntrega', 'TTipoEntrega' , ObjetoParaParametros(acAlteracao));
    //###Validar retorno da função
    result := 0;
end;

function TTipoEntrega.Consultar(parametros: TParametro): TLista<TTipoEntrega>;
begin

end;

function TTipoEntrega.Deletar: integer;
begin
end;

function TTipoEntrega.Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;
var
    campoFiltro:TFieldFilter;
    filtro : TFilter<TTipoEntrega>;
    //parametro : TParametro;
    //lista:TLista<TTipoEntrega>
begin
    filtro := TFilter<TTipoEntrega>.Create;
    filtro.ScreenName := 'Filtro de TipoEntrega';
    filtro.OperationType := tipoOperacao;
    filtro.MultiSelect := multselect;
    filtro.Task := 'ConsultarTipoEntrega';
    //###Criar os Índices do filtro

    {$REGION 'Campo Filtro'}

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := 'CodigoFilial';
    campoFiltro.Name := 'CodigoFilial';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := 'TipoEntrega';
    campoFiltro.Name := 'TipoEntrega';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := 'TipoOrcamento';
    campoFiltro.Name := 'TipoOrcamento';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := 'Descricao';
    campoFiltro.Name := 'Descricao';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := 'Reserva';
    campoFiltro.Name := 'Reserva';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := 'Marcar';
    campoFiltro.Name := 'Marcar';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := 'LocalEntrega';
    campoFiltro.Name := 'LocalEntrega';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    campoFiltro := TFieldFilter.Create;
    campoFiltro.Description := ' Codigo';
    campoFiltro.Name := ' Codigo';
    campoFiltro.MaskTypes := mtNone;
    campoFiltro.GridSize := 100;
    campoFiltro.FieldType := fdNormal;
    filtro.AddField(campoFiltro);

    {$ENDREGION}

    result := filtro.Execute(filtro);
end;

function TTipoEntrega.Obter(parametros: TParametro): TTipoEntrega;
var
  lista: TLista<TTipoEntrega>;
begin
    try
   //     lista := BaseLib.XmlToObject<TTipoEntrega>(BaseLib.ExecutaTarefa('ConsultarTipoEntrega', 'TTipoEntrega', parametros));

        if lista.Count = 1 then
        begin
           PreencherObjeto(lista[0]);
           Result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            Result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

function TTipoEntrega.Obter(ID: string): TTIpoEntrega;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;


{$ENDREGION}

{$REGION 'Regras de Negócio'}

procedure TTipoEntrega.PreencherObjeto(TipoEntrega: TTipoEntrega);
begin
    TipoEntrega.CopiarPara(Self);
    FPreenchido := true;

end;





{$ENDREGION}

{$REGION 'Métodos de Propriedades'}

procedure TTipoEntrega.SetCodigo(const Value: integer);
begin
  FCodigo := Value;
end;

procedure TTipoEntrega.SetCodigoFilial(const Value: string);
begin
  FCodigoFilial := Value;
end;

procedure TTipoEntrega.SetDescricao(const Value: string);
begin
  FDescricao := Value;
end;

procedure TTipoEntrega.SetLocalEntrega(const Value: string);
begin
  FLocalEntrega := Value;
end;

procedure TTipoEntrega.SetLocalNota(const Value: string);
begin
  FLocalNota := Value;
end;

procedure TTipoEntrega.SetMarcar(const Value: string);
begin
  FMarcar := Value;
end;

procedure TTipoEntrega.SetReserva(const Value: string);
begin
  FReserva := Value;
end;

procedure TTipoEntrega.SetTipoEntrega(const Value: string);
begin
  FTipoEntrega := Value;
end;

procedure TTipoEntrega.SetTipoOrcamento(const Value: string);
begin
  FTipoOrcamento := Value;
end;


{$ENDREGION}

end.

