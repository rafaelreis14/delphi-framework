unit ClsOrcamentoPagamento;

interface

uses
    Classes, System.SysUtils, Dialogs, ClsBase, ClsParametro, ClsEnumeradores,
    ClsPersistable, ClsLib, ClsResultFilter, System.StrUtils, ClsCliente,
    ClsMaxLenght, ClsAdminsitradora;

type
    TFormaPagamento = (fpAVista = 1, fpCartaoDebito = 2, fpCartaoCredito = 3, fpCheque = 4, fpDuplicata = 5, fpFinanciamento = 6,
        fpCompesacaoCreditoTDC = 7, fpExclusivoTDE = 8, fpPrivativoTDP = 9);

    TTipoGeracaoParcela = (tgNenhum = -1, tgVencimento = 0, tgIntervalo = 1);

    TOrcamentoPagamento = class(TBase)
    private
        FObservacao: string;
        FRG: string;
        FFilial: string;
        FValorParcela: double;
        FNomeCliente: string;
        FFormaPagto: string;
        FAdministradora: string;
        FVencimento: string;
        FNumero: string;
        FRecno: integer;
        FCartID: string;
        FConta: string;
        FDelete: string;
        FTipoCheque: string;
        FAgenciaBanco: string;
        FCgc: string;
        FTelefone: string;
        FParcela: string;
        FNumeroDocumento: string;
        FCliente: TCliente;
        FCodigoCliente: integer;
        FFormaPagamento: TFormaPagamento;

        FExecutouTef: boolean;
        FNSUTef: string;
        FUsuario: string;
        FAdministradora_: TAdministradora;
        FValorParcelaDedudizo: double;
        FNSUHost: string;
        FAutorizacao: string;
        procedure SetAdministradora(const Value: string);
        procedure SetAgenciaBanco(const Value: string);
        procedure SetCartID(const Value: string);
        procedure SetCgc(const Value: string);
        procedure SetConta(const Value: string);
        procedure SetDelete(const Value: string);
        procedure SetFilial(const Value: string);
        procedure SetFormaPagto(const Value: string);
        procedure SetNomeCliente(const Value: string);
        procedure SetNumero(const Value: string);
        procedure SetNumeroDocumento(const Value: string);
        procedure SetObservacao(const Value: string);
        procedure SetParcela(const Value: string);
        procedure SetRecno(const Value: integer);
        procedure SetRG(const Value: string);
        procedure SetTelefone(const Value: string);
        procedure SetTipoCheque(const Value: string);
        procedure SetValorParcela(const Value: double);
        procedure SetVencimento(const Value: string);
        function GetFormaPagamento: TFormaPagamento;
        function ObterDescricaoTipoCheque: string;
        function GetFormaPagto: string;
        procedure SetCliente(const Value: TCliente);
        procedure SetCodigoCliente(const Value: integer);
        procedure SetFormaPagamento(const Value: TFormaPagamento);
        procedure SetExecutouTef(const Value: boolean);
        procedure SetNSUTef(const Value: string);
        procedure SetUsuario(const Value: string);
        procedure SetAdministradora_(const Value: TAdministradora);
        procedure SetValorParcelaDedudizo(const Value: double);
        procedure SetNSUHost(const Value: string);
        procedure SetAutorizacao(const Value: string);

    public
        function Listar(tipoOperacao: TOparationTypes): TResultFilter; override;
        function Obter(ID: string): TObject; overload; override;
        function Obter(parametros: TParametro): TObject; overload;
        procedure PopularObjeto(OrcamentoPagamento: TOrcamentoPagamento);

        /// <summary>
        /// Retorna valor correspondente da parcela
        /// </summary>
        class function ObtemValorParcela(i: integer): string; deprecated; // não esta mais em uso;

        /// <summary>
        /// Converte de String para TformaPagamento
        /// </summary>
        class function StringParaFormaPagamento(formaPgto: string): TFormaPagamento;

        /// <summary>
        /// Converte de TformaPagamento para String
        /// </summary>
        class function FormaPagamentoParaString(formaPgto: TFormaPagamento): string;

        /// <summary>
        /// Obtem a descricao extendida da forma de pagamento
        /// </summary>
        function ObtemDescricaoExtendidaFormaPagamento: string;

        /// <summary>
        /// Verifica igualdade da condicao de pagamento passada por parametro
        /// </summary>
        function VerificarIgualdadeCondicaoPagamento(condicaoPagto: TOrcamentoPagamento): boolean;

        [TPersistable(fgPersistable, 'Z9_FILIAL')]
        property Filial: string read FFilial write SetFilial;

        [TPersistable(fgPersistable, 'Z9_NUM')]
        property Numero: string read FNumero write SetNumero;

        [TPersistable(fgPersistable, 'Z9_DATA')]
        property Vencimento: string read FVencimento write SetVencimento;

        [TPersistable(fgPersistable, 'Z9_VALOR')]
        property ValorParcela: double read FValorParcela write SetValorParcela;

        /// <summary>
        /// Este campo não existe na tabela, mas e persistable, por que é
        /// inserido no SE1010
        /// </summary>
        [TPersistable(fgPersistable, 'Z9_VALORDEDUZIDO')]
        property ValorParcelaDedudizo: double read FValorParcelaDedudizo write SetValorParcelaDedudizo;

        [TPersistable(fgPersistable, 'Z9_FORMA')]
        property FormaPagamento_: string read GetFormaPagto write SetFormaPagto;

        property FormaPagamento: TFormaPagamento read GetFormaPagamento write SetFormaPagamento;

        [TPersistable(fgPersistable, 'Z9_ADMINIS')]
        [TMaxLenght(20)]
        property Administradora: string read FAdministradora write SetAdministradora;

        property Administradora_: TAdministradora read FAdministradora_ write SetAdministradora_;

        [TPersistable(fgPersistable, 'Z9_NUMCART')]
        property NumeroDocumento: string read FNumeroDocumento write SetNumeroDocumento;

        [TPersistable(fgPersistable, 'Z9_AGENCIA')]
        property AgenciaBanco: string read FAgenciaBanco write SetAgenciaBanco;

        [TPersistable(fgPersistable, 'Z9_CONTA')]
        property Conta: string read FConta write SetConta;

        [TPersistable(fgPersistable, 'Z9_RG')]
        property RG: string read FRG write SetRG;

        [TPersistable(fgPersistable, 'Z9_TELEFON')]
        property Telefone: string read FTelefone write SetTelefone;

        [TPersistable(fgPersistable, 'Z9_OBS')]
        property Observacao: string read FObservacao write SetObservacao;

        /// <summary>
        /// Se é cheque de terceceiro ou próprio
        /// </summary>
        /// <value>
        /// T = Terceiro ou F = Próprio
        /// </value>
        [TPersistable(fgPersistable, 'Z9_TERCEIR')]
        property TipoCheque: string read FTipoCheque write SetTipoCheque;

        property TipoCheque_: string read ObterDescricaoTipoCheque;

        [TPersistable(fgPersistable, 'Z9_XNUMSEQ')]
        property Parcela: string read FParcela write SetParcela;

        [TPersistable(fgPersistable, 'Z9_CGC')]
        property Cgc: string read FCgc write SetCgc;

        [TPersistable(fgPersistable, 'Z9_NOMECLI')]
        [TMaxLenght(40)]
        property NomeCliente: string read FNomeCliente write SetNomeCliente;

        property CodigoCliente: integer read FCodigoCliente write SetCodigoCliente;

        property Cliente: TCliente read FCliente write SetCliente;

        [TPersistable(fgPersistable, 'Z9_CARTID')]
        property SequenciamentoCartao: string read FCartID write SetCartID;

        /// <summary>
        /// Propriedade que guarda o númedo de identificação do TEF, e
        /// servirá pra fazer a conciliação do banco.
        /// </summary>
        [TPersistable(fgPersistable, 'Z9_NSUTD')]
        property NSUTef: string read FNSUTef write SetNSUTef;

        [TPersistable(fgPersistable, 'Z9_DOCTEF')]
        property NSUHost: string read FNSUHost write SetNSUHost;

        [TPersistable(fgPersistable, 'Z9_AUTORIZ')]
        property Autorizacao: string read FAutorizacao write SetAutorizacao;

        [TPersistable(fgPersistable, 'Z9_USERID')]
        property Usuario: string read FUsuario write SetUsuario;

        [TPersistable(fgUpdateable, 'D_E_L_E_T_')]
        property Delete: string read FDelete write SetDelete;

        [TPersistable(fgPersistable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        /// <summary>
        /// Faz o controle se esta condição já executou o TEF
        /// </summary>
        property ExecutouTef: boolean read FExecutouTef write SetExecutouTef;

        constructor Create;
        destructor Destroy; override;

    end;

implementation

{ TOrcamentoPagamento }

{$REGION 'Métodos CRUD'}

uses ClsFilter, ClsLista, ClsFieldFilter;

class function TOrcamentoPagamento.FormaPagamentoParaString(formaPgto: TFormaPagamento): string;
begin
    case integer(formaPgto) of
        1:
            Result := 'R$';
        2:
            Result := 'CD';
        3:
            Result := 'CC';
        4:
            Result := 'CH';
        5:
            Result := 'DP';
        6:
            Result := 'FI';
        7:
            Result := 'TDC';
        8:
            Result := 'TDE';
        9:
            Result := 'TDP';
    end;

end;

function TOrcamentoPagamento.GetFormaPagamento: TFormaPagamento;
begin
    // if (FormaPagamento_ <> EmptyStr) then
    Result := StringParaFormaPagamento(FormaPagamento_);
end;

function TOrcamentoPagamento.GetFormaPagto: string;
begin
    // if (FFormaPagto = EmptyStr) then
    //
    // result := FormaPagamentoParaString(FormaPagamento)
    // else
    Result := FFormaPagto;
end;

function TOrcamentoPagamento.Listar(tipoOperacao: TOparationTypes): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TOrcamentoPagamento>;
    // parametro : TParametro;
    // lista:TLista<TOrcamentoPagamento>
begin
    inherited;
    try
        filtro := TFilter<TOrcamentoPagamento>.Create;
        filtro.ScreenName := 'Filtro de OrcamentoPagamento';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := true;
        filtro.Task := 'ConsultarOrcamentoPagamento';
        // ###Criar os Índices do filtro

{$REGION 'Campos de Filtro'}
        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Filial';
        campoFiltro.Name := 'Filial';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Numero';
        campoFiltro.Name := 'Numero';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Vencimento';
        campoFiltro.Name := 'Vencimento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'ValorParcela';
        campoFiltro.Name := 'ValorParcela';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'FormaPagto';
        campoFiltro.Name := 'FormaPagto';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Administradora';
        campoFiltro.Name := 'Administradora';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'NumeroDocumento';
        campoFiltro.Name := 'NumeroDocumento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'AgenciaBanco';
        campoFiltro.Name := 'AgenciaBanco';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Conta';
        campoFiltro.Name := 'Conta';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'RG';
        campoFiltro.Name := 'RG';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Telefone';
        campoFiltro.Name := 'Telefone';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Observacao';
        campoFiltro.Name := 'Observacao';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'TipoCheque';
        campoFiltro.Name := 'TipoCheque';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := '';
        campoFiltro.Name := '';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := '';
        campoFiltro.Name := '';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := '';
        campoFiltro.Name := '';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := '';
        campoFiltro.Name := '';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Delete ';
        campoFiltro.Name := 'Delete ';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Recno';
        campoFiltro.Name := 'Recno';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);
{$ENDREGION}
        Result := filtro.Execute;
    finally
        // FreeAndNil(parametro);
        // lista.Destroy;
    end;
end;

constructor TOrcamentoPagamento.Create;
begin
    FAdministradora_ := TAdministradora.Create;
end;

destructor TOrcamentoPagamento.Destroy;
begin
    if FAdministradora_ <> nil then
        FreeAndNil(FAdministradora_);

    inherited;
end;

function TOrcamentoPagamento.ObtemDescricaoExtendidaFormaPagamento: string;
begin
    case AnsiIndexStr(Self.FormaPagamento_, ['R$', 'CD', 'CC', 'CH', 'DP', 'FI', 'TDC', 'TDE', 'TDP']) of
        0:
            Result := 'A Vista';
        1:
            Result := 'Cartao Debito';
        2:
            Result := 'Cartao Credito';
        3:
            Result := 'Cheque';
        4:
            Result := 'Duplicata';
        5:
            Result := 'Financiado';
        6:
            Result := 'Todimo Comprescao de Credito';
        7:
            Result := 'Todimo Exclusivo';
        8:
            Result := 'Todimo Privativo';
    end;
end;

class function TOrcamentoPagamento.ObtemValorParcela(i: integer): string;
const
    aParcelas: array [0 .. 24] of Char = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'Y', 'W', 'Z');
begin
    Result := aParcelas[i];
end;

function TOrcamentoPagamento.Obter(parametros: TParametro): TObject;
var
    lista: TLista<TOrcamentoPagamento>;
begin
    try
        lista := BaseLib.XmlToObject<TOrcamentoPagamento>(BaseLib.ExecutaTarefa('ConsultaOrcamentoPagamento', 'TOrcamentoPagamento', parametros));

        if lista.Count = 1 then
        begin
            PopularObjeto(lista[0]);
            Result := Self;
        end
        else
        begin
            MessageDlg('Nenhum registro encontrado.', mtError, [mbOk], 0);
            Result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

function TOrcamentoPagamento.ObterDescricaoTipoCheque: string;
begin
    if FTipoCheque = 'F' then
        Result := 'Próprio'
    else if FTipoCheque = 'T' then
        Result := 'Terceiro';
end;

function TOrcamentoPagamento.Obter(ID: string): TObject;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'COLOCAR_CAMPO_ID_AQUI', ID);
        Result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;

{$ENDREGION}
{$REGION 'Regras de Negócio'}

procedure TOrcamentoPagamento.PopularObjeto(OrcamentoPagamento: TOrcamentoPagamento);
begin
    OrcamentoPagamento.copiarPara(Self);
    FPreenchido := true;
end;

{$ENDREGION}
{$REGION 'Métodos de Propriedades'}

procedure TOrcamentoPagamento.SetAdministradora(const Value: string);
begin
    FAdministradora := Value;
end;

procedure TOrcamentoPagamento.SetAdministradora_(const Value: TAdministradora);
begin
    FAdministradora_ := Value;
end;

procedure TOrcamentoPagamento.SetAgenciaBanco(const Value: string);
begin
    FAgenciaBanco := Value;
end;

procedure TOrcamentoPagamento.SetAutorizacao(const Value: string);
begin
    FAutorizacao := Value;
end;

procedure TOrcamentoPagamento.SetCartID(const Value: string);
begin
    FCartID := Value;
end;

procedure TOrcamentoPagamento.SetCgc(const Value: string);
begin
    FCgc := Value;
end;

procedure TOrcamentoPagamento.SetCliente(const Value: TCliente);
begin
    FCliente := Value;
end;

procedure TOrcamentoPagamento.SetCodigoCliente(const Value: integer);
begin
    FCodigoCliente := Value;
end;

procedure TOrcamentoPagamento.SetConta(const Value: string);
begin
    FConta := Value;
end;

procedure TOrcamentoPagamento.SetDelete(const Value: string);
begin
    FDelete := Value;
end;

procedure TOrcamentoPagamento.SetExecutouTef(const Value: boolean);
begin
    FExecutouTef := Value;
end;

procedure TOrcamentoPagamento.SetFilial(const Value: string);
begin
    FFilial := Value;
end;

procedure TOrcamentoPagamento.SetFormaPagamento(const Value: TFormaPagamento);
begin
    FFormaPagamento := Value;
end;

procedure TOrcamentoPagamento.SetFormaPagto(const Value: string);
begin
    FFormaPagto := Value;
end;

procedure TOrcamentoPagamento.SetNomeCliente(const Value: string);
begin
    FNomeCliente := Value;
end;

procedure TOrcamentoPagamento.SetNSUHost(const Value: string);
begin
    FNSUHost := Value;
end;

procedure TOrcamentoPagamento.SetNSUTef(const Value: string);
begin
    FNSUTef := Value;
end;

procedure TOrcamentoPagamento.SetNumero(const Value: string);
begin
    FNumero := Value;
end;

procedure TOrcamentoPagamento.SetNumeroDocumento(const Value: string);
begin
    FNumeroDocumento := Value;
end;

procedure TOrcamentoPagamento.SetObservacao(const Value: string);
begin
    FObservacao := Value;
end;

procedure TOrcamentoPagamento.SetParcela(const Value: string);
begin
    FParcela := Value;
end;

procedure TOrcamentoPagamento.SetRecno(const Value: integer);
begin
    FRecno := Value;
end;

procedure TOrcamentoPagamento.SetRG(const Value: string);
begin
    FRG := Value;
end;

procedure TOrcamentoPagamento.SetTelefone(const Value: string);
begin
    FTelefone := Value;
end;

procedure TOrcamentoPagamento.SetTipoCheque(const Value: string);
begin
    FTipoCheque := Value;
end;

procedure TOrcamentoPagamento.SetUsuario(const Value: string);
begin
    FUsuario := Value;
end;

procedure TOrcamentoPagamento.SetValorParcela(const Value: double);
begin
    FValorParcela := Value;
end;

procedure TOrcamentoPagamento.SetValorParcelaDedudizo(const Value: double);
begin
    FValorParcelaDedudizo := Value;
end;

procedure TOrcamentoPagamento.SetVencimento(const Value: string);
begin
    FVencimento := Value;
end;

class function TOrcamentoPagamento.StringParaFormaPagamento(formaPgto: string): TFormaPagamento;
begin
    case AnsiIndexStr(formaPgto, ['R$', 'CD', 'CC', 'CH', 'DP', 'FI', 'TDC', 'TDE', 'TDP']) of
        0:
            Result := fpAVista;
        1:
            Result := fpCartaoDebito;
        2:
            Result := fpCartaoCredito;
        3:
            Result := fpCheque;
        4:
            Result := fpDuplicata;
        5:
            Result := fpFinanciamento;
        6:
            Result := fpCompesacaoCreditoTDC;
        7:
            Result := fpExclusivoTDE;
        8:
            Result := fpPrivativoTDP;
    end;
end;

function TOrcamentoPagamento.VerificarIgualdadeCondicaoPagamento(condicaoPagto: TOrcamentoPagamento): boolean;
begin
    Result := false;
    if condicaoPagto = nil then
        exit;

    if (Self.FormaPagamento = condicaoPagto.FormaPagamento) and (Self.Administradora = condicaoPagto.Administradora) and
        (Self.SequenciamentoCartao = condicaoPagto.SequenciamentoCartao) then
        Result := true;

end;

{$ENDREGION}

end.
