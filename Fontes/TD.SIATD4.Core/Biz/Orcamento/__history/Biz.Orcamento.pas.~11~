{*Created by @ReisCodeGenerator*}
unit Biz.Orcamento;

interface

uses
    Classes, System.SysUtils, Dialogs, Lib.ClasseBase, Lib.Parametro, Lib.Enumeradores,
    Lib.Persistable, Lib.ResultFilter, Lib.Lista, Dal.ControleDados, Dal.CondicaoConsulta,
  	Framework.Interfaces.CRUD, Dal.FabricaSQL;

type
    [TReferenceTable('SZ3010')]
	TOrcamento = class(TClasseBase, ICRUD<TOrcamento>)
	private
        FCodigoFilial: string;
        FNumeroOrcamento: string;
        FCodigoVendedor: string;
        FNomeVendedor: string;
        FCodigoCliente: string;
        FStatusOrcamento: string;
        FDataEmissao: string;
        FTipoCliente: string;
        FValorTotal: double;
        FValorDesconto: double;
        FValorLiquido: double;
        FDataValidade: string;
        FValorBruto: double;
        FValorMercadoria: double;
        FPercetualDesconto: double;
        FCodigoCondicaoPagamento: string;
        FCodigoLojaCliente: string;
        FHora: string;
        FObservacao1: string;
        FObservacao2: string;
        FDataCadastro: string;
        FCodigoTransportadora: string;
        FCodigoLojaTransportadora: string;
        FTipoDoFrete: string;
        FBairroEntrega: string;
        FCepEntrega: string;
        FMunicipioEntrega: string;
        FUFEntrega: string;
        FValorDespesa: double;
        FPesoLiquido: double;
        FPesoBruto: double;
        FVolume: double;
        FEspecie: string;
        FPlaca: string;
        FTipoVenda: string;
        FNumeroPedidoEcommerce: string;
        FNomeCliente: string;
        FDelete: string;
        FRecno: integer;
        FRecnoDel: integer;
        FVersaoSistema: string;
        FCodigoBairroTOTVS: string;
        procedure SetCodigoFilial(const Value: string);
        procedure SetNumeroOrcamento(const Value: string);
        procedure SetCodigoVendedor(const Value: string);
        procedure SetNomeVendedor(const Value: string);
        procedure SetCodigoCliente(const Value: string);
        procedure SetStatusOrcamento(const Value: string);
        procedure SetDataEmissao(const Value: string);
        procedure SetTipoCliente(const Value: string);
        procedure SetValorTotal(const Value: double);
        procedure SetValorDesconto(const Value: double);
        procedure SetValorLiquido(const Value: double);
        procedure SetDataValidade(const Value: string);
        procedure SetValorBruto(const Value: double);
        procedure SetValorMercadoria(const Value: double);
        procedure SetPercetualDesconto(const Value: double);
        procedure SetCodigoCondicaoPagamento(const Value: string);
        procedure SetCodigoLojaCliente(const Value: string);
        procedure SetHora(const Value: string);
        procedure SetObservacao1(const Value: string);
        procedure SetObservacao2(const Value: string);
        procedure SetDataCadastro(const Value: string);
        procedure SetCodigoTransportadora(const Value: string);
        procedure SetCodigoLojaTransportadora(const Value: string);
        procedure SetTipoDoFrete(const Value: string);
        procedure SetBairroEntrega(const Value: string);
        procedure SetCepEntrega(const Value: string);
        procedure SetMunicipioEntrega(const Value: string);
        procedure SetUFEntrega(const Value: string);
        procedure SetValorDespesa(const Value: double);
        procedure SetPesoLiquido(const Value: double);
        procedure SetPesoBruto(const Value: double);
        procedure SetVolume(const Value: double);
        procedure SetEspecie(const Value: string);
        procedure SetPlaca(const Value: string);
        procedure SetTipoVenda(const Value: string);
        procedure SetNumeroPedidoEcommerce(const Value: string);
        procedure SetNomeCliente(const Value: string);
        procedure SetDelete(const Value: string);
        procedure SetRecno(const Value: integer);
        procedure SetRecnoDel(const Value: integer);
        procedure SetVersaoSistema(const Value: string);
        procedure SetCodigoBairroTOTVS(const Value: string);


    public
        class var dao: TControleDados<TLista<TOrcamento>,TListaDAO<TOrcamento>>;

        ///	<summary>
        ///	  Metodo que faz a inserção da Orcamento
        ///	</summary>
        function Inserir: boolean; 
        ///	<summary>
        ///	  Metodo que faz a alteração da Orcamento
        ///	</summary>
        function Alterar: boolean;

        ///	<summary>
        ///	  Métido que faz a Deleção da Orcamento
        ///	</summary>
        function Excluir: boolean;

        ///	<summary>
        ///	  Método que chama a tela de filtro
        ///	</summary>
        ///	<param name="tipoOperacao">
        ///	  Tipo da operação, se é somente filtro, ou seleção de registro
        ///	</param>
        function Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter; 


        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave primária da tabela
        ///	</param>
        function Obter(ID: string): TOrcamento; overload; 

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Obter(parametros:TParametro): TOrcamento; overload;


        ///	<summary>
        ///	  Método que retonar uma lista com varios objetos de acordo com parametro passado
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Consultar(parametros:TParametro): TLista<TOrcamento>; 


        ///	<summary>
        ///	  Método que preenche a instância do Objeto
        ///	</summary>
        ///	<param name="Orcamento">
        ///	  objeto de parametro para preenchimento da instância
        ///	</param>
        procedure PreencherObjeto(Orcamento: TOrcamento);

        [TPersistable(fgPersistable, 'Z3_FILIAL')]
        [TMaxLenght(2)]
        property CodigoFilial: string read FCodigoFilial write SetCodigoFilial;

        [TPersistable(fgPersistable, 'Z3_NUM')]
        [TMaxLenght(6)]
        property NumeroOrcamento: string read FNumeroOrcamento write SetNumeroOrcamento;

        [TPersistable(fgPersistable, 'Z3_VEND')]
        [TMaxLenght(6)]
        property CodigoVendedor: string read FCodigoVendedor write SetCodigoVendedor;

        [TPersistable(fgPersistable, 'Z3_NOMVDO')]
        [TMaxLenght(15)]
        property NomeVendedor: string read FNomeVendedor write SetNomeVendedor;

        [TPersistable(fgPersistable, 'Z3_CLIENTE')]
        [TMaxLenght(6)]
        property CodigoCliente: string read FCodigoCliente write SetCodigoCliente;

        [TPersistable(fgPersistable, 'Z3_ORCLIB')]
        [TMaxLenght(5)]
        property StatusOrcamento: string read FStatusOrcamento write SetStatusOrcamento;

        [TPersistable(fgPersistable, 'Z3_EMISSAO')]
        [TMaxLenght(8)]
        property DataEmissao: string read FDataEmissao write SetDataEmissao;

        [TPersistable(fgPersistable, 'Z3_TIPOCLI')]
        [TMaxLenght(1)]
        property TipoCliente: string read FTipoCliente write SetTipoCliente;

        [TPersistable(fgPersistable, 'Z3_VLRTOT')]
        property ValorTotal: double read FValorTotal write SetValorTotal;

        [TPersistable(fgPersistable, 'Z3_DESCONT')]
        property ValorDesconto: double read FValorDesconto write SetValorDesconto;

        [TPersistable(fgPersistable, 'Z3_VLRLIQ')]
        property ValorLiquido: double read FValorLiquido write SetValorLiquido;

        [TPersistable(fgPersistable, 'Z3_DTLIM')]
        [TMaxLenght(8)]
        property DataValidade: string read FDataValidade write SetDataValidade;

        [TPersistable(fgPersistable, 'Z3_VALBRUT')]
        property ValorBruto: double read FValorBruto write SetValorBruto;

        [TPersistable(fgPersistable, 'Z3_VALMERC')]
        property ValorMercadoria: double read FValorMercadoria write SetValorMercadoria;

        [TPersistable(fgPersistable, 'Z3_DESCNF')]
        property PercetualDesconto: double read FPercetualDesconto write SetPercetualDesconto;

        [TPersistable(fgPersistable, 'Z3_CONDPG')]
        [TMaxLenght(3)]
        property CodigoCondicaoPagamento: string read FCodigoCondicaoPagamento write SetCodigoCondicaoPagamento;

        [TPersistable(fgPersistable, 'Z3_LOJA')]
        [TMaxLenght(2)]
        property CodigoLojaCliente: string read FCodigoLojaCliente write SetCodigoLojaCliente;

        [TPersistable(fgPersistable, 'Z3_HORA')]
        [TMaxLenght(8)]
        property Hora: string read FHora write SetHora;

        [TPersistable(fgPersistable, 'Z3_OBS1')]
        [TMaxLenght(74)]
        property Observacao1: string read FObservacao1 write SetObservacao1;

        [TPersistable(fgPersistable, 'Z3_OBS2')]
        [TMaxLenght(74)]
        property Observacao2: string read FObservacao2 write SetObservacao2;

        [TPersistable(fgPersistable, 'Z3_DTCAD')]
        [TMaxLenght(8)]
        property DataCadastro: string read FDataCadastro write SetDataCadastro;

        [TPersistable(fgPersistable, 'Z3_CODTRAN')]
        [TMaxLenght(6)]
        property CodigoTransportadora: string read FCodigoTransportadora write SetCodigoTransportadora;

        [TPersistable(fgPersistable, 'Z3_LOJTRAN')]
        [TMaxLenght(2)]
        property CodigoLojaTransportadora: string read FCodigoLojaTransportadora write SetCodigoLojaTransportadora;

        [TPersistable(fgPersistable, 'Z3_TIPFRET')]
        [TMaxLenght(1)]
        property TipoDoFrete: string read FTipoDoFrete write SetTipoDoFrete;

        [TPersistable(fgPersistable, 'Z3_BAIRROE')]
        [TMaxLenght(40)]
        property BairroEntrega: string read FBairroEntrega write SetBairroEntrega;

        [TPersistable(fgPersistable, 'Z3_CEPE')]
        [TMaxLenght(8)]
        property CepEntrega: string read FCepEntrega write SetCepEntrega;

        [TPersistable(fgPersistable, 'Z3_MUNE')]
        [TMaxLenght(60)]
        property MunicipioEntrega: string read FMunicipioEntrega write SetMunicipioEntrega;

        [TPersistable(fgPersistable, 'Z3_ESTE')]
        [TMaxLenght(2)]
        property UFEntrega: string read FUFEntrega write SetUFEntrega;

        [TPersistable(fgPersistable, 'Z3_DESPESA')]
        property ValorDespesa: double read FValorDespesa write SetValorDespesa;

        [TPersistable(fgPersistable, 'Z3_PLIQUI')]
        property PesoLiquido: double read FPesoLiquido write SetPesoLiquido;

        [TPersistable(fgPersistable, 'Z3_PBRUTO')]
        property PesoBruto: double read FPesoBruto write SetPesoBruto;

        [TPersistable(fgPersistable, 'Z3_VOLUME')]
        property Volume: double read FVolume write SetVolume;

        [TPersistable(fgPersistable, 'Z3_ESPECIE')]
        [TMaxLenght(15)]
        property Especie: string read FEspecie write SetEspecie;

        [TPersistable(fgPersistable, 'Z3_PLACA')]
        [TMaxLenght(10)]
        property Placa: string read FPlaca write SetPlaca;

        [TPersistable(fgPersistable, 'Z3_TIPOVEN')]
        [TMaxLenght(2)]
        property TipoVenda: string read FTipoVenda write SetTipoVenda;

        [TPersistable(fgPersistable, 'Z3_TDNUME')]
        [TMaxLenght(24)]
        property NumeroPedidoEcommerce: string read FNumeroPedidoEcommerce write SetNumeroPedidoEcommerce;

        [TPersistable(fgPersistable, 'Z3_TDNOMCL')]
        [TMaxLenght(30)]
        property NomeCliente: string read FNomeCliente write SetNomeCliente;

        [TPersistable(fgPersistable, 'D_E_L_E_T_')]
        [TMaxLenght(1)]
        property Delete: string read FDelete write SetDelete;

        [TPersistable(fgPersistable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        [TPersistable(fgPersistable, 'R_E_C_D_E_L_')]
        property RecnoDel: integer read FRecnoDel write SetRecnoDel;

        [TPersistable(fgPersistable, 'Z3_VERSAO')]
        [TMaxLenght(20)]
        property VersaoSistema: string read FVersaoSistema write SetVersaoSistema;

        [TPersistable(fgPersistable, 'Z3_XCODBAI')]
        [TMaxLenght(8)]
        property CodigoBairroTOTVS: string read FCodigoBairroTOTVS write SetCodigoBairroTOTVS;

    end;

implementation


{ TOrcamento }

uses Lib.Filter, Lib.Biblioteca, Biz.UsuarioLogado;

{$REGION 'Métodos CRUD'}

function TOrcamento.Inserir: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    parametro: TParametro;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            sql := fabrica.GerarSqlInsercao;
            parametro := Self.ObjetoParaParametros(Insercao);
            result := dao.Inserir(sql, parametro);
        except
          on e: exception do
              raise Exception.Create('Erro ao inserir Orcamento'+#13+ e.Message);
        end;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;
end;

function TOrcamento.Alterar: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    parametro: TParametro;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            sql := fabrica.GerarSqlAlteracao;
            parametro := Self.ObjetoParaParametros(Alteracao);
            result := dao.Alterar(sql, parametro);
        except
          on e: exception do
              raise Exception.Create('Erro ao alterar Orcamento'+#13+ e.Message);
        end;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;
end;


function TOrcamento.Excluir: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    parametro: TParametro;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            sql := fabrica.GerarSqlExclusao;
            parametro := Self.ObjetoParaParametros(Exclusao);
            result := dao.Excluir(sql, parametro);
        except
          on e: exception do
              raise Exception.Create('Erro ao excluir Orcamento'+#13+ e.Message);
        end;
    finally
        if parametro <> nil then
            FreeAndNil(parametro);
    end;

end;

function TOrcamento.Consultar(parametros: TParametro): Tlista<TOrcamento>;
var
    query: string;
    condicao: TCondicaoConsulta;
begin
    try
        condicao := TCondicaoConsulta.Create(parametros);
        condicao.Adiciona('Z3_FILIAL',ccIgual, lgAnd); 
        condicao.Adiciona('Z3_NUM',ccIgual, lgAND); 
        condicao.Adiciona('Z3_VEND',ccIgual, lgAND); 
        condicao.Adiciona('Z3_NOMVDO',ccIgual, lgAND); 
        condicao.Adiciona('Z3_CLIENTE',ccIgual, lgAND); 
        condicao.Adiciona('Z3_ORCLIB',ccIgual, lgAND); 
        condicao.Adiciona('Z3_EMISSAO',ccIgual, lgAND); 
        condicao.Adiciona('Z3_TIPOCLI',ccIgual, lgAND); 
        condicao.Adiciona('Z3_VLRTOT',ccIgual, lgAND); 
        condicao.Adiciona('Z3_DESCONT',ccIgual, lgAND); 
        condicao.Adiciona('Z3_VLRLIQ',ccIgual, lgAND); 
        condicao.Adiciona('Z3_DTLIM',ccIgual, lgAND); 
        condicao.Adiciona('Z3_VALBRUT',ccIgual, lgAND); 
        condicao.Adiciona('Z3_VALMERC',ccIgual, lgAND); 
        condicao.Adiciona('Z3_DESCNF',ccIgual, lgAND); 
        condicao.Adiciona('Z3_CONDPG',ccIgual, lgAND); 
        condicao.Adiciona('Z3_LOJA',ccIgual, lgAND); 
        condicao.Adiciona('Z3_HORA',ccIgual, lgAND); 
        condicao.Adiciona('Z3_OBS1',ccIgual, lgAND); 
        condicao.Adiciona('Z3_OBS2',ccIgual, lgAND); 
        condicao.Adiciona('Z3_DTCAD',ccIgual, lgAND); 
        condicao.Adiciona('Z3_CODTRAN',ccIgual, lgAND); 
        condicao.Adiciona('Z3_LOJTRAN',ccIgual, lgAND); 
        condicao.Adiciona('Z3_TIPFRET',ccIgual, lgAND); 
        condicao.Adiciona('Z3_BAIRROE',ccIgual, lgAND); 
        condicao.Adiciona('Z3_CEPE',ccIgual, lgAND); 
        condicao.Adiciona('Z3_MUNE',ccIgual, lgAND); 
        condicao.Adiciona('Z3_ESTE',ccIgual, lgAND); 
        condicao.Adiciona('Z3_DESPESA',ccIgual, lgAND); 
        condicao.Adiciona('Z3_PLIQUI',ccIgual, lgAND); 
        condicao.Adiciona('Z3_PBRUTO',ccIgual, lgAND); 
        condicao.Adiciona('Z3_VOLUME',ccIgual, lgAND); 
        condicao.Adiciona('Z3_ESPECIE',ccIgual, lgAND); 
        condicao.Adiciona('Z3_PLACA',ccIgual, lgAND); 
        condicao.Adiciona('Z3_TIPOVEN',ccIgual, lgAND); 
        condicao.Adiciona('Z3_TDNUME',ccIgual, lgAND); 
        condicao.Adiciona('Z3_TDNOMCL',ccIgual, lgAND); 
        condicao.Adiciona('D_E_L_E_T_',ccIgual, lgAND); 
        condicao.Adiciona('R_E_C_N_O_',ccIgual, lgAND); 
        condicao.Adiciona('R_E_C_D_E_L_',ccIgual, lgAND); 
        condicao.Adiciona('Z3_VERSAO',ccIgual, lgAND); 
        condicao.Adiciona('Z3_XCODBAI',ccIgual, lgAND); 

        query := 'SELECT '+Self.ObterCamposSeparadosPorVirgula(Consulta,[]) + ' FROM ' + Self.TabelaReferencia + ' WHERE D_E_L_E_T_ = '''' ' + condicao.ToString(true);

        Result := dao.Consultar(query,parametros);
    finally
        condicao.Free;
    end;
end;

function TOrcamento.Listar(tipoOperacao: TOparationTypes; multselect: Boolean): TResultFilter;
var
    campoFiltro:TFieldFilter;
    filtro : TFilter<TOrcamento>;
    parametro : TParametro;
    //lista:TLista<TOrcamento>
begin
    try
        filtro := TFilter<TOrcamento>.Create;
        filtro.ScreenName := 'Filtro de Orcamento';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := multselect;
        filtro.AddIndex(1, 'NumeroOrcamento=Z3_NUM', 'NumeroOrcamento');
        filtro.AddIndex(2, 'CodigoVendedor=Z3_VEND', 'CodigoVendedor');
        filtro.AddIndex(3, 'CodigoLojaCliente=Z3_LOJA', 'CodigoLojaCliente');
        filtro.AddIndex(4, 'CodigoCliente=Z3_CLIENTE', 'CodigoCliente');
        filtro.AddIndex(5, 'NomeCliente=Z3_TDNOMCL', 'NomeCliente');
        filtro.AddIndex(6, 'DataEmissao=Z3_EMISSAO', 'DataEmissao');
        filtro.AddIndex(7, 'NumeroPedidoEcommerce=Z3_TDNUME', 'NumeroPedidoEcommerce');
        //###Criar os Índices do filtro
		// filtro.AddIndex(99, 'Empresa=S01_EMP, Filial=S01_FILIAL, Descricao=S01_DESC', 'Empresa + Filial + Descrição');

        {$REGION 'Campo Filtro'}

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'NumeroOrcamento';
        campoFiltro.Name := 'NumeroOrcamento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'CodigoVendedor';
        campoFiltro.Name := 'CodigoVendedor';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'NomeVendedor';
        campoFiltro.Name := 'NomeVendedor';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'CodigoLojaCliente';
        campoFiltro.Name := 'CodigoLojaCliente';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'CodigoCliente';
        campoFiltro.Name := 'CodigoCliente';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'NomeCliente';
        campoFiltro.Name := 'NomeCliente';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'StatusOrcamento';
        campoFiltro.Name := 'StatusOrcamento';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'DataEmissao';
        campoFiltro.Name := 'DataEmissao';
        campoFiltro.MaskTypes := mtDate;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'ValorLiquido';
        campoFiltro.Name := 'ValorLiquido';
        campoFiltro.MaskTypes := mtCurrency;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'DataValidade';
        campoFiltro.Name := 'DataValidade';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'NumeroPedidoEcommerce';
        campoFiltro.Name := 'NumeroPedidoEcommerce';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        {$ENDREGION}

        parametro := TParametro.Create;
        parametro.Add('','Z3_FILIAL', TUsuarioLogado.ObterInstancia.Filial.Filial);

        filtro.Parametro := parametro;
        result := filtro.Execute;
    finally
        FreeAndNil(parametro);
        // FreeAndNil(lista);
    end;
end;

function TOrcamento.Obter(parametros: TParametro): TOrcamento;
var
  lista: TLista<TOrcamento>;
begin
    try
        lista := Self.Consultar(parametros);

        if lista.Count = 1 then
        begin
           PreencherObjeto(lista[0]);
           Result := Self;
        end
        else
        begin
            TLib.MensagemAdvertencia('Nenhum registro encontrado.', 'Aviso');
            Result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

function TOrcamento.Obter(ID: string): TOrcamento;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'R_E_C_N_O_', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;


{$ENDREGION}

{$REGION 'Regras de Negócio'}

procedure TOrcamento.PreencherObjeto(Orcamento: TOrcamento);
begin
    Orcamento.CopiarPara(Self);
    FPreenchido := true;
end;


{$ENDREGION}

{$REGION 'Métodos de Propriedades'}

procedure TOrcamento.SetCodigoFilial(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoFilial',value);
    FCodigoFilial := Value;
end;

procedure TOrcamento.SetNumeroOrcamento(const Value: string);
begin
    ValidarAlteracaoPropriedade('NumeroOrcamento',value);
    FNumeroOrcamento := Value;
end;

procedure TOrcamento.SetCodigoVendedor(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoVendedor',value);
    FCodigoVendedor := Value;
end;

procedure TOrcamento.SetNomeVendedor(const Value: string);
begin
    ValidarAlteracaoPropriedade('NomeVendedor',value);
    FNomeVendedor := Value;
end;

procedure TOrcamento.SetCodigoCliente(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoCliente',value);
    FCodigoCliente := Value;
end;

procedure TOrcamento.SetStatusOrcamento(const Value: string);
begin
    ValidarAlteracaoPropriedade('StatusOrcamento',value);
    FStatusOrcamento := Value;
end;

procedure TOrcamento.SetDataEmissao(const Value: string);
begin
    ValidarAlteracaoPropriedade('DataEmissao',value);
    FDataEmissao := Value;
end;

procedure TOrcamento.SetTipoCliente(const Value: string);
begin
    ValidarAlteracaoPropriedade('TipoCliente',value);
    FTipoCliente := Value;
end;

procedure TOrcamento.SetValorTotal(const Value: double);
begin
    ValidarAlteracaoPropriedade('ValorTotal',value);
    FValorTotal := Value;
end;

procedure TOrcamento.SetValorDesconto(const Value: double);
begin
    ValidarAlteracaoPropriedade('ValorDesconto',value);
    FValorDesconto := Value;
end;

procedure TOrcamento.SetValorLiquido(const Value: double);
begin
    ValidarAlteracaoPropriedade('ValorLiquido',value);
    FValorLiquido := Value;
end;

procedure TOrcamento.SetDataValidade(const Value: string);
begin
    ValidarAlteracaoPropriedade('DataValidade',value);
    FDataValidade := Value;
end;

procedure TOrcamento.SetValorBruto(const Value: double);
begin
    ValidarAlteracaoPropriedade('ValorBruto',value);
    FValorBruto := Value;
end;

procedure TOrcamento.SetValorMercadoria(const Value: double);
begin
    ValidarAlteracaoPropriedade('ValorMercadoria',value);
    FValorMercadoria := Value;
end;

procedure TOrcamento.SetPercetualDesconto(const Value: double);
begin
    ValidarAlteracaoPropriedade('PercetualDesconto',value);
    FPercetualDesconto := Value;
end;

procedure TOrcamento.SetCodigoCondicaoPagamento(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoCondicaoPagamento',value);
    FCodigoCondicaoPagamento := Value;
end;

procedure TOrcamento.SetCodigoLojaCliente(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoLojaCliente',value);
    FCodigoLojaCliente := Value;
end;

procedure TOrcamento.SetHora(const Value: string);
begin
    ValidarAlteracaoPropriedade('Hora',value);
    FHora := Value;
end;

procedure TOrcamento.SetObservacao1(const Value: string);
begin
    ValidarAlteracaoPropriedade('Observacao1',value);
    FObservacao1 := Value;
end;

procedure TOrcamento.SetObservacao2(const Value: string);
begin
    ValidarAlteracaoPropriedade('Observacao2',value);
    FObservacao2 := Value;
end;

procedure TOrcamento.SetDataCadastro(const Value: string);
begin
    ValidarAlteracaoPropriedade('DataCadastro',value);
    FDataCadastro := Value;
end;

procedure TOrcamento.SetCodigoTransportadora(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoTransportadora',value);
    FCodigoTransportadora := Value;
end;

procedure TOrcamento.SetCodigoLojaTransportadora(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoLojaTransportadora',value);
    FCodigoLojaTransportadora := Value;
end;

procedure TOrcamento.SetTipoDoFrete(const Value: string);
begin
    ValidarAlteracaoPropriedade('TipoDoFrete',value);
    FTipoDoFrete := Value;
end;

procedure TOrcamento.SetBairroEntrega(const Value: string);
begin
    ValidarAlteracaoPropriedade('BairroEntrega',value);
    FBairroEntrega := Value;
end;

procedure TOrcamento.SetCepEntrega(const Value: string);
begin
    ValidarAlteracaoPropriedade('CepEntrega',value);
    FCepEntrega := Value;
end;

procedure TOrcamento.SetMunicipioEntrega(const Value: string);
begin
    ValidarAlteracaoPropriedade('MunicipioEntrega',value);
    FMunicipioEntrega := Value;
end;

procedure TOrcamento.SetUFEntrega(const Value: string);
begin
    ValidarAlteracaoPropriedade('UFEntrega',value);
    FUFEntrega := Value;
end;

procedure TOrcamento.SetValorDespesa(const Value: double);
begin
    ValidarAlteracaoPropriedade('ValorDespesa',value);
    FValorDespesa := Value;
end;

procedure TOrcamento.SetPesoLiquido(const Value: double);
begin
    ValidarAlteracaoPropriedade('PesoLiquido',value);
    FPesoLiquido := Value;
end;

procedure TOrcamento.SetPesoBruto(const Value: double);
begin
    ValidarAlteracaoPropriedade('PesoBruto',value);
    FPesoBruto := Value;
end;

procedure TOrcamento.SetVolume(const Value: double);
begin
    ValidarAlteracaoPropriedade('Volume',value);
    FVolume := Value;
end;

procedure TOrcamento.SetEspecie(const Value: string);
begin
    ValidarAlteracaoPropriedade('Especie',value);
    FEspecie := Value;
end;

procedure TOrcamento.SetPlaca(const Value: string);
begin
    ValidarAlteracaoPropriedade('Placa',value);
    FPlaca := Value;
end;

procedure TOrcamento.SetTipoVenda(const Value: string);
begin
    ValidarAlteracaoPropriedade('TipoVenda',value);
    FTipoVenda := Value;
end;

procedure TOrcamento.SetNumeroPedidoEcommerce(const Value: string);
begin
    ValidarAlteracaoPropriedade('NumeroPedidoEcommerce',value);
    FNumeroPedidoEcommerce := Value;
end;

procedure TOrcamento.SetNomeCliente(const Value: string);
begin
    ValidarAlteracaoPropriedade('NomeCliente',value);
    FNomeCliente := Value;
end;

procedure TOrcamento.SetDelete(const Value: string);
begin
    ValidarAlteracaoPropriedade('Delete',value);
    FDelete := Value;
end;

procedure TOrcamento.SetRecno(const Value: integer);
begin
    ValidarAlteracaoPropriedade('Recno',value);
    FRecno := Value;
end;

procedure TOrcamento.SetRecnoDel(const Value: integer);
begin
    ValidarAlteracaoPropriedade('RecnoDel',value);
    FRecnoDel := Value;
end;

procedure TOrcamento.SetVersaoSistema(const Value: string);
begin
    ValidarAlteracaoPropriedade('VersaoSistema',value);
    FVersaoSistema := Value;
end;

procedure TOrcamento.SetCodigoBairroTOTVS(const Value: string);
begin
    ValidarAlteracaoPropriedade('CodigoBairroTOTVS',value);
    FCodigoBairroTOTVS := Value;
end;


{$ENDREGION}

end.

