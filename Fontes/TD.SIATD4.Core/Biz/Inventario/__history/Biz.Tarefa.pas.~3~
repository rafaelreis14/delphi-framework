unit Biz.Tarefa;

interface

uses
    Classes, System.SysUtils, Dialogs, Lib.Base, Lib.Parametro, Lib.Enumeradores,
    Lib.Persistable, Lib.Biblioteca, Biz.Produto, Biz.Filial, Lib.Lista,
    Lib.ResultFilter;

type
    TTipoManutencao = (Enviado, Inserir, Alterar);

    TTarefa = class(TBase)
    private
        FQuantidadeContada: double;
        FDelet: string;
        FCodigoProduto: string;
        FCodigoFilial: string;
        FIDOperacao: integer;
        FRecno: integer;
        FCodigoEndereco: string;
        FProduto: TProduto;
        FFilial: TFilial;
        FObservacao: string;
        FCustoMedioProduto: double;
        FDescricaoProduto: string;
        FQtdAtualEndereco: double;
        FQtdReservadaEndereco: double;
        FCodigoArmazem: String;
        FCodigoTipoEndereco: string;
        FQuantidadeCarrinho: double;
        FCodigoEnderecoDestino: string;
        FQuantidadeDescarregada: double;
        FCodigoDispositivo: string;
        FCodigoFilialDestino: string;
        FCodigoTipoOperacao: string;
        FCodigoArmazemDestino: String;
        FFilialDestino: TFilial;
        FCodigoTipoEnderecoDestino: string;
        FDescFilialDestino: string;
        FStatusTarefa: string;
        FCodigoTarefa: integer;
        FTipoManutencao: TTipoManutencao;

        procedure SetCodigoFilial(const Value: string);
        procedure SetCodigoProduto(const Value: string);
        procedure SetDelet(const Value: string);
        procedure SetCodigoEndereco(const Value: string);
        procedure SetIDOperacao(const Value: integer);
        procedure SetQuantidadeContada(const Value: double);
        procedure SetRecno(const Value: integer);
        procedure SetProduto(const Value: TProduto);
        procedure SetFilial(const Value: TFilial);
        procedure SetObservacao(const Value: string);
        procedure SetCustoMedioProduto(const Value: double);
        procedure SetDescricaoProduto(const Value: string);
        procedure SetQtdAtualEndereco(const Value: double);
        procedure SetQtdReservadaEndereco(const Value: double);
        procedure SetCodigoArmazem(const Value: String);
        procedure SetCodigoTipoEndereco(const Value: string);
        procedure SetCodigoArmazemDestino(const Value: String);
        procedure SetCodigoDispositivo(const Value: string);
        procedure SetCodigoEnderecoDestino(const Value: string);
        procedure SetCodigoFilialDestino(const Value: string);
        procedure SetCodigoTipoEnderecoDestino(const Value: string);
        procedure SetCodigoTipoOperacao(const Value: string);
        procedure SetFilialDestino(const Value: TFilial);
        procedure SetQuantidadeCarrinho(const Value: double);
        procedure SetQuantidadeDescarregada(const Value: double);
        procedure SetQuantidadeRemanescente(const Value: double);
        procedure SetDescFilialDestino(const Value: string);
        function GetProdutoConferido: string;
        function GetPendente: boolean;
        function GetQuantidadeRemanescente: double;
        procedure SetStatusTarefa(const Value: string);
        procedure SetCodigoTarefa(const Value: integer);
        procedure SetTipoManutencao(const Value: TTipoManutencao);
        function GetTipoManutencao_: string;
    public
        constructor Create;
        destructor Destroy;

        /// <summary>
        /// Metodo que faz a alteração da ClasseBase
        /// </summary>
        function Alterar: boolean;

        function Obter(parametro: TParametro): TTarefa;

        /// <summary>
        /// Obtem uma lista de tarefas por ID Operação
        /// </summary>
        class function ObterListaTarefas(idoper: integer; codigoOperacao: string; reenvio: string = 'NULL'): TLista<TTarefa>;

        /// <summary>
        /// Obtem uma lista de tarefas Divergentes por ID Operação
        /// </summary>
        class function ObterListaTarefasDivergentes(idoper: integer; codigoOperacao: string): TLista<TTarefa>;

        /// <summary>
        /// Método que preenche a instância do Objeto
        /// </summary>
        /// <param name="ClasseBase">
        /// objeto de parametro para preenchimento da instância
        /// </param>
        procedure PopularObjeto(Tarefa: TTarefa);

        [TPersistable(fgPersistable, 'Z83_FILIAL')]
        property CodigoFilial: string read FCodigoFilial write SetCodigoFilial;

        property Filial: TFilial read FFilial write SetFilial;

        [TPersistable(fgPersistable, 'Z83_IDOPER')]
        property IDOperacao: integer read FIDOperacao write SetIDOperacao;

        [TPersistable(fgPersistable, 'Z83_ARMAZEM')]
        property CodigoArmazem: String read FCodigoArmazem write SetCodigoArmazem;

        [TPersistable(fgPersistable, 'Z83_END')]
        [TMaxLenght(10)]
        property CodigoEndereco: string read FCodigoEndereco write SetCodigoEndereco;

        [TPersistable(fgPersistable, 'Z83_TIPOEND')]
        property CodigoTipoEndereco: string read FCodigoTipoEndereco write SetCodigoTipoEndereco;


        [TPersistable(fgPersistable, 'Z83_PROD')]
        property CodigoProduto: string read FCodigoProduto write SetCodigoProduto;

        property Produto: TProduto read FProduto write SetProduto;

        [TPersistable(fgPersistable, 'Z83_QTCONT')]
        property QuantidadeContada: double read FQuantidadeContada write SetQuantidadeContada;

        [TPersistable(fgPersistable, 'Z83_OBSERVACAO')]
        property Observacao: string read FObservacao write SetObservacao;

        [TPersistable(fgUpdateable, 'D_E_L_E_T_')]
        property Delet: string read FDelet write SetDelet;

        [TPersistable(fgUpdateable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        [TPersistable(fgReadOnly, 'Z02_QTDE')]
        property QtdAtualEndereco: double read FQtdAtualEndereco write SetQtdAtualEndereco;

        [TPersistable(fgReadOnly, 'Z02_QTDER')]
        property QtdReservadaEndereco: double read FQtdReservadaEndereco write SetQtdReservadaEndereco;

        [TPersistable(fgReadOnly, 'B1_DESC')]
        property DescricaoProduto: string read FDescricaoProduto write SetDescricaoProduto;

        [TPersistable(fgReadOnly, 'B2_CMEDIO')]
        property CustoMedioProduto: double read FCustoMedioProduto write SetCustoMedioProduto;

        [TPersistable(fgPersistable, 'Z83_ARMAZEMDEST')]
        property CodigoArmazemDestino: String read FCodigoArmazemDestino write SetCodigoArmazemDestino;

        [TPersistable(fgPersistable, 'Z83_ENDDEST')]
        property CodigoEnderecoDestino: string read FCodigoEnderecoDestino write SetCodigoEnderecoDestino;

        [TPersistable(fgPersistable, 'Z83_TIPOENDDEST')]
        property CodigoTipoEnderecoDestino: string read FCodigoTipoEnderecoDestino write SetCodigoTipoEnderecoDestino;

        [TPersistable(fgReadOnly, 'FILIALDESTINO')]
        property CodigoFilialDestino: string read FCodigoFilialDestino write SetCodigoFilialDestino;

        [TPersistable(fgReadOnly, 'DESCFILIALDESTINO')]
        property DescFilialDestino: string read FDescFilialDestino write SetDescFilialDestino;

        property FilialDestino: TFilial read FFilialDestino write SetFilialDestino;

        [TPersistable(fgPersistable, 'Z83_QTCARRINHO')]
        property QuantidadeCarrinho: double read FQuantidadeCarrinho write SetQuantidadeCarrinho;

        [TPersistable(fgPersistable, 'Z83_QTDESCARREGADA')]
        property QuantidadeDescarregada: double read FQuantidadeDescarregada write SetQuantidadeDescarregada;

        property QuantidadeRemanescente: double read GetQuantidadeRemanescente;

        [TPersistable(fgPersistable, 'Z83_DISPOSITIVO')]
        property CodigoDispositivo: string read FCodigoDispositivo write SetCodigoDispositivo;

        [TPersistable(fgPersistable, 'Z83_OPERAC')]
        property CodigoTipoOperacao: string read FCodigoTipoOperacao write SetCodigoTipoOperacao;

        [TPersistable(fgPersistable, 'Z83_STATUS')]
        property StatusTarefa: string read FStatusTarefa write SetStatusTarefa;

        [TPersistable(fgPersistable, 'Z83_TAREFA')]
        property CodigoTarefa: integer read FCodigoTarefa write SetCodigoTarefa;

        property Conferido: string read GetProdutoConferido;

        property Pendente: boolean read GetPendente;

        property TipoManutencao: TTipoManutencao read FTipoManutencao write SetTipoManutencao;

        [TPersistable(fgPersistable, 'TIPO_MANUTENCAO')]
        property TipoManutencao_: string read GetTipoManutencao_;
    end;

implementation

{ TTarefa }

uses Lib.Filter;

{$REGION 'Métodos CRUD'}


function TTarefa.Alterar: boolean;
var
    fabrica: TFabricaSQL;
    sql: WideString;
    parametro: TParametro;
begin
    fabrica := TFabricaSQL.Create(Self);
    try
        try
            sql := fabrica.GerarSqlAlteracao;
            parametro := Self.ObjetoParaParametros(Alteracao);
            dao.Alterar(sql, parametro);
        except
          on e: exception do
              Tlib.MensagemErro('Erro ao alterar usuário.', e.Message);
        end;
    finally
        if parametro = nil then
            FreeAndNil(parametro);
    end;
end;

constructor TTarefa.Create;
begin
    FProduto := TProduto.Create;
    FFilial := TFilial.Create;
end;


destructor TTarefa.Destroy;
begin
    FreeAndNil(FProduto);
    FreeAndNil(FFilial);
end;

function TTarefa.GetProdutoConferido: string;
begin
    if (self.QuantidadeCarrinho > 0) or (self.QuantidadeDescarregada > 0) then
        result := 'OK'
    else
        result := EmptyStr;
end;

function TTarefa.GetQuantidadeRemanescente: double;
begin
    result := self.QuantidadeDescarregada - self.QuantidadeContada;
end;

function TTarefa.GetTipoManutencao_: string;
begin
    case TipoManutencao of
        TTipoManutencao.Enviado:
            result := 'E';
        TTipoManutencao.Inserir:
            result := 'I';
        TTipoManutencao.Alterar:
            result := 'A'
    end;
end;

function TTarefa.GetPendente: boolean;
begin

    // ShowMessage(inttostr(self.Recno)+ ' - ' +self.CodigoProduto + ' - '+floattostr(self.QuantidadeContada) + ' - ' +floattostr(self.QuantidadeDescarregada) );
    if self.QuantidadeContada <> self.QuantidadeDescarregada then
        result := true
    else
        result := false;
end;


class function TTarefa.ObterListaTarefasDivergentes(idoper: integer; codigoOperacao: string): TLista<TTarefa>;
var
    parametro: TParametro;
begin
    parametro := TParametro.Create;
    try
        Parametro.add('', 'Z83_IDOPER', inttostr(idoper));
        Parametro.add('', 'Z83_OPERAC', codigoOperacao);
        //result := BaseLib.XmlToObject<TTarefa>(BaseLib.ExecutaTarefa('ConsultarTarefaDivergente', 'TTarefa', Parametro));
    finally
        FreeAndNil(Parametro);
    end;
end;

function TTarefa.Obter(parametro: TParametro): TTarefa;
begin

end;

class function TTarefa.ObterListaTarefas(idoper: integer; codigoOperacao: string; reenvio: string): TLista<TTarefa>;
var
    parametro: TParametro;
begin
    parametro := TParametro.Create;
    try
        Parametro.add('', 'Z83_IDOPER', inttostr(idoper));
        Parametro.add('', 'Z83_OPERAC', codigoOperacao);
        Parametro.add('', 'REENVIO', reenvio);
     //   result := BaseLib.XmlToObject<TTarefa>(BaseLib.ExecutaTarefa('ObterListaTarefas', 'TTarefa', Parametro));
    finally
        FreeAndNil(parametro);
    end;
end;


{$ENDREGION}
{$REGION 'Regras de Negócio'}

procedure TTarefa.PopularObjeto(Tarefa: TTarefa);
begin
    Tarefa.CopiarPara(self);
    FPreenchido := true;
    // Self.CodigoFilial := Tarefa.CodigoFilial;
    // Self.IDOperacao := Tarefa.IDOperacao;
    // Self.CodigoEndereco := Tarefa.CodigoEndereco;
    // Self.CodigoProduto := Tarefa.CodigoProduto;
    // Self.QuantidadeContada := Tarefa.QuantidadeContada;
    // Self.Observacao := Tarefa.Observacao;
    // Self.Delet := Tarefa.Delet;
    // Self.Recno := Tarefa.Recno;

end;

{$ENDREGION}
{$REGION 'Métodos de Propriedades'}

procedure TTarefa.SetCodigoFilial(const Value: string);
begin
    FCodigoFilial := Value;
end;

procedure TTarefa.SetCodigoFilialDestino(const Value: string);
begin
    FCodigoFilialDestino := Value;
end;

procedure TTarefa.SetCodigoProduto(const Value: string);
begin
    FCodigoProduto := Value;
end;

procedure TTarefa.SetCodigoTarefa(const Value: integer);
begin
    FCodigoTarefa := Value;
end;

procedure TTarefa.SetCodigoTipoEndereco(const Value: string);
begin
    FCodigoTipoEndereco := Value;
end;

procedure TTarefa.SetCodigoTipoEnderecoDestino(const Value: string);
begin
    FCodigoTipoEnderecoDestino := Value;
end;

procedure TTarefa.SetCodigoTipoOperacao(const Value: string);
begin
    FCodigoTipoOperacao := Value;
end;

procedure TTarefa.SetCustoMedioProduto(const Value: double);
begin
    FCustoMedioProduto := Value;
end;

procedure TTarefa.SetDelet(const Value: string);
begin
    FDelet := Value;
end;

procedure TTarefa.SetDescFilialDestino(const Value: string);
begin
    FDescFilialDestino := Value;
end;

procedure TTarefa.SetDescricaoProduto(const Value: string);
begin
    FDescricaoProduto := Value;
end;

procedure TTarefa.SetFilial(const Value: TFilial);
begin
    FFilial := Value;
end;

procedure TTarefa.SetFilialDestino(const Value: TFilial);
begin
    FFilialDestino := Value;
end;



procedure TTarefa.SetCodigoArmazem(const Value: String);
begin
    FCodigoArmazem := Value;
end;

procedure TTarefa.SetCodigoArmazemDestino(const Value: String);
begin
    FCodigoArmazemDestino := Value;
end;

procedure TTarefa.SetCodigoDispositivo(const Value: string);
begin
    FCodigoDispositivo := Value;
end;

procedure TTarefa.SetCodigoEndereco(const Value: string);
begin
    FCodigoEndereco := Value;
end;

procedure TTarefa.SetCodigoEnderecoDestino(const Value: string);
begin
    FCodigoEnderecoDestino := Value;
end;

procedure TTarefa.SetIDOperacao(const Value: integer);
begin
    FIDOperacao := Value;
end;

procedure TTarefa.SetObservacao(const Value: string);
begin
    FObservacao := Value;
end;


procedure TTarefa.SetProduto(const Value: TProduto);
begin
    FProduto := Value;
end;

procedure TTarefa.SetQtdAtualEndereco(const Value: double);
begin
    FQtdAtualEndereco := Value;
end;

procedure TTarefa.SetQtdReservadaEndereco(const Value: double);
begin
    FQtdReservadaEndereco := Value;
end;

procedure TTarefa.SetQuantidadeCarrinho(const Value: double);
begin
    FQuantidadeCarrinho := Value;
end;

procedure TTarefa.SetQuantidadeContada(const Value: double);
begin
    FQuantidadeContada := Value;
end;

procedure TTarefa.SetQuantidadeDescarregada(const Value: double);
begin
    FQuantidadeDescarregada := Value;
end;

procedure TTarefa.SetQuantidadeRemanescente(const Value: double);
begin

end;

procedure TTarefa.SetRecno(const Value: integer);
begin
    FRecno := Value;
end;

procedure TTarefa.SetStatusTarefa(const Value: string);
begin
    FStatusTarefa := Value;
end;

procedure TTarefa.SetTipoManutencao(const Value: TTipoManutencao);
begin
    FTipoManutencao := Value;
end;

{$ENDREGION}

end.
