unit ClsTerefa;

interface

uses
    clstipoendereco, Classes, System.SysUtils, Dialogs, ClsBase, ClsParametro, ClsEnumeradores,
    ClsPersistable, ClsLib, ClsEndereco, ClsOperacao, ClsProduto, ClsFilial, ClsLista,
  ClsResultFilter, ClsArmazem;

type
    TTerefa = class(TBase)
    private
        FQuantidadeContada: double;
        FDelet: string;
        FCodigoProduto: string;
        FCodigoFilial: string;
        FIDOperacao: integer;
        FRecno: integer;
        FCodigoEndereco: string;
        FEndereco: TEndereco;
        FOperacao: TOperacao;
        FProduto: TProduto;
        FFilial: TFilial;
        FObservacao: string;
        FCustoMedioProduto: double;
        FDescricaoProduto: string;
        FQtdAtualEndereco: double;
        FQtdReservadaEndereco: double;
        FArmazem: TArmazem;
        FCodigoArmazem: String;
        FCodigoTipoEndereco: string;
        FTipoEndereco: TTipoEndereco;
        FQuantidadeCarrinho: double;
        FCodigoEnderecoDestino: string;
        FQuantidadeDescarregada: double;
        FCodigoDispositivo: string;
        FCodigoFilialDestino: string;
        FCodigoTipoOperacao: string;
        FArmazemDestino: TArmazem;
        FTipoEnderecoDestino: TTipoEndereco;
        FEnderecoDestino: TEndereco;
        FCodigoArmazemDestino: String;
        FFilialDestino: TFilial;
        FCodigoTipoEnderecoDestino: string;
        FDescFilialDestino: string;
    FStatusTarefa: string;
    FCodigoTarefa: integer;

        procedure SetCodigoFilial(const Value: string);
        procedure SetCodigoProduto(const Value: string);
        procedure SetDelet(const Value: string);
        procedure SetCodigoEndereco(const Value: string);
        procedure SetIDOperacao(const Value: integer);
        procedure SetQuantidadeContada(const Value: double);
        procedure SetRecno(const Value: integer);
        procedure SetEndereco(const Value: TEndereco);
        procedure SetOperacao(const Value: TOperacao);
        procedure SetProduto(const Value: TProduto);
        procedure SetFilial(const Value: TFilial);
        procedure SetObservacao(const Value: string);
        procedure SetCustoMedioProduto(const Value: double);
        procedure SetDescricaoProduto(const Value: string);
        procedure SetQtdAtualEndereco(const Value: double);
        procedure SetQtdReservadaEndereco(const Value: double);
        procedure SetArmazem(const Value: TArmazem);
        procedure SetCodigoArmazem(const Value: String);
        procedure SetCodigoTipoEndereco(const Value: string);
        procedure SetTipoEndereco(const Value: TTipoEndereco);
        procedure SetArmazemDestino(const Value: TArmazem);
        procedure SetCodigoArmazemDestino(const Value: String);
        procedure SetCodigoDispositivo(const Value: string);
        procedure SetCodigoEnderecoDestino(const Value: string);
        procedure SetCodigoFilialDestino(const Value: string);
        procedure SetCodigoTipoEnderecoDestino(const Value: string);
        procedure SetCodigoTipoOperacao(const Value: string);
        procedure SetEnderecoDestino(const Value: TEndereco);
        procedure SetFilialDestino(const Value: TFilial);
        procedure SetQuantidadeCarrinho(const Value: double);
        procedure SetQuantidadeDescarregada(const Value: double);
        procedure SetQuantidadeRemanescente(const Value: double);
        procedure SetTipoEnderecoDestino(const Value: TTipoEndereco);
        procedure SetDescFilialDestino(const Value: string);
        function GetProdutoConferido: string;
        function GetPendente: boolean;
    function GetQuantidadeRemanescente: double;
    procedure SetStatusTarefa(const Value: string);
    procedure SetCodigoTarefa(const Value: integer);
    public
        constructor Create;
        destructor Destroy;


        ///	<summary>
        ///	  Metodo que faz a inserção da ClasseBase
        ///	</summary>
        function Inserir: integer; override;

        ///	<summary>
        ///	  Metodo que faz a alteração da ClasseBase
        ///	</summary>
        function Alterar: integer; override;

        ///	<summary>
        ///	  Métido que faz a Deleção da ClasseBase
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave  primária da tabela
        ///	</param>
        function Deletar(ID:string): integer; override;

        ///	<summary>
        ///	  Método que chama a tela de filtro
        ///	</summary>
        ///	<param name="tipoOperacao">
        ///	  Tipo da operação, se é somente filtro, ou seleção de registro
        ///	</param>
        function Listar(tipoOperacao: TOparationTypes): TResultFilter; override;

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="ID">
        ///	  Chave primária da tabela
        ///	</param>
        function Obter(ID: string): TObject; overload; override;

        ///	<summary>
        ///	  Método que retorna um objeto preenchido
        ///	</summary>
        ///	<param name="parametros">
        ///	  Parametros para a consulta do objeto a ser preenchido
        ///	</param>
        function Obter(parametros:TParametro): TObject; overload;


        ///	<summary>
        ///	  Obtem uma lista de tarefas por ID Operação
        ///	</summary>
        class function ObterListaTarefas(idoper:integer; codigoOperacao: string; reenvio: string = 'NULL'): TLista<TTerefa>;


        ///	<summary>
        ///	  Obtem uma lista de tarefas Divergentes por ID Operação
        ///	</summary>
        class function ObterListaTarefasDivergentes(idoper:integer; codigoOperacao: string): TLista<TTerefa>;

        ///	<summary>
        ///	  Método que preenche a instância do Objeto
        ///	</summary>
        ///	<param name="ClasseBase">
        ///	  objeto de parametro para preenchimento da instância
        ///	</param>
        procedure PopularObjeto(Terefa: TTerefa);

        [TPersistable(fgPersistable, 'Z83_FILIAL')]
        property CodigoFilial: string read FCodigoFilial write SetCodigoFilial;

        property Filial: TFilial read FFilial write SetFilial;

        [TPersistable(fgPersistable, 'Z83_IDOPER')]
        property IDOperacao: integer read FIDOperacao write SetIDOperacao;

        property Operacao: TOperacao read FOperacao write SetOperacao;

        [TPersistable(fgPersistable, 'Z83_ARMAZEM')]
        property CodigoArmazem: String read FCodigoArmazem write SetCodigoArmazem;

        property Armazem: TArmazem  read FArmazem write SetArmazem;

        [TPersistable(fgPersistable, 'Z83_END')]
        property CodigoEndereco: string read FCodigoEndereco write SetCodigoEndereco;

        property Endereco: TEndereco read FEndereco write SetEndereco;

        [TPersistable(fgPersistable, 'Z83_TIPOEND')]
        property CodigoTipoEndereco: string read FCodigoTipoEndereco write SetCodigoTipoEndereco;

        property TipoEndereco: TTipoEndereco read FTipoEndereco write SetTipoEndereco;

        [TPersistable(fgPersistable, 'Z83_PROD')]
        property CodigoProduto: string read FCodigoProduto write SetCodigoProduto;

        property Produto: TProduto read FProduto write SetProduto;

        [TPersistable(fgPersistable, 'Z83_QTCONT')]
        property QuantidadeContada: double read FQuantidadeContada write SetQuantidadeContada;

        [TPersistable(fgPersistable, 'Z83_OBSERVACAO')]
        property Observacao: string read FObservacao write SetObservacao;

        [TPersistable(fgUpdateable, 'D_E_L_E_T_')]
        property Delet: string read FDelet write SetDelet;

        [TPersistable(fgUpdateable, 'R_E_C_N_O_')]
        property Recno: integer read FRecno write SetRecno;

        [TPersistable(fgReadOnly, 'Z02_QTDE')]
        property QtdAtualEndereco: double read FQtdAtualEndereco write SetQtdAtualEndereco;

        [TPersistable(fgReadOnly, 'Z02_QTDER')]
        property QtdReservadaEndereco: double read FQtdReservadaEndereco write SetQtdReservadaEndereco;

        [TPersistable(fgReadOnly, 'B1_DESC')]
        property DescricaoProduto: string read FDescricaoProduto write SetDescricaoProduto;

        [TPersistable(fgReadOnly, 'B2_CMEDIO')]
        property CustoMedioProduto: double read FCustoMedioProduto write SetCustoMedioProduto;

        [TPersistable(fgPersistable, 'Z83_ARMAZEMDEST')]
        property CodigoArmazemDestino: String read FCodigoArmazemDestino write SetCodigoArmazemDestino;

        property ArmazemDestino: TArmazem read FArmazemDestino write SetArmazemDestino;

        [TPersistable(fgPersistable, 'Z83_ENDDEST')]
        property CodigoEnderecoDestino: string read FCodigoEnderecoDestino write SetCodigoEnderecoDestino;

        property EnderecoDestino: TEndereco read FEnderecoDestino write SetEnderecoDestino;

        [TPersistable(fgPersistable, 'Z83_TIPOENDDEST')]
        property CodigoTipoEnderecoDestino: string read FCodigoTipoEnderecoDestino write SetCodigoTipoEnderecoDestino;

        property TipoEnderecoDestino: TTipoEndereco read FTipoEnderecoDestino write SetTipoEnderecoDestino;

        [TPersistable(fgReadOnly, 'FILIALDESTINO')]
        property CodigoFilialDestino: string read FCodigoFilialDestino write SetCodigoFilialDestino;

        [TPersistable(fgReadOnly, 'DESCFILIALDESTINO')]
        property DescFilialDestino: string read FDescFilialDestino write SetDescFilialDestino;

        property FilialDestino: TFilial read FFilialDestino write SetFilialDestino;

        [TPersistable(fgPersistable, 'Z83_QTCARRINHO')]
        property QuantidadeCarrinho: double read FQuantidadeCarrinho write SetQuantidadeCarrinho;

        [TPersistable(fgPersistable, 'Z83_QTDESCARREGADA')]
        property QuantidadeDescarregada: double read FQuantidadeDescarregada write SetQuantidadeDescarregada;

        property QuantidadeRemanescente:double read GetQuantidadeRemanescente;

        [TPersistable(fgPersistable, 'Z83_DISPOSITIVO')]
        property CodigoDispositivo: string read FCodigoDispositivo write SetCodigoDispositivo;

        [TPersistable(fgPersistable, 'Z83_OPERAC')]
        property CodigoTipoOperacao: string read FCodigoTipoOperacao write SetCodigoTipoOperacao;

        [TPersistable(fgPersistable, 'Z83_STATUS')]
        property StatusTarefa:string read FStatusTarefa write SetStatusTarefa;

        [TPersistable(fgPersistable, 'Z83_TAREFA')]
        property CodigoTarefa: integer read FCodigoTarefa write SetCodigoTarefa;

        property Conferido: string read GetProdutoConferido;

        property Pendente: boolean read GetPendente;


     end;

implementation

{ TTerefa }

uses ClsFilter, ClsFieldFilter, ClsBaseLib;

{$REGION 'Métodos CRUD'}

function TTerefa.Inserir: integer;
begin
    BaseLib.ExecutaTarefa('InserirTarefa', 'TTerefa', BaseLib.ObjectToParameters(Self,acInsercao));
end;

function TTerefa.Alterar: integer;
begin
    BaseLib.ExecutaTarefa('AlterarTarefa', 'TTarefa' , BaseLib.ObjectToParameters(Self,acAlteracao));
end;

constructor TTerefa.Create;
begin
    FEndereco :=  TEndereco.Create;
    FOperacao := TOperacao.Create;
    FProduto := TProduto.Create;
    FFilial := TFilial.Create;
end;

function TTerefa.Deletar(ID: string): integer;
var
    parametro: TParametro;
begin
    // try
    // parametro := TParametro.Create;
    // parametro.Add('', 'R_E_C_N_O_', ID);
    //
    // Lib.ExecutaTarefa('DeletarTerefa', 'TTerefa', parametro);
    //
    // //###Validar retorno da função
    // result := 0;
    // finally
    // parametro.Free;
    // end;
end;

destructor TTerefa.Destroy;
begin
    FreeAndNil(FEndereco);
    FreeAndNil(FOperacao);
    FreeAndNil(FProduto);
    FreeAndNil(FFilial);
end;

function TTerefa.GetProdutoConferido: string;
begin
   if (self.QuantidadeCarrinho > 0) or (self.QuantidadeDescarregada > 0) then
       result := 'OK'
   else
       result := EmptyStr;
end;

function TTerefa.GetQuantidadeRemanescente: double;
begin
  result := self.QuantidadeDescarregada-self.QuantidadeContada;
end;

function TTerefa.GetPendente: boolean;
begin

  //ShowMessage(inttostr(self.Recno)+ ' - ' +self.CodigoProduto + ' - '+floattostr(self.QuantidadeContada) + ' - ' +floattostr(self.QuantidadeDescarregada) );
  if self.QuantidadeContada <> self.QuantidadeDescarregada then
    result := true
  else
    result := false;
end;

function TTerefa.Listar(tipoOperacao: TOparationTypes): TResultFilter;
var
    campoFiltro: TFieldFilter;
    filtro: TFilter<TTerefa>;
    // parametro : TParametro;
    // lista:TLista<TTerefa>
begin
    inherited;
    try
        filtro := TFilter<TTerefa>.Create;
        filtro.ScreenName := 'Filtro de Terefa';
        filtro.OperationType := tipoOperacao;
        filtro.MultiSelect := true;
        filtro.Task := 'ConsultarTerefa';
        // ###Criar os Índices do filtro

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'CodigoFilial';
        campoFiltro.Name := 'CodigoFilial';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'IDOperacao';
        campoFiltro.Name := 'IDOperacao';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'CodigoEndereco';
        campoFiltro.Name := 'CodigoEndereco';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'CodigoProduto';
        campoFiltro.Name := 'CodigoProduto';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'QuantidadeContada';
        campoFiltro.Name := 'QuantidadeContada';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Delet';
        campoFiltro.Name := 'Delet';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        campoFiltro := TFieldFilter.Create;
        campoFiltro.Description := 'Recno';
        campoFiltro.Name := 'Recno';
        campoFiltro.MaskTypes := mtNone;
        campoFiltro.GridSize := 100;
        campoFiltro.FieldType := fdNormal;
        filtro.AddField(campoFiltro);

        result := filtro.Execute;
    finally
        // FreeAndNil(parametro);
        // lista.Destroy;
    end;
end;

function TTerefa.Obter(parametros: TParametro): TObject;
var
    lista: TLista<TTerefa>;
begin
    try
        lista := BaseLib.XmlToObject<TTerefa>(BaseLib.ExecutaTarefa('ConsultarTerefa', 'TTerefa', parametros));

        if lista.Count = 1 then
        begin
            PopularObjeto(lista[0]);
            result := Self;
        end
        else
        begin
            MessageDlg('Nenhum registro encontrado.', mtError, [mbOk], 0);
            result := nil;
        end;
    finally
        lista.Destroy;
    end;
end;

class function TTerefa.ObterListaTarefasDivergentes(idoper: integer; codigoOperacao: string): TLista<TTerefa>;
var
  parametro: Tparametro;
  BaseLib : TBaseLib;
begin
    parametro := TParametro.Create;
    try
        BaseLib := TBaseLib.Create;
        parametro.add('','Z83_IDOPER', inttostr(idoper));
        parametro.add('','Z83_OPERAC', codigoOperacao);
        result := BaseLib.XmlToObject<TTerefa>(BaseLib.ExecutaTarefa('ConsultarTarefaDivergente', 'TTarefa', parametro));
    finally
        FreeAndNil(parametro);
        FreeAndNil(BaseLib);
    end;
end;

class function TTerefa.ObterListaTarefas(idoper:integer; codigoOperacao: string; reenvio: string): TLista<TTerefa>;
var
  parametro: Tparametro;
  BaseLib : TBaseLib;
begin
    parametro := TParametro.Create;
    try
        BaseLib := TBaseLib.Create;
        parametro.add('','Z83_IDOPER', inttostr(idoper));
        parametro.add('','Z83_OPERAC', codigoOperacao);
        parametro.add('','REENVIO',reenvio);
        result := BaseLib.XmlToObject<TTerefa>(BaseLib.ExecutaTarefa('ObterListaTarefas', 'TTarefa', parametro));
    finally
        FreeAndNil(parametro);
        FreeAndNil(BaseLib);
    end;
end;


function TTerefa.Obter(ID: string): TObject;
var
    parametros: TParametro;

begin
    try
        parametros := TParametro.Create;
        parametros.Add('', 'COLOCAR_CAMPO_ID_AQUI', ID);
        result := Obter(parametros);
    finally
        FreeAndNil(parametros);
    end;
end;

{$ENDREGION}

{$REGION 'Regras de Negócio'}

procedure TTerefa.PopularObjeto(Terefa: TTerefa);
begin
    Terefa.CopiarPara(self);
    FPreenchido := true;
//    Self.CodigoFilial := Terefa.CodigoFilial;
//    Self.IDOperacao := Terefa.IDOperacao;
//    Self.CodigoEndereco := Terefa.CodigoEndereco;
//    Self.CodigoProduto := Terefa.CodigoProduto;
//    Self.QuantidadeContada := Terefa.QuantidadeContada;
//    Self.Observacao := Terefa.Observacao;
//    Self.Delet := Terefa.Delet;
//    Self.Recno := Terefa.Recno;

end;

{$ENDREGION}

{$REGION 'Métodos de Propriedades'}

procedure TTerefa.SetCodigoFilial(const Value: string);
begin
    FCodigoFilial := Value;
end;

procedure TTerefa.SetCodigoFilialDestino(const Value: string);
begin
  FCodigoFilialDestino := Value;
end;

procedure TTerefa.SetCodigoProduto(const Value: string);
begin
    FCodigoProduto := Value;
end;

procedure TTerefa.SetCodigoTarefa(const Value: integer);
begin
  FCodigoTarefa := Value;
end;

procedure TTerefa.SetCodigoTipoEndereco(const Value: string);
begin
  FCodigoTipoEndereco := Value;
end;

procedure TTerefa.SetCodigoTipoEnderecoDestino(const Value: string);
begin
  FCodigoTipoEnderecoDestino := Value;
end;

procedure TTerefa.SetCodigoTipoOperacao(const Value: string);
begin
  FCodigoTipoOperacao := Value;
end;

procedure TTerefa.SetCustoMedioProduto(const Value: double);
begin
  FCustoMedioProduto := Value;
end;

procedure TTerefa.SetDelet(const Value: string);
begin
    FDelet := Value;
end;

procedure TTerefa.SetDescFilialDestino(const Value: string);
begin
  FDescFilialDestino := Value;
end;

procedure TTerefa.SetDescricaoProduto(const Value: string);
begin
  FDescricaoProduto := Value;
end;

procedure TTerefa.SetEndereco(const Value: TEndereco);
begin
    FEndereco := Value;
end;

procedure TTerefa.SetEnderecoDestino(const Value: TEndereco);
begin
  FEnderecoDestino := Value;
end;

procedure TTerefa.SetFilial(const Value: TFilial);
begin
  FFilial := Value;
end;

procedure TTerefa.SetFilialDestino(const Value: TFilial);
begin
  FFilialDestino := Value;
end;

procedure TTerefa.SetArmazem(const Value: TArmazem);
begin
  FArmazem := Value;
end;

procedure TTerefa.SetArmazemDestino(const Value: TArmazem);
begin
  FArmazemDestino := Value;
end;

procedure TTerefa.SetCodigoArmazem(const Value: String);
begin
  FCodigoArmazem := Value;
end;

procedure TTerefa.SetCodigoArmazemDestino(const Value: String);
begin
  FCodigoArmazemDestino := Value;
end;

procedure TTerefa.SetCodigoDispositivo(const Value: string);
begin
  FCodigoDispositivo := Value;
end;

procedure TTerefa.SetCodigoEndereco(const Value: string);
begin
    FCodigoEndereco := Value;
end;

procedure TTerefa.SetCodigoEnderecoDestino(const Value: string);
begin
  FCodigoEnderecoDestino := Value;
end;

procedure TTerefa.SetIDOperacao(const Value: integer);
begin
    FIDOperacao := Value;
end;

procedure TTerefa.SetObservacao(const Value: string);
begin
  FObservacao := Value;
end;

procedure TTerefa.SetOperacao(const Value: TOperacao);
begin
    FOperacao := Value;
end;

procedure TTerefa.SetProduto(const Value: TProduto);
begin
    FProduto := Value;
end;

procedure TTerefa.SetQtdAtualEndereco(const Value: double);
begin
  FQtdAtualEndereco := Value;
end;

procedure TTerefa.SetQtdReservadaEndereco(const Value: double);
begin
  FQtdReservadaEndereco := Value;
end;

procedure TTerefa.SetQuantidadeCarrinho(const Value: double);
begin
  FQuantidadeCarrinho := Value;
end;

procedure TTerefa.SetQuantidadeContada(const Value: double);
begin
    FQuantidadeContada := Value;
end;

procedure TTerefa.SetQuantidadeDescarregada(const Value: double);
begin
  FQuantidadeDescarregada := Value;
end;

procedure TTerefa.SetQuantidadeRemanescente(const Value: double);
begin

end;

procedure TTerefa.SetRecno(const Value: integer);
begin
    FRecno := Value;
end;

procedure TTerefa.SetStatusTarefa(const Value: string);
begin
  FStatusTarefa := Value;
end;

procedure TTerefa.SetTipoEndereco(const Value: TTipoEndereco);
begin
  FTipoEndereco := Value;
end;

procedure TTerefa.SetTipoEnderecoDestino(const Value: TTipoEndereco);
begin
  FTipoEnderecoDestino := Value;
end;

{$ENDREGION}

end.

