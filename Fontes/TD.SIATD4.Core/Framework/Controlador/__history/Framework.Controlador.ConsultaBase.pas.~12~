unit Framework.Controlador.ConsultaBase;

interface

uses RGrid, Forms, Framework.Interfaces.CRUD, Lib.Biblioteca, Lib.Enumeradores,
     Vcl.StdCtrls, Lib.Base, Lib.Parametro, Lib.ResultFilter,
     Framework.UI.FormBase,  Vcl.Controls;

type
    TControladorConsultaBase<T: Class> = class
    public
        class procedure ExecutaPesquisar(grid: TRGrid; labelTotal: TLabel; out resultFilter: TResultFilter);  static;
        class procedure ExecutarInserir(grid: TRGrid; formularioCadastro: TFormClass; labelTotal: TLabel); static;
        class procedure ExecutarAlterar(grid: TRGrid; formularioCadastro: TFormClass; resultFilter: TResultFilter); static;
        class procedure ExecutarExcluir(grid: TRGrid; resultFilter: TResultFilter); static;
        class procedure ExecutarVisualizar(grid: TRGrid; formularioCadastro: TFormClass); static;
    end;

implementation

uses
  System.Classes, System.SysUtils;


{ TControladorConsultaBase<T> }



class procedure TControladorConsultaBase<T>.ExecutaPesquisar(grid: TRGrid; labelTotal: TLabel; out resultFilter: TResultFilter);
var
    objeto: T;
begin
    try
        objeto := Tlib.CriaInstancia<T>;
        resultFilter := ICRUD<T>(objeto).Listar(otFilter, false);
        grid.DataSource := ResultFilter.List;
        grid.DataBind;

        labelTotal.Caption := IntToStr(grid.GetTotalItens);

        grid.SetFocus;
    finally
        if objeto <> nil then
            FreeAndNil(objeto);
    end;
end;

class procedure TControladorConsultaBase<T>.ExecutarAlterar(grid: TRGrid; formularioCadastro: TFormClass; resultFilter: TResultFilter);
var
    Objeto:T;
begin
    try
        Objeto := nil;
        try
            if grid.IsEmpty then
                raise Exception.Create('Selecione um registro na grid para efetuar esta operação');

            Objeto := grid.GetObject<T>;

            if  TLib.AbrirFormulario(formularioCadastro,acAlteracao,Objeto) = rfOK then
            begin
//                grid.DataSource := ICRUD<T>(Objeto).Consultar(resultFilter.Parameters).ToList;
//                grid.DataBind;
//                grid.SetFocus;
            end;
        except
            on e: exception do
                raise Exception.Create('Erro ao alterar registro'+#13+e.Message);
        end;
    finally
        if Objeto = nil then
            objeto := tlib.CriaInstancia<T>;

        grid.DataSource := ICRUD<T>(Objeto).Consultar(resultFilter.Parameters).ToList;
        grid.DataBind;
        grid.SetFocus;

        FreeAndNil(Objeto);

    end;
end;

class procedure TControladorConsultaBase<T>.ExecutarExcluir(grid: TRGrid; resultFilter: TResultFilter);
var
  Objeto: T;
begin
    try
        if grid.IsEmpty then
            raise Exception.Create('Selecione um registro na grid para efetuar esta operação');

        if Tlib.MensagemPergunta('Deseja realmente excluir?','Exclusão') = mrYes then
        begin
            try
                Objeto := grid.GetObject<T>;
                ICRUD<T>(Objeto).Excluir;
                grid.DataSource := ICRUD<T>(Objeto).Consultar(resultFilter.Parameters).ToList;
                grid.DataBind;
                grid.SetFocus;
            except
                 on e: Exception do
                     raise Exception.Create('Erro ao excluir o registro'+#13+e.Message);
            end;
        end;
    finally
        if objeto <> nil then
            FreeAndNil(objeto);
    end;
end;

class procedure TControladorConsultaBase<T>.ExecutarInserir(grid: TRGrid; formularioCadastro: TFormClass; labelTotal: TLabel);
var
    objeto: T;
begin
    try
        objeto := Tlib.CriaInstancia<T>;

        if TLib.AbrirFormulario(formularioCadastro,acInsercao,objeto) = rfOK then
        begin
            grid.ClearDataSource;

            if not assigned(grid.DataSource) then
                grid.DataSource := TList.Create;


            grid.DataSource := ICRUD<T>(objeto).Consultar(TBase(objeto).ObjetoParaParametros(Insercao)).ToList;
            grid.DataBind;
            grid.Row := grid.RowCount - 1;
            labelTotal.Caption := IntToStr(grid.GetTotalItens);
            grid.SetFocus;
        end;
    except
        if objeto <> nil then
            FreeAndNil(objeto);
    end;
end;

class procedure TControladorConsultaBase<T>.ExecutarVisualizar(grid: TRGrid; formularioCadastro: TFormClass);
var
    objeto: T;
begin
    objeto := nil;
    try
        if grid.IsEmpty then
            raise Exception.Create('Selecione um registro na grid para efetuar esta operação');

        objeto := grid.GetObject<T>;
        TLib.AbrirFormulario(FormularioCadastro,acVisualizacao,objeto);
    finally

    end;
end;

end.
