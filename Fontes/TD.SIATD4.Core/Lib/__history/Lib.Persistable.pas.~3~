unit Lib.Persistable;

interface

// uses System.SysUtils, Rtti;

type
    TFlag = (fgPersistable, fgUpdateable, fgReadOnly);

    TPersistable = class(TCustomAttribute)
    private
        FFlag: TFlag;
        FFieldName: string;
        procedure SetFlag(const Value: TFlag);
    public
        constructor Create(pFlag: TFlag; pFieldName: string); overload;
        property Flag: TFlag read FFlag write SetFlag;
        property FieldName: string read FFieldName;
    end;

    TTableReference = class(TCustomAttribute)
    private
        FTableName: string;
        procedure SetTableName(const Value: string);
    published
        constructor Create(pTableName: string); overload;
        property TableName: string read FTableName write SetTableName;
    end;

implementation

{ TPersistable }

constructor TPersistable.Create(pFlag: TFlag; pFieldName: string);
begin
    self.FFieldName := pFieldName;
    self.FFlag := pFlag;
end;

procedure TPersistable.SetFlag(const Value: TFlag);
begin
    FFlag := Value;
end;

{ TTableReference }

constructor TTableReference.Create(pTableName: string);
begin
    TableName := pTableName;
end;

procedure TTableReference.SetTableName(const Value: string);
begin
    FTableName := Value;
end;

end.
