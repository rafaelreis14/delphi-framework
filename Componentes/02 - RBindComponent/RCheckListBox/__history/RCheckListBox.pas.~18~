unit RCheckListBox;

interface

uses
  System.SysUtils, System.Classes, Vcl.Controls, Vcl.StdCtrls, Vcl.CheckLst, Generics.Collections, RTTI;

type
  TRCheckListBox = class(TCheckListBox)
  private
    FDescriptionName: String;
    FMandatoryField: boolean;
    FDataSource: TList<TObject>;
    FPersistentField: boolean;
    FFieldName: String;
    FIDName: String;
    FListValue: TStrings;
    FReadOnly: Boolean;
    function GetValue: String;
    procedure SetDescriptionName(const Value: String);
    procedure SetFieldName(const Value: String);
    procedure SetIDName(const Value: String);
    procedure SetMandatoryField(const Value: boolean);
    procedure SetPersistentField(const Value: boolean);
    procedure SetValue(const Value: String);
    procedure SetListValue(const Value: TStrings);
    procedure SetReadOnly(const Value: Boolean);

    { Private declarations }
  protected
    index: integer;
    procedure ClickCheck; override;

    { Protected declarations }
  published
    property FieldName:String read FFieldName write SetFieldName;
    property MandatoryField: boolean read FMandatoryField write SetMandatoryField;
    property PersistentField: boolean read FPersistentField write SetPersistentField;
    property IDFieldName:String read FIDName write SetIDName;
    property DescriptionFieldName:String read FDescriptionName write SetDescriptionName;
    property ListValue: TStrings read FListValue write SetListValue;
    property &ReadOnly : Boolean read FReadOnly write SetReadOnly;
  public

    property Value:String read GetValue write SetValue;
    procedure FindIndexByIDFieldName(idFieldNameValue: string);
    procedure DataSource<T>(dataSource: Tlist<T>);
    procedure DataBind;
    function GetObject<T: class>:T;
    function GetCheckedObjects<T>: TList<T>;
    function IsSelectedItemChecked: boolean;
    procedure GetSelectedItemChecked;
    procedure GetSelectedItemUnChecked;
    function GetSelectedItemValue: string;

    procedure DeleteSelectedItem;

    constructor Create(AOwner: TComponent);override;
    destructor Destroy; override;

  end;

procedure Register;

implementation

uses
  Lib.Enumeradores, Lib.Base;

procedure Register;
begin
  RegisterComponents('SIATD', [TRCheckListBox]);
end;

{ TRCheckListBox }

procedure TRCheckListBox.ClickCheck;
begin
   if not(ReadOnly) then
      inherited;

end;

constructor TRCheckListBox.Create(AOwner: TComponent);
begin
  inherited;
  self.FListValue := TStringList.Create;

end;

procedure TRCheckListBox.DataBind;
var
  i:integer;
  context: TRttiContext;
  prop: TRttiProperty;
  rows: integer;
begin
  index := Self.ItemIndex;
  self.Clear;
  if (self.FDataSource <> nil)  or (self.FListValue <> nil) then
  begin
      if self.FDataSource <> nil then
      begin
        for i := 0 to self.FDataSource.Count-1 do
        begin
           if (TObject(self.FDataSource[i]).InheritsFrom(TBase) and (TBase(Self.FDataSource[i]).TipoManutencao <> Exclusao)) or (not TObject(self.FDataSource[i]).InheritsFrom(TBase)) then
           begin
               prop := context.GetType(TObject(self.FDataSource[i]).ClassType).GetProperty(self.FDescriptionName);
               self.Items.Add(prop.GetValue(TObject(self.FDataSource[i])).ToString);
           end;
        end;
        if Self.FDataSource.Count > 0 then
            self.ItemIndex := 0;
      end
      else
      if self.FListValue <> nil then
      begin
        for I := 0 to self.FListValue.Count-1 do
        begin
          self.Items.Add(self.FListValue.Names[I])
        end;

        if Self.FListValue.Count > 0 then
            self.ItemIndex := 0;
      end;
  end;
  if (Assigned(FDataSource)) and (Self.Count > 0) and (index <= Self.items.Count) and (index>=0) then
      Self.ItemIndex := index;

end;

procedure TRCheckListBox.DataSource<T>(dataSource: Tlist<T>);
begin
    Self.FDataSource := TList<TObject>(dataSource);
end;

procedure TRCheckListBox.DeleteSelectedItem;
var
    obj: TObject;
begin
   if Assigned(FDataSource) then
   begin
       obj := FDataSource[Self.ItemIndex];
       obj.Free;
       FDataSource.Delete(Self.ItemIndex);
   end
   else
   begin
       FDataSource.Delete(Self.ItemIndex);
   end;

   Self.DataBind;
end;

destructor TRCheckListBox.destroy;
var
  i:integer;
begin
      if assigned(FListValue) then
          FListValue.Free;

      inherited Destroy;
end;

procedure TRCheckListBox.FindIndexByIDFieldName(idFieldNameValue: string);
var
  I:integer;
  context: TRttiContext;
  prop: TRttiProperty;
begin
   if Assigned(FDataSource) then
   begin
       for i := 0 to FDataSource.Count-1 do
       begin
          prop := context.GetType(TObject(FDataSource[i]).ClassType).GetProperty(self.IDFieldName);
          if  Pos(prop.GetValue(TObject(FDataSource[i])).ToString, idFieldNameValue ) > 0 then
              Self.Checked[I] := true
          else
             Self.Checked[I] := false;
       end;
   end
   else
   begin
       for I := 0 to self.Items.Count-1 do
       begin
           if FListValue.Count > 0 then
           begin
               if  Pos(self.FListValue.ValueFromIndex[I], idFieldNameValue ) > 0 then
                    Self.Checked[I] := true
               else
                    Self.Checked[I] := false;

           end
           else
           begin
               if  Pos(self.Items[I], idFieldNameValue ) > 0 then
                    Self.Checked[I] := true
               else
                    Self.Checked[I] := false;

           end;
       end;
   end;
end;

function TRCheckListBox.GetCheckedObjects<T>: TList<T>;
var
 i:integer;
 list:Tlist<T>;
begin
  if FDataSource <> nil then
  begin
      list := TList<T>.Create;
      for i := 0 to FDataSource.Count-1 do
      begin
        if self.Checked[I] then
            list.Add(TList<T>(FDataSource)[i]);
      end;
      result := list;
  end else result := nil;
end;

function TRCheckListBox.GetObject<T>: T;
begin
    result := nil;
    if (FDataSource <> nil) and (self.Count > 0) (*and (self.Checked[self.GetItemIndex])*) then
        Result :=  T(TObject(FDataSource[self.ItemIndex]));
end;

procedure TRCheckListBox.GetSelectedItemChecked;
begin
    Self.Checked[Self.GetItemIndex] := true;
end;

procedure TRCheckListBox.GetSelectedItemUnChecked;
begin
    Self.Checked[Self.GetItemIndex] := false;
end;

function TRCheckListBox.GetSelectedItemValue: string;
var
  ind:integer;
  context: TRttiContext;
  prop: TRttiProperty;
begin
    if Self.FDataSource = nil then
    begin
        if self.FListValue.Count = 0 then
            result := self.Items[Self.ItemIndex]
        else
            result :=  self.FListValue.ValueFromIndex[Self.ItemIndex];
    end
    else
    begin
        prop := context.GetType(TObject(Self.FDataSource[Self.ItemIndex]).ClassType).GetProperty(self.IDFieldName);
        result :=  prop.GetValue(TObject(Self.FDataSource[Self.ItemIndex])).ToString;
    end;
end;

function TRCheckListBox.GetValue: String;
var
  ind:integer;
  context: TRttiContext;
  prop: TRttiProperty;
  val: string;
  I: Integer;
begin
    val := EmptyStr;
    if Self.FDataSource = nil then
    begin
       for I := 0 to self.Items.Count-1 do
       begin
           if self.Checked[I] then
           begin
               if self.FListValue.Count = 0 then
                 val := val + self.Items[i]+','
               else
                 val := val + self.FListValue.ValueFromIndex[I]+',';
           end;
       end;
       System.Delete(val,System.Length(val),1);
       result := val;
    end
    else
    begin
       for I := 0 to self.FDataSource.Count-1 do
       begin
           if self.Checked[I] then
           begin
               prop := context.GetType(TObject(Self.FDataSource[I]).ClassType).GetProperty(self.IDFieldName);
               val := val + prop.GetValue(TObject(Self.FDataSource[I])).ToString+',';
           end;
       end;
       System.Delete(val,System.Length(val),1);
       result := val;
    end;
end;

function TRCheckListBox.IsSelectedItemChecked: boolean;
begin
     if Self.ItemIndex >= 0 then
         result := Self.Checked[Self.ItemIndex]
     else
        result := false;
end;

procedure TRCheckListBox.SetDescriptionName(const Value: String);
begin
  if FDescriptionName <> Value then
    FDescriptionName := Value;
end;

procedure TRCheckListBox.SetFieldName(const Value: String);
begin
  if FFieldName <> Value then
    FFieldName := Value;
end;

procedure TRCheckListBox.SetIDName(const Value: String);
begin
   if FIDName <> Value then
    FIDName := Value;
end;

procedure TRCheckListBox.SetListValue(const Value: TStrings);
begin
  if FListValue <> Value then
    FListValue.Assign(Value);
end;

procedure TRCheckListBox.SetMandatoryField(const Value: boolean);
begin
  if FMandatoryField <> Value then
    FMandatoryField := Value;
end;

procedure TRCheckListBox.SetPersistentField(const Value: boolean);
begin
  if FPersistentField <> Value then
    FPersistentField := Value;
end;

procedure TRCheckListBox.SetReadOnly(const Value: Boolean);
begin
  FReadOnly := Value;
end;

procedure TRCheckListBox.SetValue(const Value: String);
begin
    self.FindIndexByIDFieldName(Value);
end;

end.
